
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.1' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    	  path: basedir,
    	  exports: {},
    	  require: function (path, base) {
          return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
        }
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var bignumber = createCommonjsModule(function (module) {
    (function (globalObject) {

    /*
     *      bignumber.js v8.1.1
     *      A JavaScript library for arbitrary-precision arithmetic.
     *      https://github.com/MikeMcl/bignumber.js
     *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
     *      MIT Licensed.
     *
     *      BigNumber.prototype methods     |  BigNumber methods
     *                                      |
     *      absoluteValue            abs    |  clone
     *      comparedTo                      |  config               set
     *      decimalPlaces            dp     |      DECIMAL_PLACES
     *      dividedBy                div    |      ROUNDING_MODE
     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
     *      exponentiatedBy          pow    |      RANGE
     *      integerValue                    |      CRYPTO
     *      isEqualTo                eq     |      MODULO_MODE
     *      isFinite                        |      POW_PRECISION
     *      isGreaterThan            gt     |      FORMAT
     *      isGreaterThanOrEqualTo   gte    |      ALPHABET
     *      isInteger                       |  isBigNumber
     *      isLessThan               lt     |  maximum              max
     *      isLessThanOrEqualTo      lte    |  minimum              min
     *      isNaN                           |  random
     *      isNegative                      |  sum
     *      isPositive                      |
     *      isZero                          |
     *      minus                           |
     *      modulo                   mod    |
     *      multipliedBy             times  |
     *      negated                         |
     *      plus                            |
     *      precision                sd     |
     *      shiftedBy                       |
     *      squareRoot               sqrt   |
     *      toExponential                   |
     *      toFixed                         |
     *      toFormat                        |
     *      toFraction                      |
     *      toJSON                          |
     *      toNumber                        |
     *      toPrecision                     |
     *      toString                        |
     *      valueOf                         |
     *
     */


      var BigNumber,
        isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
        hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',

        mathceil = Math.ceil,
        mathfloor = Math.floor,

        bignumberError = '[BigNumber Error] ',
        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,

        // EDITABLE
        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
        // the arguments to toExponential, toFixed, toFormat, and toPrecision.
        MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function clone(configObject) {
        var div, convertBase, parseNumeric,
          P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
          ONE = new BigNumber(1),


          //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


          // The default values below must be integers within the inclusive ranges stated.
          // The values can also be changed at run-time using BigNumber.set.

          // The maximum number of decimal places for operations involving division.
          DECIMAL_PLACES = 20,                     // 0 to MAX

          // The rounding mode used when rounding to the above decimal places, and when using
          // toExponential, toFixed, toFormat and toPrecision, and round (default value).
          // UP         0 Away from zero.
          // DOWN       1 Towards zero.
          // CEIL       2 Towards +Infinity.
          // FLOOR      3 Towards -Infinity.
          // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          ROUNDING_MODE = 4,                       // 0 to 8

          // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

          // The exponent value at and beneath which toString returns exponential notation.
          // Number type: -7
          TO_EXP_NEG = -7,                         // 0 to -MAX

          // The exponent value at and above which toString returns exponential notation.
          // Number type: 21
          TO_EXP_POS = 21,                         // 0 to MAX

          // RANGE : [MIN_EXP, MAX_EXP]

          // The minimum exponent value, beneath which underflow to zero occurs.
          // Number type: -324  (5e-324)
          MIN_EXP = -1e7,                          // -1 to -MAX

          // The maximum exponent value, above which overflow to Infinity occurs.
          // Number type:  308  (1.7976931348623157e+308)
          // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
          MAX_EXP = 1e7,                           // 1 to MAX

          // Whether to use cryptographically-secure random number generation, if available.
          CRYPTO = false,                          // true or false

          // The modulo mode used when calculating the modulus: a mod n.
          // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
          // The remainder (r) is calculated as: r = a - n * q.
          //
          // UP        0 The remainder is positive if the dividend is negative, else is negative.
          // DOWN      1 The remainder has the same sign as the dividend.
          //             This modulo mode is commonly known as 'truncated division' and is
          //             equivalent to (a % n) in JavaScript.
          // FLOOR     3 The remainder has the same sign as the divisor (Python %).
          // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
          // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
          //             The remainder is always positive.
          //
          // The truncated division, floored division, Euclidian division and IEEE 754 remainder
          // modes are commonly used for the modulus operation.
          // Although the other rounding modes can also be used, they may not give useful results.
          MODULO_MODE = 1,                         // 0 to 9

          // The maximum number of significant digits of the result of the exponentiatedBy operation.
          // If POW_PRECISION is 0, there will be unlimited significant digits.
          POW_PRECISION = 0,                    // 0 to MAX

          // The format specification used by the BigNumber.prototype.toFormat method.
          FORMAT = {
            prefix: '',
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ',',
            decimalSeparator: '.',
            fractionGroupSize: 0,
            fractionGroupSeparator: '\xA0',      // non-breaking space
            suffix: ''
          },

          // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
          // '-', '.', whitespace, or repeated character.
          // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


        //------------------------------------------------------------------------------------------


        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * v {number|string|BigNumber} A numeric value.
         * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
         */
        function BigNumber(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str,
            x = this;

          // Enable constructor call without `new`.
          if (!(x instanceof BigNumber)) return new BigNumber(v, b);

          if (b == null) {

            if (v && v._isBigNumber === true) {
              x.s = v.s;

              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }

              return;
            }

            if ((isNum = typeof v == 'number') && v * 0 == 0) {

              // Use `1 / n` to handle minus zero also.
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;

              // Fast path for integers, where n < 2147483648 (2**31).
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++);

                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }

                return;
              }

              str = String(v);
            } else {

              if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {

              // Determine exponent.
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {

              // Integer.
              e = str.length;
            }

          } else {

            // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
            intCheck(b, 2, ALPHABET.length, 'Base');

            // Allow exponential notation to be used with base 10 argument, while
            // also rounding to DECIMAL_PLACES as with other bases.
            if (b == 10) {
              x = new BigNumber(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }

            str = String(v);

            if (isNum = typeof v == 'number') {

              // Avoid potential interpretation of Infinity and NaN as base 44+ values.
              if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

              // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
              if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
                throw Error
                 (tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }

            alphabet = ALPHABET.slice(0, b);
            e = i = 0;

            // Check that str is a valid base b number.
            // Don't use RegExp, so alphabet can contain special characters.
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == '.') {

                  // If '.' is not the first character and it has not be found before.
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {

                  // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                      str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }

                return parseNumeric(x, String(v), isNum, b);
              }
            }

            // Prevent later check for length on converted number.
            isNum = false;
            str = convertBase(str, b, 10, x.s);

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
            else e = str.length;
          }

          // Determine leading zeros.
          for (i = 0; str.charCodeAt(i) === 48; i++);

          // Determine trailing zeros.
          for (len = str.length; str.charCodeAt(--len) === 48;);

          if (str = str.slice(i, ++len)) {
            len -= i;

            // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
            if (isNum && BigNumber.DEBUG &&
              len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
                throw Error
                 (tooManyDigits + (x.s * v));
            }

             // Overflow?
            if ((e = e - i - 1) > MAX_EXP) {

              // Infinity.
              x.c = x.e = null;

            // Underflow?
            } else if (e < MIN_EXP) {

              // Zero.
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];

              // Transform base

              // e is the base 10 exponent.
              // i is where to slice str to get the first element of the coefficient array.
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;  // i < 1

              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));

                for (len -= LOG_BASE; i < len;) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }

                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }

              for (; i--; str += '0');
              x.c.push(+str);
            }
          } else {

            // Zero.
            x.c = [x.e = 0];
          }
        }


        // CONSTRUCTOR PROPERTIES


        BigNumber.clone = clone;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;


        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object with the following optional properties (if the value of a property is
         * a number, it must be an integer within the inclusive range stated):
         *
         *   DECIMAL_PLACES   {number}           0 to MAX
         *   ROUNDING_MODE    {number}           0 to 8
         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
         *   CRYPTO           {boolean}          true or false
         *   MODULO_MODE      {number}           0 to 9
         *   POW_PRECISION       {number}           0 to MAX
         *   ALPHABET         {string}           A string of two or more unique characters which does
         *                                       not contain '.'.
         *   FORMAT           {object}           An object with some of the following properties:
         *     prefix                 {string}
         *     groupSize              {number}
         *     secondaryGroupSize     {number}
         *     groupSeparator         {string}
         *     decimalSeparator       {string}
         *     fractionGroupSize      {number}
         *     fractionGroupSeparator {string}
         *     suffix                 {string}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined, except for ALPHABET.
         *
         * Return an object with the properties current values.
         */
        BigNumber.config = BigNumber.set = function (obj) {
          var p, v;

          if (obj != null) {

            if (typeof obj == 'object') {

              // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
              // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }

              // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
              // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }

              // EXPONENTIAL_AT {number|number[]}
              // Integer, -MAX to MAX inclusive or
              // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
              // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }

              // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
              // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
              // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
              if (obj.hasOwnProperty(p = 'RANGE')) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error
                     (bignumberError + p + ' cannot be zero: ' + v);
                  }
                }
              }

              // CRYPTO {boolean} true or false.
              // '[BigNumber Error] CRYPTO not true or false: {v}'
              // '[BigNumber Error] crypto unavailable'
              if (obj.hasOwnProperty(p = 'CRYPTO')) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != 'undefined' && crypto &&
                     (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error
                       (bignumberError + 'crypto unavailable');
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error
                   (bignumberError + p + ' not true or false: ' + v);
                }
              }

              // MODULO_MODE {number} Integer, 0 to 9 inclusive.
              // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }

              // POW_PRECISION {number} Integer, 0 to MAX inclusive.
              // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
              if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }

              // FORMAT {object}
              // '[BigNumber Error] FORMAT not an object: {v}'
              if (obj.hasOwnProperty(p = 'FORMAT')) {
                v = obj[p];
                if (typeof v == 'object') FORMAT = v;
                else throw Error
                 (bignumberError + p + ' not an object: ' + v);
              }

              // ALPHABET {string}
              // '[BigNumber Error] ALPHABET invalid: {v}'
              if (obj.hasOwnProperty(p = 'ALPHABET')) {
                v = obj[p];

                // Disallow if only one character,
                // or if it contains '+', '-', '.', whitespace, or a repeated character.
                if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
                  ALPHABET = v;
                } else {
                  throw Error
                   (bignumberError + p + ' invalid: ' + v);
                }
              }

            } else {

              // '[BigNumber Error] Object expected: {v}'
              throw Error
               (bignumberError + 'Object expected: ' + obj);
            }
          }

          return {
            DECIMAL_PLACES: DECIMAL_PLACES,
            ROUNDING_MODE: ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO: CRYPTO,
            MODULO_MODE: MODULO_MODE,
            POW_PRECISION: POW_PRECISION,
            FORMAT: FORMAT,
            ALPHABET: ALPHABET
          };
        };


        /*
         * Return true if v is a BigNumber instance, otherwise return false.
         *
         * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
         *
         * v {any}
         *
         * '[BigNumber Error] Invalid BigNumber: {v}'
         */
        BigNumber.isBigNumber = function (v) {
          if (!v || v._isBigNumber !== true) return false;
          if (!BigNumber.DEBUG) return true;

          var i, n,
            c = v.c,
            e = v.e,
            s = v.s;

          out: if ({}.toString.call(c) == '[object Array]') {

            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

              // If the first element is zero, the BigNumber value must be zero.
              if (c[0] === 0) {
                if (e === 0 && c.length === 1) return true;
                break out;
              }

              // Calculate number of digits that c[0] should have, based on the exponent.
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;

              // Calculate number of digits of c[0].
              //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
              if (String(c[0]).length == i) {

                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }

                // Last element cannot be zero, unless it is the only element.
                if (n !== 0) return true;
              }
            }

          // Infinity/NaN
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }

          throw Error
            (bignumberError + 'Invalid BigNumber: ' + v);
        };


        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.maximum = BigNumber.max = function () {
          return maxOrMin(arguments, P.lt);
        };


        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.minimum = BigNumber.min = function () {
          return maxOrMin(arguments, P.gt);
        };


        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
         * '[BigNumber Error] crypto unavailable'
         */
        BigNumber.random = (function () {
          var pow2_53 = 0x20000000000000;

          // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
          // Check if Math.random() produces more than 32 bits of randomness.
          // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
          // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
          var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
           ? function () { return mathfloor(Math.random() * pow2_53); }
           : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
             (Math.random() * 0x800000 | 0); };

          return function (dp) {
            var a, b, e, k, v,
              i = 0,
              c = [],
              rand = new BigNumber(ONE);

            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);

            k = mathceil(dp / LOG_BASE);

            if (CRYPTO) {

              // Browsers supporting crypto.getRandomValues.
              if (crypto.getRandomValues) {

                a = crypto.getRandomValues(new Uint32Array(k *= 2));

                for (; i < k;) {

                  // 53 bits:
                  // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                  // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                  // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                  //                                     11111 11111111 11111111
                  // 0x20000 is 2^21.
                  v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                  // Rejection sampling:
                  // 0 <= v < 9007199254740992
                  // Probability that v >= 9e15, is
                  // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {

                    // 0 <= v <= 8999999999999999
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;

              // Node.js supporting crypto.randomBytes.
              } else if (crypto.randomBytes) {

                // buffer
                a = crypto.randomBytes(k *= 7);

                for (; i < k;) {

                  // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                  // 0x100000000 is 2^32, 0x1000000 is 2^24
                  // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                  // 0 <= v < 9007199254740992
                  v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                     (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                     (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {

                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            }

            // Use Math.random.
            if (!CRYPTO) {

              for (; i < k;) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }

            k = c[--i];
            dp %= LOG_BASE;

            // Convert trailing digits to zeros according to dp.
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }

            // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--);

            // Zero?
            if (i < 0) {
              c = [e = 0];
            } else {

              // Remove leading elements which are zero and adjust exponent accordingly.
              for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

              // Count the digits of the first element of c to determine leading zeros, and...
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

              // adjust the exponent accordingly.
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }

            rand.e = e;
            rand.c = c;
            return rand;
          };
        })();


        /*
         * Return a BigNumber whose value is the sum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.sum = function () {
          var i = 1,
            args = arguments,
            sum = new BigNumber(args[0]);
          for (; i < args.length;) sum = sum.plus(args[i++]);
          return sum;
        };


        // PRIVATE FUNCTIONS


        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = (function () {
          var decimal = '0123456789';

          /*
           * Convert string of baseIn to an array of numbers of baseOut.
           * Eg. toBaseOut('255', 10, 16) returns [15, 15].
           * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
           */
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j,
              arr = [0],
              arrL,
              i = 0,
              len = str.length;

            for (; i < len;) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

              arr[0] += alphabet.indexOf(str.charAt(i++));

              for (j = 0; j < arr.length; j++) {

                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }

            return arr.reverse();
          }

          // Convert a numeric string of baseIn to a numeric string of baseOut.
          // If the caller is toString, we are converting from base 10 to baseOut.
          // If the caller is BigNumber, we are converting from baseIn to base 10.
          return function (str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y,
              i = str.indexOf('.'),
              dp = DECIMAL_PLACES,
              rm = ROUNDING_MODE;

            // Non-integer.
            if (i >= 0) {
              k = POW_PRECISION;

              // Unlimited precision.
              POW_PRECISION = 0;
              str = str.replace('.', '');
              y = new BigNumber(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;

              // Convert str as if an integer, then restore the fraction part by dividing the
              // result by its base raised to a power.

              y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
               10, baseOut, decimal);
              y.e = y.c.length;
            }

            // Convert the number as integer.

            xc = toBaseOut(str, baseIn, baseOut, callerIsToString
             ? (alphabet = ALPHABET, decimal)
             : (alphabet = decimal, ALPHABET));

            // xc now represents str as an integer and converted to baseOut. e is the exponent.
            e = k = xc.length;

            // Remove trailing zeros.
            for (; xc[--k] == 0; xc.pop());

            // Zero?
            if (!xc[0]) return alphabet.charAt(0);

            // Does str represent an integer? If so, no need for the division.
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;

              // The sign is needed for correct rounding.
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }

            // xc now represents str converted to baseOut.

            // THe index of the rounding digit.
            d = e + dp + 1;

            // The rounding digit: the digit to the right of the digit that may be rounded up.
            i = xc[d];

            // Look at the rounding digits and mode to determine whether to round up.

            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;

            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                  : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                   rm == (x.s < 0 ? 8 : 7));

            // If the index of the rounding digit is not greater than zero, or xc represents
            // zero, then the result of the base conversion is zero or, if rounding up, a value
            // such as 0.00001.
            if (d < 1 || !xc[0]) {

              // 1^-dp or 0
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {

              // Truncate xc to the required number of decimal places.
              xc.length = d;

              // Round up?
              if (r) {

                // Rounding up may mean the previous digit has to be rounded up and so on.
                for (--baseOut; ++xc[--d] > baseOut;) {
                  xc[d] = 0;

                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }

              // Determine trailing zeros.
              for (k = xc.length; !xc[--k];);

              // E.g. [4, 11, 15] becomes 4bf.
              for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

              // Add leading zeros, decimal point and trailing zeros as required.
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }

            // The caller will add the sign.
            return str;
          };
        })();


        // Perform division in the specified base. Called by div and convertBase.
        div = (function () {

          // Assume non-zero x and k.
          function multiply(x, k, base) {
            var m, temp, xlo, xhi,
              carry = 0,
              i = x.length,
              klo = k % SQRT_BASE,
              khi = k / SQRT_BASE | 0;

            for (x = x.slice(); i--;) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }

            if (carry) x = [carry].concat(x);

            return x;
          }

          function compare(a, b, aL, bL) {
            var i, cmp;

            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {

              for (i = cmp = 0; i < aL; i++) {

                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }

            return cmp;
          }

          function subtract(a, b, aL, base) {
            var i = 0;

            // Subtract b from a.
            for (; aL--;) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }

            // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.splice(0, 1));
          }

          // x: dividend, y: divisor.
          return function (x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
              yL, yz,
              s = x.s == y.s ? 1 : -1,
              xc = x.c,
              yc = y.c;

            // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {

              return new BigNumber(

               // Return NaN if either NaN, or both Infinity or 0.
               !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0
             );
            }

            q = new BigNumber(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;

            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }

            // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++);

            if (yc[i] > (xc[i] || 0)) e--;

            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;

              // Normalise xc and yc so highest order digit of yc is >= base / 2.

              n = mathfloor(base / (yc[0] + 1));

              // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
              // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }

              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL; rem[remL++] = 0);
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              // Not necessary, but to prevent trial digit n > base, when using base 3.
              // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

              do {
                n = 0;

                // Compare divisor and remainder.
                cmp = compare(yc, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {

                  // Calculate trial digit, n.

                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // n is how many times the divisor goes into the current remainder.
                  n = mathfloor(rem0 / yc0);

                  //  Algorithm:
                  //  product = divisor multiplied by trial digit (n).
                  //  Compare product and remainder.
                  //  If product is greater than remainder:
                  //    Subtract divisor from product, decrement trial digit.
                  //  Subtract product from remainder.
                  //  If product was less than remainder at the last compare:
                  //    Compare new remainder and divisor.
                  //    If remainder is greater than divisor:
                  //      Subtract divisor from remainder, increment trial digit.

                  if (n > 1) {

                    // n may be > base only when base is 3.
                    if (n >= base) n = base - 1;

                    // product = divisor * trial digit.
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    // If product > remainder then trial digit n too high.
                    // n is 1 too high about 5% of the time, and is not known to have
                    // ever been more than 1 too high.
                    while (compare(prod, rem, prodL, remL) == 1) {
                      n--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {

                    // n is 0 or 1, cmp is -1.
                    // If n is 0, there is no need to compare yc and rem again below,
                    // so change cmp to 1 to avoid it.
                    // If n is 1, leave cmp as -1, so yc and rem are compared again.
                    if (n == 0) {

                      // divisor < remainder, so n must be at least 1.
                      cmp = n = 1;
                    }

                    // product = divisor
                    prod = yc.slice();
                    prodL = prod.length;
                  }

                  if (prodL < remL) prod = [0].concat(prod);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);
                  remL = rem.length;

                   // If product was < remainder.
                  if (cmp == -1) {

                    // Compare divisor and new remainder.
                    // If divisor < new remainder, subtract divisor from remainder.
                    // Trial digit n too low.
                    // n is 1 too low about 5% of the time, and very rarely 2 too low.
                    while (compare(yc, rem, yL, remL) < 1) {
                      n++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                } // else cmp === 1 and n will be 0

                // Add the next digit, n, to the result array.
                qc[i++] = n;

                // Update the remainder.
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);

              more = rem[0] != null;

              // Leading zero?
              if (!qc[0]) qc.splice(0, 1);
            }

            if (base == BASE) {

              // To calculate q.e, first get the number of digits of qc[0].
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

            // Caller is convertBase.
            } else {
              q.e = e;
              q.r = +more;
            }

            return q;
          };
        })();


        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n: a BigNumber.
         * i: the index of the last digit required (i.e. the digit that may be rounded up).
         * rm: the rounding mode.
         * id: 1 (toExponential) or 2 (toPrecision).
         */
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;

          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);

          if (!n.c) return n.toString();

          c0 = n.c[0];
          ne = n.e;

          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
             ? toExponential(str, ne)
             : toFixedPoint(str, ne, '0');
          } else {
            n = round(new BigNumber(n), i, rm);

            // n.e may have changed if the value was rounded up.
            e = n.e;

            str = coeffToString(n.c);
            len = str.length;

            // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.

            // Exponential notation.
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

              // Append zeros?
              for (; len < i; str += '0', len++);
              str = toExponential(str, e);

            // Fixed-point notation.
            } else {
              i -= ne;
              str = toFixedPoint(str, e, '0');

              // Append zeros?
              if (e + 1 > len) {
                if (--i > 0) for (str += '.'; i--; str += '0');
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += '.';
                  for (; i--; str += '0');
                }
              }
            }
          }

          return n.s < 0 && c0 ? '-' + str : str;
        }


        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
          var n,
            i = 1,
            m = new BigNumber(args[0]);

          for (; i < args.length; i++) {
            n = new BigNumber(args[i]);

            // If any number is NaN, return NaN.
            if (!n.s) {
              m = n;
              break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }

          return m;
        }


        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
          var i = 1,
            j = c.length;

           // Remove trailing zeros.
          for (; !c[--j]; c.pop());

          // Calculate the base 10 exponent. First get the number of digits of c[0].
          for (j = c[0]; j >= 10; j /= 10, i++);

          // Overflow?
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

            // Infinity.
            n.c = n.e = null;

          // Underflow?
          } else if (e < MIN_EXP) {

            // Zero.
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }

          return n;
        }


        // Handle values that fail the validity test in BigNumber.
        parseNumeric = (function () {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
            dotAfter = /^([^.]+)\.$/,
            dotBefore = /^\.([^.]+)$/,
            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

          return function (x, str, isNum, b) {
            var base,
              s = isNum ? str : str.replace(whitespaceOrPlus, '');

            // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {

                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                s = s.replace(basePrefix, function (m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });

                if (b) {
                  base = b;

                  // E.g. '1.' to '1', '.1' to '0.1'
                  s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                }

                if (str != s) return new BigNumber(s, base);
              }

              // '[BigNumber Error] Not a number: {n}'
              // '[BigNumber Error] Not a base {b} number: {n}'
              if (BigNumber.DEBUG) {
                throw Error
                  (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
              }

              // NaN
              x.s = null;
            }

            x.c = x.e = null;
          }
        })();


        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd,
            xc = x.c,
            pows10 = POWS_TEN;

          // if x is not Infinity or NaN...
          if (xc) {

            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {

              // Get the number of digits of the first element of xc.
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
              i = sd - d;

              // If the rounding digit is in the first element of xc...
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];

                // Get the rounding digit at index j of n.
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);

                if (ni >= xc.length) {

                  if (r) {

                    // Needed by sqrt.
                    for (; xc.length <= ni; xc.push(0));
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];

                  // Get the number of digits of n.
                  for (d = 1; k >= 10; k /= 10, d++);

                  // Get the index of rd within n.
                  i %= LOG_BASE;

                  // Get the index of rd within n, adjusted for leading zeros.
                  // The number of leading zeros of n is given by LOG_BASE - d.
                  j = i - LOG_BASE + d;

                  // Get the rounding digit at index j of n.
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }

              r = r || sd < 0 ||

              // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
               xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

              r = rm < 4
               ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
               : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                // Check whether the digit to the left of the rounding digit is odd.
                ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                 rm == (x.s < 0 ? 8 : 7));

              if (sd < 1 || !xc[0]) {
                xc.length = 0;

                if (r) {

                  // Convert sd to decimal places.
                  sd -= x.e + 1;

                  // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {

                  // Zero.
                  xc[0] = x.e = 0;
                }

                return x;
              }

              // Remove excess digits.
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];

                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of n.
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }

              // Round up?
              if (r) {

                for (; ;) {

                  // If the digit to be rounded up is in the first element of xc...
                  if (ni == 0) {

                    // i will be the length of xc[0] before k is added.
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++);

                    // if i != k the length has increased.
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }

                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }

              // Remove trailing zeros.
              for (i = xc.length; xc[--i] === 0; xc.pop());
            }

            // Overflow? Infinity.
            if (x.e > MAX_EXP) {
              x.c = x.e = null;

            // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }

          return x;
        }


        function valueOf(n) {
          var str,
            e = n.e;

          if (e === null) return n.toString();

          str = coeffToString(n.c);

          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
            ? toExponential(str, e)
            : toFixedPoint(str, e, '0');

          return n.s < 0 ? '-' + str : str;
        }


        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
          var x = new BigNumber(this);
          if (x.s < 0) x.s = 1;
          return x;
        };


        /*
         * Return
         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         *   0 if they have the same value,
         *   or null if the value of either is NaN.
         */
        P.comparedTo = function (y, b) {
          return compare(this, new BigNumber(y, b));
        };


        /*
         * If dp is undefined or null or true or false, return the number of decimal places of the
         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
         *
         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
         * ROUNDING_MODE if rm is omitted.
         *
         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.decimalPlaces = P.dp = function (dp, rm) {
          var c, n, v,
            x = this;

          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            return round(new BigNumber(x), dp + x.e + 1, rm);
          }

          if (!(c = x.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last number.
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
          if (n < 0) n = 0;

          return n;
        };


        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
          return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };


        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.idiv = function (y, b) {
          return div(this, new BigNumber(y, b), 0, 1);
        };


        /*
         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
         *
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are integers, otherwise it
         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
         *
         * n {number|string|BigNumber} The exponent. An integer.
         * [m] {number|string|BigNumber} The modulus.
         *
         * '[BigNumber Error] Exponent not an integer: {n}'
         */
        P.exponentiatedBy = P.pow = function (n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
            x = this;

          n = new BigNumber(n);

          // Allow NaN and ±Infinity, but not other non-integers.
          if (n.c && !n.isInteger()) {
            throw Error
              (bignumberError + 'Exponent not an integer: ' + valueOf(n));
          }

          if (m != null) m = new BigNumber(m);

          // Exponent of MAX_SAFE_INTEGER is 15.
          nIsBig = n.e > 14;

          // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

            // The sign of the result of pow when x is negative depends on the evenness of n.
            // If +n overflows to ±Infinity, the evenness of n would be not be known.
            y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }

          nIsNeg = n.s < 0;

          if (m) {

            // x % m returns NaN if abs(m) is zero, or m is NaN.
            if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

            isModExp = !nIsNeg && x.isInteger() && m.isInteger();

            if (isModExp) x = x.mod(m);

          // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
          // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
            // [1, 240000000]
            ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
            // [80000000000000]  [99999750000000]
            : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

            // If x is negative and n is odd, k = -0, else k = 0.
            k = x.s < 0 && isOdd(n) ? -0 : 0;

            // If x >= 1, k = ±Infinity.
            if (x.e > -1) k = 1 / k;

            // If n is negative return ±0, else return ±Infinity.
            return new BigNumber(nIsNeg ? 1 / k : k);

          } else if (POW_PRECISION) {

            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }

          if (nIsBig) {
            half = new BigNumber(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }

          y = new BigNumber(ONE);

          // Performs 54 loop iterations for n of 9007199254740991.
          for (; ;) {

            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;

              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
              }
            }

            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);

              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }

            x = x.times(x);

            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
          }

          if (isModExp) return y;
          if (nIsNeg) y = ONE.div(y);

          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
         */
        P.integerValue = function (rm) {
          var n = new BigNumber(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };


        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isEqualTo = P.eq = function (y, b) {
          return compare(this, new BigNumber(y, b)) === 0;
        };


        /*
         * Return true if the value of this BigNumber is a finite number, otherwise return false.
         */
        P.isFinite = function () {
          return !!this.c;
        };


        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isGreaterThan = P.gt = function (y, b) {
          return compare(this, new BigNumber(y, b)) > 0;
        };


        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise return false.
         */
        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
          return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

        };


        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = function () {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };


        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise return false.
         */
        P.isLessThan = P.lt = function (y, b) {
          return compare(this, new BigNumber(y, b)) < 0;
        };


        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise return false.
         */
        P.isLessThanOrEqualTo = P.lte = function (y, b) {
          return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };


        /*
         * Return true if the value of this BigNumber is NaN, otherwise return false.
         */
        P.isNaN = function () {
          return !this.s;
        };


        /*
         * Return true if the value of this BigNumber is negative, otherwise return false.
         */
        P.isNegative = function () {
          return this.s < 0;
        };


        /*
         * Return true if the value of this BigNumber is positive, otherwise return false.
         */
        P.isPositive = function () {
          return this.s > 0;
        };


        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
         */
        P.isZero = function () {
          return !!this.c && this.c[0] == 0;
        };


        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = function (y, b) {
          var i, j, t, xLTy,
            x = this,
            a = x.s;

          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }

          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

          if (!xe || !ye) {

            // Either Infinity?
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

            // Either zero?
            if (!xc[0] || !yc[0]) {

              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

               // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
               ROUNDING_MODE == 3 ? -0 : 0);
            }
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Determine which is the bigger number.
          if (a = xe - ye) {

            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }

            t.reverse();

            // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0));
            t.reverse();
          } else {

            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

            for (a = b = 0; b < j; b++) {

              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }

          // x < y? Point xc to the array of the bigger number.
          if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

          b = (j = yc.length) - (i = xc.length);

          // Append zeros to xc if shorter.
          // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
          if (b > 0) for (; b--; xc[i++] = 0);
          b = BASE - 1;

          // Subtract yc from xc.
          for (; j > a;) {

            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b);
              --xc[i];
              xc[j] += BASE;
            }

            xc[j] -= yc[j];
          }

          // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] == 0; xc.splice(0, 1), --ye);

          // Zero?
          if (!xc[0]) {

            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }

          // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
          // for finite x and y.
          return normalise(y, xc, ye);
        };


        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
          var q, s,
            x = this;

          y = new BigNumber(y, b);

          // Return NaN if x is Infinity or NaN, or y is NaN or zero.
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber(NaN);

          // Return x if y is Infinity or x is zero.
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber(x);
          }

          if (MODULO_MODE == 9) {

            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }

          y = x.minus(q.times(y));

          // To match JavaScript %, ensure sign of zero is sign of dividend.
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

          return y;
        };


        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
         * of BigNumber(y, b).
         */
        P.multipliedBy = P.times = function (y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
            base, sqrtBase,
            x = this,
            xc = x.c,
            yc = (y = new BigNumber(y, b)).c;

          // Either NaN, ±Infinity or ±0?
          if (!xc || !yc || !xc[0] || !yc[0]) {

            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;

              // Return ±Infinity if either is ±Infinity.
              if (!xc || !yc) {
                y.c = y.e = null;

              // Return ±0 if either is ±0.
              } else {
                y.c = [0];
                y.e = 0;
              }
            }

            return y;
          }

          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;

          // Ensure xc points to longer array and xcL to its length.
          if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

          // Initialise the result array with zeros.
          for (i = xcL + ycL, zc = []; i--; zc.push(0));

          base = BASE;
          sqrtBase = SQRT_BASE;

          for (i = ycL; --i >= 0;) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;

            for (k = xcL, j = i + k; j > i;) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }

            zc[j] = c;
          }

          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }

          return normalise(y, zc, e);
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = function () {
          var x = new BigNumber(this);
          x.s = -x.s || null;
          return x;
        };


        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = function (y, b) {
          var t,
            x = this,
            a = x.s;

          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
           if (a != b) {
            y.s = -b;
            return x.minus(y);
          }

          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

          if (!xe || !ye) {

            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0);

            // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }

            t.reverse();
            for (; a--; t.push(0));
            t.reverse();
          }

          a = xc.length;
          b = yc.length;

          // Point xc to the longer array, and b to the shorter length.
          if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

          // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
          for (a = 0; b;) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }

          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0
          // ye = MAX_EXP + 1 possible
          return normalise(y, xc, ye);
        };


        /*
         * If sd is undefined or null or true or false, return the number of significant digits of
         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
         * If sd is true include integer-part trailing zeros in the count.
         *
         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
         * ROUNDING_MODE if rm is omitted.
         *
         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
         *                     boolean: whether to count integer-part trailing zeros: true or false.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
         */
        P.precision = P.sd = function (sd, rm) {
          var c, n, v,
            x = this;

          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);

            return round(new BigNumber(x), sd, rm);
          }

          if (!(c = x.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;

          if (v = c[v]) {

            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--);

            // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++);
          }

          if (sd && x.e + 1 > n) n = x.e + 1;

          return n;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
         */
        P.shiftedBy = function (k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times('1e' + k);
        };


        /*
         *  sqrt(-n) =  N
         *  sqrt(N) =  N
         *  sqrt(-I) =  N
         *  sqrt(I) =  I
         *  sqrt(0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
          var m, n, r, rep, t,
            x = this,
            c = x.c,
            s = x.s,
            e = x.e,
            dp = DECIMAL_PLACES + 4,
            half = new BigNumber('0.5');

          // Negative/NaN/Infinity/zero?
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }

          // Initial estimate.
          s = Math.sqrt(+valueOf(x));

          // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

            if (s == 1 / 0) {
              n = '1e' + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf('e') + 1) + e;
            }

            r = new BigNumber(n);
          } else {
            r = new BigNumber(s + '');
          }

          // Check for zero.
          // r could be zero if MIN_EXP is changed after the this value was created.
          // This would cause a division by zero (x/t) and hence Infinity below, which would cause
          // coeffToString to throw.
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;

            // Newton-Raphson iteration.
            for (; ;) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));

              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                // The exponent of r may here be one less than the final result exponent,
                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                // are indexed correctly.
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);

                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                // iteration.
                if (n == '9999' || !rep && n == '4999') {

                  // On the first iteration only, check to see if rounding up gives the
                  // exact result as the nines may infinitely repeat.
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);

                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }

                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {

                  // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                  // result. If not, then there are further digits and m will be truthy.
                  if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                    // Truncate to the first rounding digit.
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }

                  break;
                }
              }
            }
          }

          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };


        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toExponential = function (dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         */
        P.toFixed = function (dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the format or FORMAT object (see BigNumber.set).
         *
         * The formatting object may contain some or all of the properties shown below.
         *
         * FORMAT = {
         *   prefix: '',
         *   groupSize: 3,
         *   secondaryGroupSize: 0,
         *   groupSeparator: ',',
         *   decimalSeparator: '.',
         *   fractionGroupSize: 0,
         *   fractionGroupSeparator: '\xA0',      // non-breaking space
         *   suffix: ''
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         * [format] {object} Formatting options. See FORMAT pbject above.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
         * '[BigNumber Error] Argument not an object: {format}'
         */
        P.toFormat = function (dp, rm, format) {
          var str,
            x = this;

          if (format == null) {
            if (dp != null && rm && typeof rm == 'object') {
              format = rm;
              rm = null;
            } else if (dp && typeof dp == 'object') {
              format = dp;
              dp = rm = null;
            } else {
              format = FORMAT;
            }
          } else if (typeof format != 'object') {
            throw Error
              (bignumberError + 'Argument not an object: ' + format);
          }

          str = x.toFixed(dp, rm);

          if (x.c) {
            var i,
              arr = str.split('.'),
              g1 = +format.groupSize,
              g2 = +format.secondaryGroupSize,
              groupSeparator = format.groupSeparator || '',
              intPart = arr[0],
              fractionPart = arr[1],
              isNeg = x.s < 0,
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;

            if (g2) i = g1, g1 = g2, g2 = i, len -= i;

            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = '-' + intPart;
            }

            str = fractionPart
             ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
              ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
               '$&' + (format.fractionGroupSeparator || ''))
              : fractionPart)
             : intPart;
          }

          return (format.prefix || '') + str + (format.suffix || '');
        };


        /*
         * Return an array of two BigNumbers representing the value of this BigNumber as a simple
         * fraction with an integer numerator and an integer denominator.
         * The denominator will be a positive non-zero value less than or equal to the specified
         * maximum denominator. If a maximum denominator is not specified, the denominator will be
         * the lowest value necessary to represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
         *
         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
         */
        P.toFraction = function (md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
            x = this,
            xc = x.c;

          if (md != null) {
            n = new BigNumber(md);

            // Throw if md is less than one or is not an integer, unless it is Infinity.
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error
                (bignumberError + 'Argument ' +
                  (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
            }
          }

          if (!xc) return new BigNumber(x);

          d = new BigNumber(ONE);
          n1 = d0 = new BigNumber(ONE);
          d1 = n0 = new BigNumber(ONE);
          s = coeffToString(xc);

          // Determine initial denominator.
          // d is a power of 10 and the minimum max denominator that specifies the value exactly.
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber(s);

          // n0 = d1 = 0
          n0.c[0] = 0;

          for (; ;)  {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }

          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;

          // Determine which fraction is closer to x, n0/d0 or n1/d1
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
              div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

          MAX_EXP = exp;

          return r;
        };


        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
          return +valueOf(this);
        };


        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
         */
        P.toPrecision = function (sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };


        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to ALPHABET.length inclusive.
         *
         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
         */
        P.toString = function (b) {
          var str,
            n = this,
            s = n.s,
            e = n.e;

          // Infinity or NaN?
          if (e === null) {
            if (s) {
              str = 'Infinity';
              if (s < 0) str = '-' + str;
            } else {
              str = 'NaN';
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
               ? toExponential(coeffToString(n.c), e)
               : toFixedPoint(coeffToString(n.c), e, '0');
            } else if (b === 10) {
              n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, '0');
            } else {
              intCheck(b, 2, ALPHABET.length, 'Base');
              str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
            }

            if (s < 0 && n.c[0]) str = '-' + str;
          }

          return str;
        };


        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */
        P.valueOf = P.toJSON = function () {
          return valueOf(this);
        };


        P._isBigNumber = true;

        if (hasSymbol) {
          P[Symbol.toStringTag] = 'BigNumber';

          // Node.js v10.12.0+
          P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;
        }

        if (configObject != null) BigNumber.set(configObject);

        return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS

      // These functions don't need access to variables,
      // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
        var s, z,
          i = 1,
          j = a.length,
          r = a[0] + '';

        for (; i < j;) {
          s = a[i++] + '';
          z = LOG_BASE - s.length;
          for (; z--; s = '0' + s);
          r += s;
        }

        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;);

        return r.slice(0, j + 1 || 1);
      }


      // Compare the value of BigNumbers x and y.
      function compare(x, y) {
        var a, b,
          xc = x.c,
          yc = y.c,
          i = x.s,
          j = y.s,
          k = x.e,
          l = y.e;

        // Either NaN?
        if (!i || !j) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Check that n is a primitive number, an integer, and in range, otherwise throw.
       */
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error
           (bignumberError + (name || 'Argument') + (typeof n == 'number'
             ? n < min || n > max ? ' out of range: ' : ' not an integer: '
             : ' not a primitive number: ') + String(n));
        }
      }


      // Assumes finite n.
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }


      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
         (e < 0 ? 'e' : 'e+') + e;
      }


      function toFixedPoint(str, e, z) {
        var len, zs;

        // Negative exponent?
        if (e < 0) {

          // Prepend zeros.
          for (zs = z + '.'; ++e; zs += z);
          str = zs + str;

        // Positive exponent
        } else {
          len = str.length;

          // Append zeros.
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z);
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
          }
        }

        return str;
      }


      // EXPORT


      BigNumber = clone();
      BigNumber['default'] = BigNumber.BigNumber = BigNumber;

      // AMD.
      if ( module.exports) {
        module.exports = BigNumber;

      // Browser.
      } else {
        if (!globalObject) {
          globalObject = typeof self != 'undefined' && self ? self : window;
        }

        globalObject.BigNumber = BigNumber;
      }
    })(commonjsGlobal);
    });

    var ar = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    class Ar {
        constructor() {
            // Configure and assign the constructor function for the bignumber library.
            this.BigNum = (value, decimals) => {
                let instance = bignumber.BigNumber.clone({ DECIMAL_PLACES: decimals });
                return new instance(value);
            };
        }
        winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {
            let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);
            return formatted ? number.toFormat(decimals) : number.toFixed(decimals);
        }
        arToWinston(arString, { formatted = false } = {}) {
            let number = this.stringToBigNum(arString).shiftedBy(12);
            return formatted ? number.toFormat() : number.toFixed(0);
        }
        compare(winstonStringA, winstonStringB) {
            let a = this.stringToBigNum(winstonStringA);
            let b = this.stringToBigNum(winstonStringB);
            return a.comparedTo(b);
        }
        isEqual(winstonStringA, winstonStringB) {
            return this.compare(winstonStringA, winstonStringB) === 0;
        }
        isLessThan(winstonStringA, winstonStringB) {
            let a = this.stringToBigNum(winstonStringA);
            let b = this.stringToBigNum(winstonStringB);
            return a.isLessThan(b);
        }
        isGreaterThan(winstonStringA, winstonStringB) {
            let a = this.stringToBigNum(winstonStringA);
            let b = this.stringToBigNum(winstonStringB);
            return a.isGreaterThan(b);
        }
        add(winstonStringA, winstonStringB) {
            let a = this.stringToBigNum(winstonStringA);
            let b = this.stringToBigNum(winstonStringB);
            return a.plus(winstonStringB).toFixed(0);
        }
        sub(winstonStringA, winstonStringB) {
            let a = this.stringToBigNum(winstonStringA);
            let b = this.stringToBigNum(winstonStringB);
            return a.minus(winstonStringB).toFixed(0);
        }
        stringToBigNum(stringValue, decimalPlaces = 12) {
            return this.BigNum(stringValue, decimalPlaces);
        }
    }
    exports.default = Ar;

    });

    unwrapExports(ar);

    var bind = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    /*global toString:true*/

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return toString.call(val) === '[object Array]';
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer(val) {
      return toString.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(val) {
      return (typeof FormData !== 'undefined') && (val instanceof FormData);
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate(val) {
      return toString.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile(val) {
      return toString.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob(val) {
      return toString.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.replace(/^\s*/, '').replace(/\s*$/, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === 'object' && typeof val === 'object') {
          result[key] = merge(result[key], val);
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Function equal to merge with the difference being that no reference
     * to original objects is kept.
     *
     * @see merge
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function deepMerge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === 'object' && typeof val === 'object') {
          result[key] = deepMerge(result[key], val);
        } else if (typeof val === 'object') {
          result[key] = deepMerge({}, val);
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    var utils = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      deepMerge: deepMerge,
      extend: extend,
      trim: trim
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%40/gi, '@').
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };
      return error;
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;

        if (utils.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password || '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }

          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(resolve, reject, response);

          // Clean up request
          request = null;
        };

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          var cookies$1 = cookies;

          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies$1.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') {
              throw e;
            }
          }
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }

            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
          });
        }

        if (requestData === undefined) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    var defaults = {
      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');
        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
          return JSON.stringify(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        /*eslint no-param-reassign:0*/
        if (typeof data === 'string') {
          try {
            data = JSON.parse(data);
          } catch (e) { /* Ignore */ }
        }
        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };

    defaults.headers = {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData(
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData(
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData(
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
      var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
      var defaultToConfig2Keys = [
        'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
        'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
        'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
        'httpsAgent', 'cancelToken', 'socketPath'
      ];

      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (typeof config2[prop] !== 'undefined') {
          config[prop] = config2[prop];
        }
      });

      utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
        if (utils.isObject(config2[prop])) {
          config[prop] = utils.deepMerge(config1[prop], config2[prop]);
        } else if (typeof config2[prop] !== 'undefined') {
          config[prop] = config2[prop];
        } else if (utils.isObject(config1[prop])) {
          config[prop] = utils.deepMerge(config1[prop]);
        } else if (typeof config1[prop] !== 'undefined') {
          config[prop] = config1[prop];
        }
      });

      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (typeof config2[prop] !== 'undefined') {
          config[prop] = config2[prop];
        } else if (typeof config1[prop] !== 'undefined') {
          config[prop] = config1[prop];
        }
      });

      var axiosKeys = valueFromConfig2Keys
        .concat(mergeDeepPropertiesKeys)
        .concat(defaultToConfig2Keys);

      var otherKeys = Object
        .keys(config2)
        .filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });

      utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
        if (typeof config2[prop] !== 'undefined') {
          config[prop] = config2[prop];
        } else if (typeof config1[prop] !== 'undefined') {
          config[prop] = config1[prop];
        }
      });

      return config;
    };

    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      // Hook up interceptors middleware
      var chain = [dispatchRequest, undefined];
      var promise = Promise.resolve(config);

      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });

      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(utils.merge(config || {}, {
          method: method,
          url: url
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, data, config) {
        return this.request(utils.merge(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios;

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel(message) {
      this.message = message;
    }

    Cancel.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel.prototype.__CANCEL__ = true;

    var Cancel_1 = Cancel;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      return instance;
    }

    // Create the default instance to be exported
    var axios = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios.Axios = Axios_1;

    // Factory for creating new instances
    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    };

    // Expose Cancel & CancelToken
    axios.Cancel = Cancel_1;
    axios.CancelToken = CancelToken_1;
    axios.isCancel = isCancel;

    // Expose all/spread
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;

    var axios_1 = axios;

    // Allow use of default import syntax in TypeScript
    var _default = axios;
    axios_1.default = _default;

    var axios$1 = axios_1;

    var api = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    class Api {
        constructor(config) {
            this.METHOD_GET = "GET";
            this.METHOD_POST = "POST";
            this.applyConfig(config);
        }
        applyConfig(config) {
            this.config = this.mergeDefaults(config);
        }
        getConfig() {
            return this.config;
        }
        mergeDefaults(config) {
            const protocol = config.protocol || "http";
            const port = config.port || (protocol === "https" ? 443 : 80);
            return {
                host: config.host || "127.0.0.1",
                protocol,
                port,
                timeout: config.timeout || 20000,
                logging: config.logging || false,
                logger: config.logger || console.log
            };
        }
        async get(endpoint, config) {
            try {
                return await this.request().get(endpoint, config);
            }
            catch (error) {
                if (error.response && error.response.status) {
                    return error.response;
                }
                throw error;
            }
        }
        async post(endpoint, body, config) {
            try {
                return await this.request().post(endpoint, body, config);
            }
            catch (error) {
                if (error.response && error.response.status) {
                    return error.response;
                }
                throw error;
            }
        }
        /**
         * Get an AxiosInstance with the base configuration setup to fire off
         * a request to the network.
         */
        request() {
            let instance = axios$1.default.create({
                baseURL: `${this.config.protocol}://${this.config.host}:${this.config.port}`,
                timeout: this.config.timeout,
                maxContentLength: 1024 * 1024 * 512
            });
            if (this.config.logging) {
                instance.interceptors.request.use(request => {
                    this.config.logger(`Requesting: ${request.baseURL}/${request.url}`);
                    return request;
                });
                instance.interceptors.response.use(response => {
                    this.config.logger(`Response:   ${response.config.url} - ${response.status}`);
                    return response;
                });
            }
            return instance;
        }
    }
    exports.default = Api;

    });

    unwrapExports(api);

    var network = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class Network {
        constructor(api) {
            this.api = api;
        }
        getInfo() {
            return this.api.get(`info`).then(response => {
                return response.data;
            });
        }
        getPeers() {
            return this.api.get(`peers`).then(response => {
                return response.data;
            });
        }
    }
    exports.default = Network;

    });

    unwrapExports(network);

    var error = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getError = void 0;
    class ArweaveError extends Error {
        constructor(type, optional = {}) {
            if (optional.message) {
                super(optional.message);
            }
            else {
                super();
            }
            this.type = type;
            this.response = optional.response;
        }
        getType() {
            return this.type;
        }
    }
    exports.default = ArweaveError;
    // Safely get error string
    // from an axios response, falling back to
    // resp.data, statusText or 'unknown'.
    // Note: a wrongly set content-type can
    // cause what is a json response to be interepted
    // as a string or Buffer, so we handle that too.
    function getError(resp) {
        let data = resp.data;
        if (typeof resp.data === "string") {
            try {
                data = JSON.parse(resp.data);
            }
            catch (e) { }
        }
        if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {
            try {
                data = JSON.parse(data.toString());
            }
            catch (e) { }
        }
        return data ? data.error || data : resp.statusText || "unknown";
    }
    exports.getError = getError;

    });

    unwrapExports(error);
    var error_1 = error.getError;

    var byteLength_1 = byteLength;
    var toByteArray_1 = toByteArray;
    var fromByteArray_1 = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      var i;
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(
          uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
        ));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }

    var base64Js = {
    	byteLength: byteLength_1,
    	toByteArray: toByteArray_1,
    	fromByteArray: fromByteArray_1
    };

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    // Copyright Joyent, Inc. and other Node contributors.
    var formatRegExp = /%[sdj%]/g;
    function format(f) {
      if (!isString$1(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject$1(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined$1(global.process)) {
        return function() {
          return deprecate(fn, msg).apply(this, arguments);
        };
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined$1(debugEnviron))
        debugEnviron =  '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined$1(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined$1(ctx.depth)) ctx.depth = 2;
      if (isUndefined$1(ctx.colors)) ctx.colors = false;
      if (isUndefined$1(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction$1(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString$1(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction$1(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate$1(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray$1(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction$1(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate$1(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined$1(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString$1(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber$1(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined$1(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray$1(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber$1(arg) {
      return typeof arg === 'number';
    }

    function isString$1(arg) {
      return typeof arg === 'string';
    }

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined$1(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject$1(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject$1(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate$1(d) {
      return isObject$1(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject$1(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction$1(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }

    function isBuffer$1(maybeBuf) {
      return Buffer.isBuffer(maybeBuf);
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    function log() {
      console.log('%s - %s', timestamp(), format.apply(null, arguments));
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject$1(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var util_1 = {
      inherits: inherits$1,
      _extend: _extend,
      log: log,
      isBuffer: isBuffer$1,
      isPrimitive: isPrimitive,
      isFunction: isFunction$1,
      isError: isError,
      isDate: isDate$1,
      isObject: isObject$1,
      isRegExp: isRegExp,
      isUndefined: isUndefined$1,
      isSymbol: isSymbol,
      isString: isString$1,
      isNumber: isNumber$1,
      isNullOrUndefined: isNullOrUndefined,
      isNull: isNull,
      isBoolean: isBoolean,
      isArray: isArray$1,
      inspect: inspect,
      deprecate: deprecate,
      format: format,
      debuglog: debuglog
    };

    var utils$1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.b64UrlDecode = exports.b64UrlEncode = exports.bufferTob64Url = exports.bufferTob64 = exports.b64UrlToBuffer = exports.stringToB64Url = exports.stringToBuffer = exports.bufferToString = exports.b64UrlToString = exports.concatBuffers = void 0;

    function concatBuffers(buffers) {
        let total_length = 0;
        for (let i = 0; i < buffers.length; i++) {
            total_length += buffers[i].byteLength;
        }
        let temp = new Uint8Array(total_length);
        let offset = 0;
        temp.set(new Uint8Array(buffers[0]), offset);
        offset += buffers[0].byteLength;
        for (let i = 1; i < buffers.length; i++) {
            temp.set(new Uint8Array(buffers[i]), offset);
            offset += buffers[i].byteLength;
        }
        return temp;
    }
    exports.concatBuffers = concatBuffers;
    function b64UrlToString(b64UrlString) {
        let buffer = b64UrlToBuffer(b64UrlString);
        // TextEncoder will be available in browsers, but not in node
        if (typeof TextDecoder == "undefined") {
            const TextDecoder = util_1.TextDecoder;
            return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
        }
        return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
    }
    exports.b64UrlToString = b64UrlToString;
    function bufferToString(buffer) {
        // TextEncoder will be available in browsers, but not in node
        if (typeof TextDecoder == "undefined") {
            const TextDecoder = util_1.TextDecoder;
            return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
        }
        return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
    }
    exports.bufferToString = bufferToString;
    function stringToBuffer(string) {
        // TextEncoder will be available in browsers, but not in node
        if (typeof TextEncoder == "undefined") {
            const TextEncoder = util_1.TextEncoder;
            return new TextEncoder().encode(string);
        }
        return new TextEncoder().encode(string);
    }
    exports.stringToBuffer = stringToBuffer;
    function stringToB64Url(string) {
        return bufferTob64Url(stringToBuffer(string));
    }
    exports.stringToB64Url = stringToB64Url;
    function b64UrlToBuffer(b64UrlString) {
        return new Uint8Array(base64Js.toByteArray(b64UrlDecode(b64UrlString)));
    }
    exports.b64UrlToBuffer = b64UrlToBuffer;
    function bufferTob64(buffer) {
        return base64Js.fromByteArray(new Uint8Array(buffer));
    }
    exports.bufferTob64 = bufferTob64;
    function bufferTob64Url(buffer) {
        return b64UrlEncode(bufferTob64(buffer));
    }
    exports.bufferTob64Url = bufferTob64Url;
    function b64UrlEncode(b64UrlString) {
        return b64UrlString
            .replace(/\+/g, "-")
            .replace(/\//g, "_")
            .replace(/\=/g, "");
    }
    exports.b64UrlEncode = b64UrlEncode;
    function b64UrlDecode(b64UrlString) {
        b64UrlString = b64UrlString.replace(/\-/g, "+").replace(/\_/g, "/");
        let padding;
        b64UrlString.length % 4 == 0
            ? (padding = 0)
            : (padding = 4 - (b64UrlString.length % 4));
        return b64UrlString.concat("=".repeat(padding));
    }
    exports.b64UrlDecode = b64UrlDecode;

    });

    unwrapExports(utils$1);
    var utils_1 = utils$1.b64UrlDecode;
    var utils_2 = utils$1.b64UrlEncode;
    var utils_3 = utils$1.bufferTob64Url;
    var utils_4 = utils$1.bufferTob64;
    var utils_5 = utils$1.b64UrlToBuffer;
    var utils_6 = utils$1.stringToB64Url;
    var utils_7 = utils$1.stringToBuffer;
    var utils_8 = utils$1.bufferToString;
    var utils_9 = utils$1.b64UrlToString;
    var utils_10 = utils$1.concatBuffers;

    var deepHash_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    async function deepHash(data) {
        if (Array.isArray(data)) {
            const tag = common.default.utils.concatBuffers([
                common.default.utils.stringToBuffer("list"),
                common.default.utils.stringToBuffer(data.length.toString())
            ]);
            return await deepHashChunks(data, await common.default.crypto.hash(tag, "SHA-384"));
        }
        const tag = common.default.utils.concatBuffers([
            common.default.utils.stringToBuffer("blob"),
            common.default.utils.stringToBuffer(data.byteLength.toString())
        ]);
        const taggedHash = common.default.utils.concatBuffers([
            await common.default.crypto.hash(tag, "SHA-384"),
            await common.default.crypto.hash(data, "SHA-384")
        ]);
        return await common.default.crypto.hash(taggedHash, "SHA-384");
    }
    exports.default = deepHash;
    async function deepHashChunks(chunks, acc) {
        if (chunks.length < 1) {
            return acc;
        }
        const hashPair = common.default.utils.concatBuffers([
            acc,
            await deepHash(chunks[0])
        ]);
        const newAcc = await common.default.crypto.hash(hashPair, "SHA-384");
        return await deepHashChunks(chunks.slice(1), newAcc);
    }

    });

    unwrapExports(deepHash_1);

    var merkle = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debug = exports.validatePath = exports.arrayCompare = exports.bufferToInt = exports.intToBuffer = exports.arrayFlatten = exports.generateProofs = exports.buildLayers = exports.generateTransactionChunks = exports.generateTree = exports.computeRootHash = exports.generateLeaves = exports.chunkData = exports.MIN_CHUNK_SIZE = exports.MAX_CHUNK_SIZE = void 0;
    /**
     * @see {@link https://github.com/ArweaveTeam/arweave/blob/fbc381e0e36efffa45d13f2faa6199d3766edaa2/apps/arweave/src/ar_merkle.erl}
     */



    exports.MAX_CHUNK_SIZE = 256 * 1024;
    exports.MIN_CHUNK_SIZE = 32 * 1024;
    const NOTE_SIZE = 32;
    const HASH_SIZE = 32;
    /**
     * Takes the input data and chunks it into (mostly) equal sized chunks.
     * The last chunk will be a bit smaller as it contains the remainder
     * from the chunking process.
     */
    async function chunkData(data) {
        let chunks = [];
        let rest = data;
        let cursor = 0;
        while (rest.byteLength >= exports.MAX_CHUNK_SIZE) {
            let chunkSize = exports.MAX_CHUNK_SIZE;
            // If the total bytes left will produce a chunk < MIN_CHUNK_SIZE,
            // then adjust the amount we put in this 2nd last chunk.
            let nextChunkSize = rest.byteLength - exports.MAX_CHUNK_SIZE;
            if (nextChunkSize > 0 && nextChunkSize < exports.MIN_CHUNK_SIZE) {
                chunkSize = Math.ceil(rest.byteLength / 2);
                // console.log(`Last chunk will be: ${nextChunkSize} which is below ${MIN_CHUNK_SIZE}, adjusting current to ${chunkSize} with ${rest.byteLength} left.`)
            }
            const chunk = rest.slice(0, chunkSize);
            const dataHash = await common.default.crypto.hash(chunk);
            cursor += chunk.byteLength;
            chunks.push({
                dataHash,
                minByteRange: cursor - chunk.byteLength,
                maxByteRange: cursor
            });
            rest = rest.slice(chunkSize);
        }
        chunks.push({
            dataHash: await common.default.crypto.hash(rest),
            minByteRange: cursor,
            maxByteRange: cursor + rest.byteLength
        });
        return chunks;
    }
    exports.chunkData = chunkData;
    async function generateLeaves(chunks) {
        return Promise.all(chunks.map(async ({ dataHash, minByteRange, maxByteRange }) => {
            return {
                type: "leaf",
                id: await hash(await Promise.all([hash(dataHash), hash(intToBuffer(maxByteRange))])),
                dataHash: dataHash,
                minByteRange,
                maxByteRange
            };
        }));
    }
    exports.generateLeaves = generateLeaves;
    /**
     * Builds an arweave merkle tree and gets the root hash for the given input.
     */
    async function computeRootHash(data) {
        const rootNode = await generateTree(data);
        return rootNode.id;
    }
    exports.computeRootHash = computeRootHash;
    async function generateTree(data) {
        const rootNode = await buildLayers(await generateLeaves(await chunkData(data)));
        return rootNode;
    }
    exports.generateTree = generateTree;
    /**
     * Generates the data_root, chunks & proofs
     * needed for a transaction.
     *
     * This also checks if the last chunk is a zero-length
     * chunk and discards that chunk and proof if so.
     * (we do not need to upload this zero length chunk)
     *
     * @param data
     */
    async function generateTransactionChunks(data) {
        const chunks = await chunkData(data);
        const leaves = await generateLeaves(chunks);
        const root = await buildLayers(leaves);
        const proofs = await generateProofs(root);
        // Discard the last chunk & proof if it's zero length.
        const lastChunk = chunks.slice(-1)[0];
        if (lastChunk.maxByteRange - lastChunk.minByteRange === 0) {
            chunks.splice(chunks.length - 1, 1);
            proofs.splice(proofs.length - 1, 1);
        }
        return {
            data_root: root.id,
            chunks,
            proofs
        };
    }
    exports.generateTransactionChunks = generateTransactionChunks;
    /**
     * Starting with the bottom layer of leaf nodes, hash every second pair
     * into a new branch node, push those branch nodes onto a new layer,
     * and then recurse, building up the tree to it's root, where the
     * layer only consists of two items.
     */
    async function buildLayers(nodes, level = 0) {
        // If there are only 2 nodes left, this is going to be the root node
        if (nodes.length < 2) {
            const root = await hashBranch(nodes[0], nodes[1]);
            // console.log("Root layer", root);
            return root;
        }
        const nextLayer = [];
        for (let i = 0; i < nodes.length; i += 2) {
            nextLayer.push(await hashBranch(nodes[i], nodes[i + 1]));
        }
        // console.log("Layer", nextLayer);
        return buildLayers(nextLayer, level + 1);
    }
    exports.buildLayers = buildLayers;
    /**
     * Recursively search through all branches of the tree,
     * and generate a proof for each leaf node.
     */
    function generateProofs(root) {
        const proofs = resolveBranchProofs(root);
        if (!Array.isArray(proofs)) {
            return [proofs];
        }
        return arrayFlatten(proofs);
    }
    exports.generateProofs = generateProofs;
    function resolveBranchProofs(node, proof = new Uint8Array(), depth = 0) {
        if (node.type == "leaf") {
            return {
                offset: node.maxByteRange - 1,
                proof: utils$1.concatBuffers([
                    proof,
                    node.dataHash,
                    intToBuffer(node.maxByteRange)
                ])
            };
        }
        if (node.type == "branch") {
            const partialProof = utils$1.concatBuffers([
                proof,
                node.leftChild.id,
                node.rightChild.id,
                intToBuffer(node.byteRange)
            ]);
            return [
                resolveBranchProofs(node.leftChild, partialProof, depth + 1),
                resolveBranchProofs(node.rightChild, partialProof, depth + 1)
            ];
        }
        throw new Error(`Unexpected node type`);
    }
    function arrayFlatten(input) {
        const flat = [];
        input.forEach(item => {
            if (Array.isArray(item)) {
                flat.push(...arrayFlatten(item));
            }
            else {
                flat.push(item);
            }
        });
        return flat;
    }
    exports.arrayFlatten = arrayFlatten;
    async function hashBranch(left, right) {
        if (!right) {
            return left;
        }
        let branch = {
            type: "branch",
            id: await hash([
                await hash(left.id),
                await hash(right.id),
                await hash(intToBuffer(left.maxByteRange))
            ]),
            byteRange: left.maxByteRange,
            maxByteRange: right.maxByteRange,
            leftChild: left,
            rightChild: right
        };
        return branch;
    }
    async function hash(data) {
        if (Array.isArray(data)) {
            data = common.default.utils.concatBuffers(data);
        }
        return new Uint8Array(await common.default.crypto.hash(data));
    }
    function intToBuffer(note) {
        const buffer = new Uint8Array(NOTE_SIZE);
        for (var i = buffer.length - 1; i >= 0; i--) {
            var byte = note % 256;
            buffer[i] = byte;
            note = (note - byte) / 256;
        }
        return buffer;
    }
    exports.intToBuffer = intToBuffer;
    function bufferToInt(buffer) {
        let value = 0;
        for (var i = 0; i < buffer.length; i++) {
            value *= 256;
            value += buffer[i];
        }
        return value;
    }
    exports.bufferToInt = bufferToInt;
    exports.arrayCompare = (a, b) => a.every((value, index) => b[index] === value);
    async function validatePath(id, dest, leftBound, rightBound, path) {
        if (rightBound <= 0) {
            return false;
        }
        if (dest >= rightBound) {
            return validatePath(id, 0, rightBound - 1, rightBound, path);
        }
        if (dest < 0) {
            return validatePath(id, 0, 0, rightBound, path);
        }
        if (path.length == HASH_SIZE + NOTE_SIZE) {
            const pathData = path.slice(0, HASH_SIZE);
            const endOffsetBuffer = path.slice(pathData.length, pathData.length + NOTE_SIZE);
            const pathDataHash = await hash([
                await hash(pathData),
                await hash(endOffsetBuffer)
            ]);
            let result = exports.arrayCompare(id, pathDataHash);
            if (result) {
                return {
                    offset: rightBound - 1,
                    leftBound: leftBound,
                    rightBound: rightBound,
                    chunkSize: rightBound - leftBound
                };
            }
            return false;
        }
        const left = path.slice(0, HASH_SIZE);
        const right = path.slice(left.length, left.length + HASH_SIZE);
        const offsetBuffer = path.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);
        const offset = bufferToInt(offsetBuffer);
        const remainder = path.slice(left.length + right.length + offsetBuffer.length);
        const pathHash = await hash([
            await hash(left),
            await hash(right),
            await hash(offsetBuffer)
        ]);
        if (exports.arrayCompare(id, pathHash)) {
            if (dest < offset) {
                return await validatePath(left, dest, leftBound, Math.min(rightBound, offset), remainder);
            }
            return await validatePath(right, dest, Math.max(leftBound, offset), rightBound, remainder);
        }
        return false;
    }
    exports.validatePath = validatePath;
    /**
     * Inspect an arweave chunk proof.
     * Takes proof, parses, reads and displays the values for console logging.
     * One proof section per line
     * Format: left,right,offset => hash
     */
    async function debug(proof, output = "") {
        if (proof.byteLength < 1) {
            return output;
        }
        const left = proof.slice(0, HASH_SIZE);
        const right = proof.slice(left.length, left.length + HASH_SIZE);
        const offsetBuffer = proof.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);
        const offset = bufferToInt(offsetBuffer);
        const remainder = proof.slice(left.length + right.length + offsetBuffer.length);
        const pathHash = await hash([
            await hash(left),
            await hash(right),
            await hash(offsetBuffer)
        ]);
        const updatedOutput = `${output}\n${util_1.inspect(Buffer.from(left))},${util_1.inspect(Buffer.from(right))},${offset} => ${util_1.inspect(pathHash)}`;
        return debug(remainder, updatedOutput);
    }
    exports.debug = debug;

    });

    unwrapExports(merkle);
    var merkle_1 = merkle.debug;
    var merkle_2 = merkle.validatePath;
    var merkle_3 = merkle.arrayCompare;
    var merkle_4 = merkle.bufferToInt;
    var merkle_5 = merkle.intToBuffer;
    var merkle_6 = merkle.arrayFlatten;
    var merkle_7 = merkle.generateProofs;
    var merkle_8 = merkle.buildLayers;
    var merkle_9 = merkle.generateTransactionChunks;
    var merkle_10 = merkle.generateTree;
    var merkle_11 = merkle.computeRootHash;
    var merkle_12 = merkle.generateLeaves;
    var merkle_13 = merkle.chunkData;
    var merkle_14 = merkle.MIN_CHUNK_SIZE;
    var merkle_15 = merkle.MAX_CHUNK_SIZE;

    var transaction = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tag = void 0;



    class BaseObject {
        get(field, options) {
            if (!Object.getOwnPropertyNames(this).includes(field)) {
                throw new Error(`Field "${field}" is not a property of the Arweave Transaction class.`);
            }
            // Handle fields that are Uint8Arrays.
            // To maintain compat we encode them to b64url
            // if decode option is not specificed.
            if (this[field] instanceof Uint8Array) {
                if (options && options.decode && options.string) {
                    return utils$1.bufferToString(this[field]);
                }
                if (options && options.decode && !options.string) {
                    return this[field];
                }
                return utils$1.bufferTob64Url(this[field]);
            }
            if (options && options.decode == true) {
                if (options && options.string) {
                    return utils$1.b64UrlToString(this[field]);
                }
                return utils$1.b64UrlToBuffer(this[field]);
            }
            return this[field];
        }
    }
    class Tag extends BaseObject {
        constructor(name, value, decode = false) {
            super();
            this.name = name;
            this.value = value;
        }
    }
    exports.Tag = Tag;
    class Transaction extends BaseObject {
        constructor(attributes = {}) {
            super();
            this.format = 2;
            this.id = "";
            this.last_tx = "";
            this.owner = "";
            this.tags = [];
            this.target = "";
            this.quantity = "0";
            this.data_size = "0";
            this.data = new Uint8Array();
            this.data_root = "";
            this.reward = "0";
            this.signature = "";
            Object.assign(this, attributes);
            // If something passes in a Tx that has been toJSON'ed and back,
            // or where the data was filled in from /tx/data endpoint.
            // data will be b64url encoded, so decode it.
            if (typeof this.data === "string") {
                this.data = utils$1.b64UrlToBuffer(this.data);
            }
            if (attributes.tags) {
                this.tags = attributes.tags.map((tag) => {
                    return new Tag(tag.name, tag.value);
                });
            }
        }
        addTag(name, value) {
            this.tags.push(new Tag(utils$1.stringToB64Url(name), utils$1.stringToB64Url(value)));
        }
        toJSON() {
            return {
                format: this.format,
                id: this.id,
                last_tx: this.last_tx,
                owner: this.owner,
                tags: this.tags,
                target: this.target,
                quantity: this.quantity,
                data: utils$1.bufferTob64Url(this.data),
                data_size: this.data_size,
                data_root: this.data_root,
                data_tree: this.data_tree,
                reward: this.reward,
                signature: this.signature
            };
        }
        setSignature({ signature, id }) {
            this.signature = signature;
            this.id = id;
        }
        async prepareChunks(data) {
            // Note: we *do not* use `this.data`, the caller may be
            // operating on a transaction with an zero length data field.
            // This function computes the chunks for the data passed in and
            // assigns the result to this transaction. It should not read the
            // data *from* this transaction.
            if (!this.chunks && data.byteLength > 0) {
                this.chunks = await merkle.generateTransactionChunks(data);
                this.data_root = utils$1.bufferTob64Url(this.chunks.data_root);
            }
            if (!this.chunks && data.byteLength === 0) {
                this.chunks = {
                    chunks: [],
                    data_root: new Uint8Array(),
                    proofs: []
                };
                this.data_root = "";
            }
        }
        // Returns a chunk in a format suitable for posting to /chunk.
        // Similar to `prepareChunks()` this does not operate `this.data`,
        // instead using the data passed in.
        getChunk(idx, data) {
            if (!this.chunks) {
                throw new Error(`Chunks have not been prepared`);
            }
            const proof = this.chunks.proofs[idx];
            const chunk = this.chunks.chunks[idx];
            return {
                data_root: this.data_root,
                data_size: this.data_size,
                data_path: utils$1.bufferTob64Url(proof.proof),
                offset: proof.offset.toString(),
                chunk: utils$1.bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))
            };
        }
        async getSignatureData() {
            switch (this.format) {
                case 1:
                    let tagString = this.tags.reduce((accumulator, tag) => {
                        return (accumulator +
                            tag.get("name", { decode: true, string: true }) +
                            tag.get("value", { decode: true, string: true }));
                    }, "");
                    return utils$1.concatBuffers([
                        this.get("owner", { decode: true, string: false }),
                        this.get("target", { decode: true, string: false }),
                        this.get("data", { decode: true, string: false }),
                        utils$1.stringToBuffer(this.quantity),
                        utils$1.stringToBuffer(this.reward),
                        this.get("last_tx", { decode: true, string: false }),
                        utils$1.stringToBuffer(tagString)
                    ]);
                case 2:
                    await this.prepareChunks(this.data);
                    const tagList = this.tags.map(tag => [
                        tag.get("name", { decode: true, string: false }),
                        tag.get("value", { decode: true, string: false })
                    ]);
                    return await deepHash_1.default([
                        utils$1.stringToBuffer(this.format.toString()),
                        this.get("owner", { decode: true, string: false }),
                        this.get("target", { decode: true, string: false }),
                        utils$1.stringToBuffer(this.quantity),
                        utils$1.stringToBuffer(this.reward),
                        this.get("last_tx", { decode: true, string: false }),
                        tagList,
                        utils$1.stringToBuffer(this.data_size),
                        this.get("data_root", { decode: true, string: false })
                    ]);
                default:
                    throw new Error(`Unexpected transaction format: ${this.format}`);
            }
        }
    }
    exports.default = Transaction;

    });

    unwrapExports(transaction);
    var transaction_1 = transaction.Tag;

    var transactionUploader = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionUploader = void 0;




    // Maximum amount of chunks we will upload in the body.
    const MAX_CHUNKS_IN_BODY = 1;
    // We assume these errors are intermitment and we can try again after a delay:
    // - not_joined
    // - timeout
    // - data_root_not_found (we may have hit a node that just hasn't seen it yet)
    // - exceeds_disk_pool_size_limit
    // We also try again after any kind of unexpected network errors
    // Errors from /chunk we should never try and continue on.
    const FATAL_CHUNK_UPLOAD_ERRORS = [
        "invalid_json",
        "chunk_too_big",
        "data_path_too_big",
        "offset_too_big",
        "data_size_too_big",
        "chunk_proof_ratio_not_attractive",
        "invalid_proof"
    ];
    // Amount we will delay on receiving an error response but do want to continue.
    const ERROR_DELAY = 1000 * 40;
    class TransactionUploader {
        constructor(api, transaction$1) {
            this.api = api;
            this.chunkIndex = 0;
            this.txPosted = false;
            this.lastRequestTimeEnd = 0;
            this.totalErrors = 0; // Not serialized.
            this.lastResponseStatus = 0;
            this.lastResponseError = "";
            if (!transaction$1.id) {
                throw new Error(`Transaction is not signed`);
            }
            if (!transaction$1.chunks) {
                throw new Error(`Transaction chunks not prepared`);
            }
            // Make a copy of transaction, zeroing the data so we can serialize.
            this.data = transaction$1.data;
            this.transaction = new transaction.default(Object.assign({}, transaction$1, { data: new Uint8Array(0) }));
        }
        get isComplete() {
            return (this.txPosted &&
                this.chunkIndex === this.transaction.chunks.chunks.length);
        }
        get totalChunks() {
            return this.transaction.chunks.chunks.length;
        }
        get uploadedChunks() {
            return this.chunkIndex;
        }
        get pctComplete() {
            return Math.trunc((this.uploadedChunks / this.totalChunks) * 100);
        }
        /**
         * Uploads the next part of the transaction.
         * On the first call this posts the transaction
         * itself and on any subsequent calls uploads the
         * next chunk until it completes.
         */
        async uploadChunk() {
            if (this.isComplete) {
                throw new Error(`Upload is already complete`);
            }
            if (this.lastResponseError !== "") {
                this.totalErrors++;
            }
            else {
                this.totalErrors = 0;
            }
            // We have been trying for about an hour receiving an
            // error every time, so eventually bail.
            if (this.totalErrors === 100) {
                throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);
            }
            let delay = this.lastResponseError === ""
                ? 0
                : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);
            if (delay > 0) {
                // Jitter delay bcoz networks, subtract up to 30% from 40 seconds
                delay = delay - delay * Math.random() * 0.3;
                await new Promise(res => setTimeout(res, delay));
            }
            this.lastResponseError = "";
            if (!this.txPosted) {
                await this.postTransaction();
                return;
            }
            const chunk = this.transaction.getChunk(this.chunkIndex, this.data);
            const chunkOk = await merkle.validatePath(this.transaction.chunks.data_root, parseInt(chunk.offset), 0, parseInt(chunk.data_size), utils$1.b64UrlToBuffer(chunk.data_path));
            if (!chunkOk) {
                throw new Error(`Unable to validate chunk ${this.chunkIndex}`);
            }
            // Catch network errors and turn them into objects with status -1 and an error message.
            const resp = await this.api
                .post(`chunk`, this.transaction.getChunk(this.chunkIndex, this.data))
                .catch(e => {
                console.error(e.message);
                return { status: -1, data: { error: e.message } };
            });
            this.lastRequestTimeEnd = Date.now();
            this.lastResponseStatus = resp.status;
            if (this.lastResponseStatus == 200) {
                this.chunkIndex++;
            }
            else {
                this.lastResponseError = error.getError(resp);
                if (FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError)) {
                    throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);
                }
            }
        }
        /**
         * Reconstructs an upload from its serialized state and data.
         * Checks if data matches the expected data_root.
         *
         * @param serialized
         * @param data
         */
        static async fromSerialized(api, serialized, data) {
            if (!serialized ||
                typeof serialized.chunkIndex !== "number" ||
                typeof serialized.transaction !== "object") {
                throw new Error(`Serialized object does not match expected format.`);
            }
            // Everything looks ok, reconstruct the TransactionUpload,
            // prepare the chunks again and verify the data_root matches
            const upload = new TransactionUploader(api, new transaction.default(serialized.transaction));
            // Copy the serialized upload information, and data passed in.
            upload.chunkIndex = serialized.chunkIndex;
            upload.lastRequestTimeEnd = serialized.lastRequestTimeEnd;
            upload.lastResponseError = serialized.lastResponseError;
            upload.lastResponseStatus = serialized.lastResponseStatus;
            upload.txPosted = serialized.txPosted;
            upload.data = data;
            await upload.transaction.prepareChunks(data);
            if (upload.transaction.data_root !== serialized.transaction.data_root) {
                throw new Error(`Data mismatch: Uploader doesn't match provided data.`);
            }
            return upload;
        }
        /**
         * Reconstruct an upload from the tx metadata, ie /tx/<id>.
         *
         * @param api
         * @param id
         * @param data
         */
        static async fromTransactionId(api, id) {
            const resp = await api.get(`tx/${id}`);
            if (resp.status !== 200) {
                throw new Error(`Tx ${id} not found: ${resp.status}`);
            }
            const transaction = resp.data;
            transaction.data = new Uint8Array(0);
            const serialized = {
                txPosted: true,
                chunkIndex: 0,
                lastResponseError: "",
                lastRequestTimeEnd: 0,
                lastResponseStatus: 0,
                transaction
            };
            return serialized;
        }
        toJSON() {
            return {
                chunkIndex: this.chunkIndex,
                transaction: this.transaction,
                lastRequestTimeEnd: this.lastRequestTimeEnd,
                lastResponseStatus: this.lastResponseStatus,
                lastResponseError: this.lastResponseError,
                txPosted: this.txPosted
            };
        }
        // POST to /tx
        async postTransaction() {
            const uploadInBody = this.totalChunks <= MAX_CHUNKS_IN_BODY;
            if (uploadInBody) {
                // Post the transaction with data.
                this.transaction.data = this.data;
                const resp = await this.api.post(`tx`, this.transaction).catch(e => {
                    console.error(e);
                    return { status: -1, data: { error: e.message } };
                });
                this.lastRequestTimeEnd = Date.now();
                this.lastResponseStatus = resp.status;
                this.transaction.data = new Uint8Array(0);
                if (resp.status >= 200 && resp.status < 300) {
                    // We are complete.
                    this.txPosted = true;
                    this.chunkIndex = MAX_CHUNKS_IN_BODY;
                    return;
                }
                this.lastResponseError = error.getError(resp);
                throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);
            }
            // Post the transaction with no data.
            const resp = await this.api.post(`tx`, this.transaction);
            this.lastRequestTimeEnd = Date.now();
            this.lastResponseStatus = resp.status;
            if (!(resp.status >= 200 && resp.status < 300)) {
                this.lastResponseError = error.getError(resp);
                throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);
            }
            this.txPosted = true;
        }
    }
    exports.TransactionUploader = TransactionUploader;

    });

    unwrapExports(transactionUploader);
    var transactionUploader_1 = transactionUploader.TransactionUploader;

    var transactions = createCommonjsModule(function (module, exports) {
    var __await = (commonjsGlobal && commonjsGlobal.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); };
    var __asyncGenerator = (commonjsGlobal && commonjsGlobal.__asyncGenerator) || function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };
    Object.defineProperty(exports, "__esModule", { value: true });




    class Transactions {
        constructor(api, crypto, chunks) {
            this.api = api;
            this.crypto = crypto;
            this.chunks = chunks;
        }
        getTransactionAnchor() {
            return this.api.get(`tx_anchor`).then(response => {
                return response.data;
            });
        }
        getPrice(byteSize, targetAddress) {
            let endpoint = targetAddress
                ? `price/${byteSize}/${targetAddress}`
                : `price/${byteSize}`;
            return this.api
                .get(endpoint, {
                transformResponse: [
                    /**
                     * We need to specify a response transformer to override
                     * the default JSON.parse behaviour, as this causes
                     * winston to be converted to a number and we want to
                     * return it as a winston string.
                     * @param data
                     */
                    function (data) {
                        return data;
                    }
                ]
            })
                .then(response => {
                return response.data;
            });
        }
        async get(id) {
            const response = await this.api.get(`tx/${id}`);
            if (response.status == 200) {
                const data_size = parseInt(response.data.data_size);
                if (response.data.format >= 2 &&
                    data_size > 0 &&
                    data_size <= 1024 * 1024 * 12) {
                    const data = await this.getData(id);
                    return new transaction.default(Object.assign(Object.assign({}, response.data), { data }));
                }
                return new transaction.default(Object.assign(Object.assign({}, response.data), { format: response.data.format || 1 }));
            }
            if (response.status == 202) {
                throw new error.default("TX_PENDING" /* TX_PENDING */);
            }
            if (response.status == 404) {
                throw new error.default("TX_NOT_FOUND" /* TX_NOT_FOUND */);
            }
            if (response.status == 410) {
                throw new error.default("TX_FAILED" /* TX_FAILED */);
            }
            throw new error.default("TX_INVALID" /* TX_INVALID */);
        }
        fromRaw(attributes) {
            return new transaction.default(attributes);
        }
        async search(tagName, tagValue) {
            return this.api
                .post(`arql`, {
                op: "equals",
                expr1: tagName,
                expr2: tagValue
            })
                .then(response => {
                if (!response.data) {
                    return [];
                }
                return response.data;
            });
        }
        getStatus(id) {
            return this.api.get(`tx/${id}/status`).then(response => {
                if (response.status == 200) {
                    return {
                        status: 200,
                        confirmed: response.data
                    };
                }
                return {
                    status: response.status,
                    confirmed: null
                };
            });
        }
        async getData(id, options) {
            // Attempt to download from /txid, fall back to downloading chunks.
            const resp = await this.api.get(`${id}`, { responseType: "arraybuffer" });
            let data = undefined;
            if (resp.status === 200) {
                data = new Uint8Array(resp.data);
            }
            if (resp.status === 400 && error.getError(resp) === "tx_data_too_big") {
                data = await this.chunks.downloadChunkedData(id);
            }
            // If we don't have data, throw an exception. Previously we
            // just returned an empty data object.
            if (!data) {
                if (resp.status == 202) {
                    throw new error.default("TX_PENDING" /* TX_PENDING */);
                }
                if (resp.status == 404) {
                    throw new error.default("TX_NOT_FOUND" /* TX_NOT_FOUND */);
                }
                if (resp.status == 410) {
                    throw new error.default("TX_FAILED" /* TX_FAILED */);
                }
                throw new Error(`Unable to get data: ${resp.status} - ${error.getError(resp)}`);
            }
            if (options && options.decode && !options.string) {
                return data;
            }
            if (options && options.decode && options.string) {
                return utils$1.bufferToString(data);
            }
            // Since decode wasn't requested, caller expects b64url encoded data.
            return utils$1.bufferTob64Url(data);
        }
        async sign(transaction, jwk) {
            let dataToSign = await transaction.getSignatureData();
            let rawSignature = await this.crypto.sign(jwk, dataToSign);
            let id = await this.crypto.hash(rawSignature);
            transaction.setSignature({
                signature: utils$1.bufferTob64Url(rawSignature),
                id: utils$1.bufferTob64Url(id)
            });
        }
        async verify(transaction) {
            const signaturePayload = await transaction.getSignatureData();
            /**
             * The transaction ID should be a SHA-256 hash of the raw signature bytes, so this needs
             * to be recalculated from the signature and checked against the transaction ID.
             */
            const rawSignature = transaction.get("signature", {
                decode: true,
                string: false
            });
            const expectedId = utils$1.bufferTob64Url(await this.crypto.hash(rawSignature));
            if (transaction.id !== expectedId) {
                throw new Error(`Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.`);
            }
            /**
             * Now verify the signature is valid and signed by the owner wallet (owner field = originating wallet public key).
             */
            return this.crypto.verify(transaction.owner, signaturePayload, rawSignature);
        }
        async post(transaction$1) {
            if (typeof transaction$1 === "string") {
                transaction$1 = new transaction.default(JSON.parse(transaction$1));
            }
            else if (typeof transaction$1.readInt32BE === "function") {
                transaction$1 = new transaction.default(JSON.parse(transaction$1.toString()));
            }
            else if (typeof transaction$1 === "object" &&
                !(transaction$1 instanceof transaction.default)) {
                transaction$1 = new transaction.default(transaction$1);
            }
            if (!(transaction$1 instanceof transaction.default)) {
                throw new Error(`Must be Transaction object`);
            }
            if (!transaction$1.chunks) {
                await transaction$1.prepareChunks(transaction$1.data);
            }
            const uploader = await this.getUploader(transaction$1);
            // Emulate existing error & return value behaviour.
            try {
                while (!uploader.isComplete) {
                    await uploader.uploadChunk();
                }
            }
            catch (e) {
                if (uploader.lastResponseStatus > 0) {
                    return {
                        status: uploader.lastResponseStatus,
                        statusText: uploader.lastResponseError,
                        data: {
                            error: uploader.lastResponseError
                        }
                    };
                }
                throw e;
            }
            return {
                status: 200,
                statusText: "OK",
                data: {}
            };
        }
        /**
         * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress
         * and the ability to resume.
         *
         * Usage example:
         *
         * ```
         * const uploader = arweave.transactions.getUploader(transaction);
         * while (!uploader.isComplete) {
         *   await uploader.uploadChunk();
         *   console.log(`${uploader.pctComplete}%`);
         * }
         * ```
         *
         * @param upload a Transaction object, a previously save progress object, or a transaction id.
         * @param data the data of the transaction. Required when resuming an upload.
         */
        async getUploader(upload, data) {
            let uploader;
            if (upload instanceof transaction.default) {
                uploader = new transactionUploader.TransactionUploader(this.api, upload);
            }
            else {
                if (data instanceof ArrayBuffer) {
                    data = new Uint8Array(data);
                }
                if (!data || !(data instanceof Uint8Array)) {
                    throw new Error(`Must provide data when resuming upload`);
                }
                if (typeof upload === "string") {
                    upload = await transactionUploader.TransactionUploader.fromTransactionId(this.api, upload);
                }
                // upload should be a serialized upload.
                uploader = await transactionUploader.TransactionUploader.fromSerialized(this.api, upload, data);
            }
            return uploader;
        }
        /**
         * Async generator version of uploader
         *
         * Usage example:
         *
         * ```
         * for await (const uploader of arweave.transactions.upload(tx)) {
         *  console.log(`${uploader.pctComplete}%`);
         * }
         * ```
         *
         * @param upload a Transaction object, a previously save uploader, or a transaction id.
         * @param data the data of the transaction. Required when resuming an upload.
         */
        upload(upload, data) {
            return __asyncGenerator(this, arguments, function* upload_1() {
                const uploader = yield __await(this.getUploader(upload, data));
                while (!uploader.isComplete) {
                    yield __await(uploader.uploadChunk());
                    yield yield __await(uploader);
                }
                return yield __await(uploader);
            });
        }
    }
    exports.default = Transactions;

    });

    unwrapExports(transactions);

    var wallets = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    class Wallets {
        constructor(api, crypto) {
            this.api = api;
            this.crypto = crypto;
        }
        /**
         * Get the wallet balance for the given address.
         *
         * @param {string} address - The arweave address to get the balance for.
         *
         * @returns {Promise<string>} - Promise which resolves with a winston string balance.
         */
        getBalance(address) {
            return this.api
                .get(`wallet/${address}/balance`, {
                transformResponse: [
                    /**
                     * We need to specify a response transformer to override
                     * the default JSON.parse behaviour, as this causes
                     * balances to be converted to a number and we want to
                     * return it as a winston string.
                     * @param data
                     */
                    function (data) {
                        return data;
                    }
                ]
            })
                .then(response => {
                return response.data;
            });
        }
        /**
         * Get the last transaction ID for the given wallet address.
         *
         * @param {string} address - The arweave address to get the balance for.
         *
         * @returns {Promise<string>} - Promise which resolves with a winston string balance.
         */
        getLastTransactionID(address) {
            return this.api.get(`wallet/${address}/last_tx`).then(response => {
                return response.data;
            });
        }
        generate() {
            return this.crypto.generateJWK();
        }
        async jwkToAddress(jwk) {
            return this.ownerToAddress(jwk.n);
        }
        async ownerToAddress(owner) {
            return utils$1.bufferTob64Url(await this.crypto.hash(utils$1.b64UrlToBuffer(owner)));
        }
    }
    exports.default = Wallets;

    });

    unwrapExports(wallets);

    var silo = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SiloResource = void 0;

    class Silo {
        constructor(api, crypto, transactions) {
            this.api = api;
            this.crypto = crypto;
            this.transactions = transactions;
        }
        async get(siloURI) {
            if (!siloURI) {
                throw new Error(`No Silo URI specified`);
            }
            const resource = await this.parseUri(siloURI);
            const ids = await this.transactions.search("Silo-Name", resource.getAccessKey());
            if (ids.length == 0) {
                throw new Error(`No data could be found for the Silo URI: ${siloURI}`);
            }
            const transaction = await this.transactions.get(ids[0]);
            if (!transaction) {
                throw new Error(`No data could be found for the Silo URI: ${siloURI}`);
            }
            const encrypted = transaction.get("data", { decode: true, string: false });
            return this.crypto.decrypt(encrypted, resource.getEncryptionKey());
        }
        async readTransactionData(transaction, siloURI) {
            if (!siloURI) {
                throw new Error(`No Silo URI specified`);
            }
            const resource = await this.parseUri(siloURI);
            const encrypted = transaction.get("data", { decode: true, string: false });
            return this.crypto.decrypt(encrypted, resource.getEncryptionKey());
        }
        async parseUri(siloURI) {
            const parsed = siloURI.match(/^([a-z0-9-_]+)\.([0-9]+)/i);
            if (!parsed) {
                throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);
            }
            const siloName = parsed[1];
            const hashIterations = Math.pow(2, parseInt(parsed[2]));
            const digest = await this.hash(utils$1.stringToBuffer(siloName), hashIterations);
            const accessKey = utils$1.bufferTob64(digest.slice(0, 15));
            const encryptionkey = await this.hash(digest.slice(16, 31), 1);
            return new SiloResource(siloURI, accessKey, encryptionkey);
        }
        async hash(input, iterations) {
            let digest = await this.crypto.hash(input);
            for (let count = 0; count < iterations - 1; count++) {
                digest = await this.crypto.hash(digest);
            }
            return digest;
        }
    }
    exports.default = Silo;
    class SiloResource {
        constructor(uri, accessKey, encryptionKey) {
            this.uri = uri;
            this.accessKey = accessKey;
            this.encryptionKey = encryptionKey;
        }
        getUri() {
            return this.uri;
        }
        getAccessKey() {
            return this.accessKey;
        }
        getEncryptionKey() {
            return this.encryptionKey;
        }
    }
    exports.SiloResource = SiloResource;

    });

    unwrapExports(silo);
    var silo_1 = silo.SiloResource;

    var chunks = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });


    class Chunks {
        constructor(api) {
            this.api = api;
        }
        async getTransactionOffset(id) {
            const resp = await this.api.get(`tx/${id}/offset`);
            if (resp.status === 200) {
                return resp.data;
            }
            throw new Error(`Unable to get transaction offset: ${error.getError(resp)}`);
        }
        async getChunk(offset) {
            const resp = await this.api.get(`chunk/${offset}`);
            if (resp.status === 200) {
                return resp.data;
            }
            throw new Error(`Unable to get chunk: ${error.getError(resp)}`);
        }
        async getChunkData(offset) {
            const chunk = await this.getChunk(offset);
            const buf = utils$1.b64UrlToBuffer(chunk.chunk);
            return buf;
        }
        firstChunkOffset(offsetResponse) {
            return parseInt(offsetResponse.offset) - parseInt(offsetResponse.size) + 1;
        }
        async downloadChunkedData(id) {
            const offsetResponse = await this.getTransactionOffset(id);
            const size = parseInt(offsetResponse.size);
            const endOffset = parseInt(offsetResponse.offset);
            const startOffset = endOffset - size + 1;
            const data = new Uint8Array(size);
            let byte = 0;
            while (startOffset + byte < endOffset) {
                const chunkData = await this.getChunkData(startOffset + byte);
                data.set(chunkData, byte);
                byte += chunkData.length;
            }
            return data;
        }
    }
    exports.default = Chunks;

    });

    unwrapExports(chunks);

    var common = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });









    class Arweave {
        constructor(apiConfig) {
            this.api = new api.default(apiConfig);
            this.wallets = new wallets.default(this.api, Arweave.crypto);
            this.chunks = new chunks.default(this.api);
            this.transactions = new transactions.default(this.api, Arweave.crypto, this.chunks);
            this.silo = new silo.default(this.api, this.crypto, this.transactions);
            this.network = new network.default(this.api);
            this.ar = new ar.default();
        }
        /** @deprecated */
        get crypto() {
            return Arweave.crypto;
        }
        /** @deprecated */
        get utils() {
            return Arweave.utils;
        }
        getConfig() {
            return {
                api: this.api.getConfig(),
                crypto: null
            };
        }
        async createTransaction(attributes, jwk) {
            const from = await this.wallets.jwkToAddress(jwk);
            const transaction$1 = {};
            Object.assign(transaction$1, attributes);
            if (!attributes.data && !(attributes.target && attributes.quantity)) {
                throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);
            }
            if (attributes.owner == undefined) {
                transaction$1.owner = jwk.n;
            }
            if (attributes.last_tx == undefined) {
                transaction$1.last_tx = await this.transactions.getTransactionAnchor();
            }
            if (typeof attributes.data === "string") {
                attributes.data = utils$1.stringToBuffer(attributes.data);
            }
            if (attributes.data instanceof ArrayBuffer) {
                attributes.data = new Uint8Array(attributes.data);
            }
            if (attributes.data && !(attributes.data instanceof Uint8Array)) {
                throw new Error("Expected data to be a string, Uint8Array or ArrayBuffer");
            }
            if (attributes.reward == undefined) {
                const length = attributes.data ? attributes.data.byteLength : 0;
                transaction$1.reward = await this.transactions.getPrice(length, transaction$1.target);
            }
            transaction$1.data_root = "";
            transaction$1.data_size = attributes.data
                ? attributes.data.byteLength.toString()
                : "0";
            transaction$1.data = attributes.data || new Uint8Array(0);
            return new transaction.default(transaction$1);
        }
        async createSiloTransaction(attributes, jwk, siloUri) {
            const from = await this.wallets.jwkToAddress(jwk);
            const transaction$1 = {};
            Object.assign(transaction$1, attributes);
            if (!attributes.data) {
                throw new Error(`Silo transactions must have a 'data' value`);
            }
            if (!siloUri) {
                throw new Error(`No Silo URI specified.`);
            }
            if (attributes.target || attributes.quantity) {
                throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);
            }
            if (attributes.owner == undefined) {
                transaction$1.owner = jwk.n;
            }
            if (attributes.last_tx == undefined) {
                transaction$1.last_tx = await this.transactions.getTransactionAnchor();
            }
            const siloResource = await this.silo.parseUri(siloUri);
            if (typeof attributes.data == "string") {
                const encrypted = await this.crypto.encrypt(utils$1.stringToBuffer(attributes.data), siloResource.getEncryptionKey());
                transaction$1.reward = await this.transactions.getPrice(encrypted.byteLength);
                transaction$1.data = utils$1.bufferTob64Url(encrypted);
            }
            if (attributes.data instanceof Uint8Array) {
                const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());
                transaction$1.reward = await this.transactions.getPrice(encrypted.byteLength);
                transaction$1.data = utils$1.bufferTob64Url(encrypted);
            }
            const siloTransaction = new transaction.default(transaction$1);
            siloTransaction.addTag("Silo-Name", siloResource.getAccessKey());
            siloTransaction.addTag("Silo-Version", `0.1.0`);
            return siloTransaction;
        }
        arql(query) {
            return this.api.post("/arql", query).then(response => response.data || []);
        }
    }
    exports.default = Arweave;
    Arweave.utils = utils$1;

    });

    unwrapExports(common);

    var webcryptoDriver = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    class WebCryptoDriver {
        constructor() {
            this.keyLength = 4096;
            this.publicExponent = 0x10001;
            this.hashAlgorithm = "sha256";
            if (!this.detectWebCrypto()) {
                throw new Error("SubtleCrypto not available!");
            }
            this.driver = window.crypto.subtle;
        }
        async generateJWK() {
            let cryptoKey = await this.driver.generateKey({
                name: "RSA-PSS",
                modulusLength: 4096,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                hash: {
                    name: "SHA-256"
                }
            }, true, ["sign"]);
            let jwk = await this.driver.exportKey("jwk", cryptoKey.privateKey);
            return {
                kty: jwk.kty,
                e: jwk.e,
                n: jwk.n,
                d: jwk.d,
                p: jwk.p,
                q: jwk.q,
                dp: jwk.dp,
                dq: jwk.dq,
                qi: jwk.qi
            };
        }
        async sign(jwk, data) {
            let signature = await this.driver.sign({
                name: "RSA-PSS",
                saltLength: 0
            }, await this.jwkToCryptoKey(jwk), data);
            return new Uint8Array(signature);
        }
        async hash(data, algorithm = "SHA-256") {
            let digest = await this.driver.digest(algorithm, data);
            return new Uint8Array(digest);
        }
        async verify(publicModulus, data, signature) {
            const publicKey = {
                kty: "RSA",
                e: "AQAB",
                n: publicModulus
            };
            const key = await this.jwkToPublicCryptoKey(publicKey);
            return this.driver.verify({
                name: "RSA-PSS",
                saltLength: 0
            }, key, signature, data);
        }
        async jwkToCryptoKey(jwk) {
            return this.driver.importKey("jwk", jwk, {
                name: "RSA-PSS",
                hash: {
                    name: "SHA-256"
                }
            }, false, ["sign"]);
        }
        async jwkToPublicCryptoKey(publicJwk) {
            return this.driver.importKey("jwk", publicJwk, {
                name: "RSA-PSS",
                hash: {
                    name: "SHA-256"
                }
            }, false, ["verify"]);
        }
        detectWebCrypto() {
            if (!window || !window.crypto || !window.crypto.subtle) {
                return false;
            }
            let subtle = window.crypto.subtle;
            if (typeof subtle.generateKey != "function") {
                return false;
            }
            if (typeof subtle.importKey != "function") {
                return false;
            }
            if (typeof subtle.exportKey != "function") {
                return false;
            }
            if (typeof subtle.digest != "function") {
                return false;
            }
            if (typeof subtle.sign != "function") {
                return false;
            }
            return true;
        }
        async encrypt(data, key) {
            const initialKey = await this.driver.importKey("raw", typeof key == "string" ? utils$1.stringToBuffer(key) : key, {
                name: "PBKDF2",
                length: 32
            }, false, ["deriveKey"]);
            const salt = utils$1.stringToBuffer("salt");
            const derivedkey = await this.driver.deriveKey({
                name: "PBKDF2",
                salt: salt,
                iterations: 100000,
                hash: "SHA-256"
            }, initialKey, {
                name: "AES-CBC",
                length: 256
            }, false, ["encrypt", "decrypt"]);
            const iv = new Uint8Array(16);
            crypto.getRandomValues(iv);
            const encryptedData = await this.driver.encrypt({
                name: "AES-CBC",
                iv: iv
            }, derivedkey, data);
            return utils$1.concatBuffers([iv, encryptedData]);
        }
        async decrypt(encrypted, key) {
            const initialKey = await this.driver.importKey("raw", typeof key == "string" ? utils$1.stringToBuffer(key) : key, {
                name: "PBKDF2",
                length: 32
            }, false, ["deriveKey"]);
            const salt = utils$1.stringToBuffer("salt");
            const derivedkey = await this.driver.deriveKey({
                name: "PBKDF2",
                salt: salt,
                iterations: 100000,
                hash: "SHA-256"
            }, initialKey, {
                name: "AES-CBC",
                length: 256
            }, false, ["encrypt", "decrypt"]);
            const iv = encrypted.slice(0, 16);
            const data = await this.driver.decrypt({
                name: "AES-CBC",
                iv: iv
            }, derivedkey, encrypted.slice(16));
            // We're just using concat to convert from an array buffer to uint8array
            return utils$1.concatBuffers([data]);
        }
    }
    exports.default = WebCryptoDriver;

    });

    unwrapExports(webcryptoDriver);

    var web = createCommonjsModule(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });


    common.default.crypto = new webcryptoDriver.default();
    common.default.init = function (apiConfig = {}) {
        function getDefaultConfig() {
            const defaults = {
                host: "arweave.net",
                port: 443,
                protocol: "https"
            };
            if (!window ||
                !window.location ||
                !window.location.protocol ||
                !window.location.hostname) {
                return defaults;
            }
            // window.location.protocol has a trailing colon (http:, https:, file: etc)
            const currentProtocol = window.location.protocol.replace(":", "");
            const currentHost = window.location.hostname;
            const currentPort = window.location.port
                ? parseInt(window.location.port)
                : currentProtocol == "https"
                    ? 443
                    : 80;
            const isLocal = ["localhost", "127.0.0.1"].includes(currentHost) ||
                currentProtocol == "file";
            // If we're running in what looks like a local dev environment
            // then default to using arweave.net
            if (isLocal) {
                return defaults;
            }
            return {
                host: currentHost,
                port: currentPort,
                protocol: currentProtocol
            };
        }
        const defaultConfig = getDefaultConfig();
        const protocol = apiConfig.protocol || defaultConfig.protocol;
        const host = apiConfig.host || defaultConfig.host;
        const port = apiConfig.port || defaultConfig.port;
        return new common.default(Object.assign(Object.assign({}, apiConfig), { host,
            protocol,
            port }));
    };
    window.Arweave = common.default;
    __exportStar(common, exports);
    exports.default = common.default;

    });

    var Arweave = unwrapExports(web);

    const arweave = Arweave.init();
    const txTags = tx => {
      let tags = {};
      tx.get('tags').forEach(tag => {
        const key = tag.get('name', {decode: true, string: true});
        tags[key] = tag.get('value', {decode: true, string: true});
      });
      return tags;
    };
    const txOwner = async tx => {
      return await arweave.wallets.ownerToAddress(tx.owner);
    };
    const txData = async tx => {
      return tx.get('data', {decode: true, string: true});
    };

    const loginUser = async event => {
      return new Promise((resolve, reject) => {
        const input = event.target;
        const file = input.files[0];
        const reader = new FileReader();
        reader.onload = async () => {
          try {
            const data = reader.result;
            const wallet = JSON.parse(data);
            arweave.wallets.jwkToAddress(wallet).then(address => resolve({wallet, address}));
          } catch(error) {
            alert(error.toString());
            reject(error);
          }
        };
        reader.readAsText(file);
      });
    };

    /* src/Header.svelte generated by Svelte v3.24.1 */
    const file = "src/Header.svelte";

    // (40:10) {:else}
    function create_else_block_3(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "d", "M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1\n              1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z");
    			add_location(path, file, 40, 12, 1417);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(40:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (32:10) {#if isOpen == true}
    function create_if_block_3(ctx) {
    	let path;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "fill-rule", "evenodd");
    			attr_dev(path, "clip-rule", "evenodd");
    			attr_dev(path, "d", "M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1\n              1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1\n              1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828\n              4.829 4.828 4.828z");
    			add_location(path, file, 32, 12, 1048);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(32:10) {#if isOpen == true}",
    		ctx
    	});

    	return block;
    }

    // (122:2) {:else}
    function create_else_block_1(ctx) {
    	let nav;
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let t0;
    	let input;
    	let t1;
    	let div3;
    	let div2;

    	function select_block_type_3(ctx, dirty) {
    		if (/*isLoggedIn*/ ctx[0]) return create_if_block_2;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type_3(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			if_block.c();
    			attr_dev(path, "d", "M16.32 14.9l1.1 1.1c.4-.02.83.13 1.14.44l3 3a1.5 1.5 0 0 1-2.12\n              2.12l-3-3a1.5 1.5 0 0 1-.44-1.14l-1.1-1.1a8 8 0 1 1\n              1.41-1.41l.01-.01zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z");
    			add_location(path, file, 130, 12, 4601);
    			attr_dev(svg, "class", "h-6 w-6 fill-current text-gray-600");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file, 125, 10, 4425);
    			attr_dev(div0, "class", "absolute inset-y-0 left-0 flex items-center pl-3");
    			add_location(div0, file, 124, 8, 4352);
    			attr_dev(input, "class", "block w-full border border-transparent bg-gray-200\n          focus:outline-none focus:bg-white focus:border-gray-300 text-gray-900\n          rounded-lg pl-10 pr-4 py-2");
    			attr_dev(input, "placeholder", "Search by keywords");
    			add_location(input, file, 136, 8, 4868);
    			attr_dev(div1, "class", "hidden");
    			add_location(div1, file, 123, 6, 4323);
    			attr_dev(div2, "class", "px-2 pt-2 pb-5 border-b border-gray-800 sm:flex sm:border-b-0\n          sm:py-0 sm:px-0");
    			add_location(div2, file, 143, 8, 5172);
    			attr_dev(div3, "class", "sm:flex sm:items-center");
    			add_location(div3, file, 142, 6, 5126);
    			attr_dev(nav, "class", "block sm:flex sm:items-center sm:px-4");
    			add_location(nav, file, 122, 4, 4265);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div1);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, input);
    			append_dev(nav, t1);
    			append_dev(nav, div3);
    			append_dev(div3, div2);
    			if_block.m(div2, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(122:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (50:2) {#if isOpen == false}
    function create_if_block(ctx) {
    	let nav;
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let t0;
    	let input;
    	let t1;
    	let div3;
    	let div2;

    	function select_block_type_2(ctx, dirty) {
    		if (/*isLoggedIn*/ ctx[0]) return create_if_block_1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			if_block.c();
    			attr_dev(path, "d", "M16.32 14.9l1.1 1.1c.4-.02.83.13 1.14.44l3 3a1.5 1.5 0 0 1-2.12\n              2.12l-3-3a1.5 1.5 0 0 1-.44-1.14l-1.1-1.1a8 8 0 1 1\n              1.41-1.41l.01-.01zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z");
    			add_location(path, file, 58, 12, 2039);
    			attr_dev(svg, "class", "h-6 w-6 fill-current text-gray-600");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file, 53, 10, 1863);
    			attr_dev(div0, "class", "absolute inset-y-0 left-0 flex items-center pl-3");
    			add_location(div0, file, 52, 8, 1790);
    			attr_dev(input, "class", "block w-full border border-transparent bg-gray-200\n          focus:outline-none focus:bg-white focus:border-gray-300 text-gray-900\n          rounded-lg pl-10 pr-4 py-2");
    			attr_dev(input, "placeholder", "Search for topics");
    			add_location(input, file, 64, 8, 2306);
    			attr_dev(div1, "class", "hidden");
    			add_location(div1, file, 51, 6, 1761);
    			attr_dev(div2, "class", "px-2 pt-2 pb-5 border-b border-gray-800 sm:flex sm:border-b-0\n          sm:py-0 sm:px-0");
    			add_location(div2, file, 71, 8, 2609);
    			attr_dev(div3, "class", "sm:flex sm:items-center");
    			add_location(div3, file, 70, 6, 2563);
    			attr_dev(nav, "class", "hidden sm:flex sm:items-center sm:px-4");
    			add_location(nav, file, 50, 4, 1702);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div1);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, input);
    			append_dev(nav, t1);
    			append_dev(nav, div3);
    			append_dev(div3, div2);
    			if_block.m(div2, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(50:2) {#if isOpen == false}",
    		ctx
    	});

    	return block;
    }

    // (170:10) {:else}
    function create_else_block_2(ctx) {
    	let a;
    	let t1;
    	let div;
    	let label;
    	let t2;
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "Syllabi";
    			t1 = space();
    			div = element("div");
    			label = element("label");
    			t2 = text("Login\n                ");
    			input = element("input");
    			attr_dev(a, "href", "#/home");
    			attr_dev(a, "class", "block px-3 py-1 rounded font-semibold text-white\n              hover:bg-gray-700 sm:text-sm sm:px-2");
    			add_location(a, file, 170, 12, 6119);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "accept", "application/json");
    			attr_dev(input, "class", "hidden");
    			add_location(input, file, 181, 16, 6537);
    			attr_dev(label, "class", "mt-1 block px-3 py-1 rounded font-semibold text-white\n                hover:bg-gray-700 sm:mt-0 sm:text-sm sm:px-2 sm:ml-2");
    			add_location(label, file, 177, 14, 6344);
    			add_location(div, file, 176, 12, 6324);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t2);
    			append_dev(label, input);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*login*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(170:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (147:10) {#if isLoggedIn}
    function create_if_block_2(ctx) {
    	let a0;
    	let t1;
    	let a1;
    	let t3;
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a0 = element("a");
    			a0.textContent = "Syllabi";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "Create a New Syllabus";
    			t3 = space();
    			div = element("div");
    			button = element("button");
    			button.textContent = "Logout";
    			attr_dev(a0, "href", "#/home");
    			attr_dev(a0, "class", "block px-3 py-1 rounded font-semibold text-white\n              hover:bg-gray-700 sm:text-sm sm:px-2");
    			add_location(a0, file, 147, 12, 5323);
    			attr_dev(a1, "href", "#/editor");
    			attr_dev(a1, "class", "block px-3 py-1 rounded font-semibold text-white\n              hover:bg-gray-700 sm:text-sm sm:px-2");
    			add_location(a1, file, 153, 12, 5528);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Menu");
    			attr_dev(button, "class", "mt-1 block px-3 py-1 rounded font-semibold text-white\n                hover:bg-gray-700 sm:mt-0 sm:text-sm sm:px-2 sm:ml-2");
    			add_location(button, file, 160, 14, 5769);
    			add_location(div, file, 159, 12, 5749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*logout*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(147:10) {#if isLoggedIn}",
    		ctx
    	});

    	return block;
    }

    // (98:10) {:else}
    function create_else_block(ctx) {
    	let a;
    	let t1;
    	let div;
    	let label;
    	let span;
    	let t3;
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a = element("a");
    			a.textContent = "Syllabi";
    			t1 = space();
    			div = element("div");
    			label = element("label");
    			span = element("span");
    			span.textContent = "Login";
    			t3 = space();
    			input = element("input");
    			attr_dev(a, "href", "#/home");
    			attr_dev(a, "class", "block px-3 py-1 rounded font-semibold text-white\n              hover:bg-gray-700 sm:text-sm sm:px-2");
    			add_location(a, file, 98, 12, 3556);
    			attr_dev(span, "class", "px-2");
    			add_location(span, file, 108, 16, 3952);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "accept", "application/json");
    			attr_dev(input, "class", "hidden");
    			add_location(input, file, 110, 16, 4001);
    			attr_dev(label, "class", "mt-1 block px-3 py-1 rounded font-semibold text-white\n                hover:bg-gray-700 sm:mt-0 sm:text-sm sm:px-2 sm:ml-2");
    			add_location(label, file, 105, 14, 3781);
    			add_location(div, file, 104, 12, 3761);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, span);
    			append_dev(label, t3);
    			append_dev(label, input);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*login*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(98:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (75:10) {#if isLoggedIn}
    function create_if_block_1(ctx) {
    	let a0;
    	let t1;
    	let a1;
    	let t3;
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			a0 = element("a");
    			a0.textContent = "Syllabi";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "Create a New Syllabus";
    			t3 = space();
    			div = element("div");
    			button = element("button");
    			button.textContent = "Logout";
    			attr_dev(a0, "href", "#/home");
    			attr_dev(a0, "class", "block px-3 py-1 rounded font-semibold text-white\n              hover:bg-gray-700 sm:text-sm sm:px-2");
    			add_location(a0, file, 75, 12, 2760);
    			attr_dev(a1, "href", "#/editor");
    			attr_dev(a1, "class", "block px-3 py-1 rounded font-semibold text-white\n              hover:bg-gray-700 sm:text-sm sm:px-2");
    			add_location(a1, file, 81, 12, 2965);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Menu");
    			attr_dev(button, "class", "mt-1 block px-3 py-1 rounded font-semibold text-white\n                hover:bg-gray-700 sm:mt-0 sm:text-sm sm:px-2 sm:ml-2");
    			add_location(button, file, 88, 14, 3206);
    			add_location(div, file, 87, 12, 3186);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*logout*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(75:10) {#if isLoggedIn}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let header;
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let button;
    	let svg;
    	let t2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*isOpen*/ ctx[1] == true) return create_if_block_3;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*isOpen*/ ctx[1] == false) return create_if_block;
    		return create_else_block_1;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			header = element("header");
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "SyllabusWeave";
    			t1 = space();
    			div1 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			if_block0.c();
    			t2 = space();
    			if_block1.c();
    			attr_dev(div0, "class", "text-2xl text-blue-600 font-extrabold");
    			add_location(div0, file, 19, 4, 583);
    			attr_dev(svg, "class", "h-6 w-6 fill-current");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file, 27, 8, 885);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Menu");
    			attr_dev(button, "class", "px-2 text-gray-500 hover:text-white focus:outline-none\n        focus:text-white");
    			add_location(button, file, 21, 6, 693);
    			attr_dev(div1, "class", "flex sm:hidden");
    			add_location(div1, file, 20, 4, 658);
    			attr_dev(div2, "class", "flex justify-between px-4 py-3");
    			add_location(div2, file, 18, 2, 534);
    			attr_dev(header, "class", "bg-gray-900 sm:flex sm:items-center sm:justify-between");
    			add_location(header, file, 17, 0, 460);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			append_dev(button, svg);
    			if_block0.m(svg, null);
    			append_dev(header, t2);
    			if_block1.m(header, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClick*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(svg, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(header, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if_block0.d();
    			if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { isLoggedIn } = $$props;
    	let isOpen = false;
    	const dispatch = createEventDispatcher();
    	const login = event => loginUser(event).then(data => dispatch("auth", data));

    	const logout = () => {
    		dispatch("auth", { wallet: null, address: null });
    		window.location.href = "#";
    	};

    	function handleClick() {
    		$$invalidate(1, isOpen = !isOpen);
    	}

    	const writable_props = ["isLoggedIn"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Header", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("isLoggedIn" in $$props) $$invalidate(0, isLoggedIn = $$props.isLoggedIn);
    	};

    	$$self.$capture_state = () => ({
    		loginUser,
    		createEventDispatcher,
    		isLoggedIn,
    		isOpen,
    		dispatch,
    		login,
    		logout,
    		handleClick
    	});

    	$$self.$inject_state = $$props => {
    		if ("isLoggedIn" in $$props) $$invalidate(0, isLoggedIn = $$props.isLoggedIn);
    		if ("isOpen" in $$props) $$invalidate(1, isOpen = $$props.isOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [isLoggedIn, isOpen, login, logout, handleClick];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { isLoggedIn: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*isLoggedIn*/ ctx[0] === undefined && !("isLoggedIn" in props)) {
    			console.warn("<Header> was created without expected prop 'isLoggedIn'");
    		}
    	}

    	get isLoggedIn() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isLoggedIn(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    function createSearchStore() {
      const { subscribe, set } = writable('');
      return {
        subscribe,
        apply: (term) => set(term)
      };
    }
    function createSubjectsStore() {
      const { subscribe, set } = writable('All');
      return {
        subscribe,
        apply: (filter) => set(filter)
      };
    }
    function createLanguagesStore() {
      const { subscribe, set } = writable('All');
      return {
        subscribe,
        apply: (filter) => set(filter)
      };
    }
    function createBadgesStore() {
      const { subscribe, set } = writable('All');
      return {
        subscribe,
        apply: (filter) => set(filter)
      };
    }
    function createMentorsStore() {
      const { subscribe, set } = writable('All');
      return {
        subscribe,
        apply: (filter) => set(filter),
      }
    }
    const subjectsStore = createSubjectsStore();
    const languagesStore = createLanguagesStore();
    const badgesStore = createBadgesStore();
    const mentorsStore = createMentorsStore();
    const searchStore = createSearchStore();
    const syllabiStore = writable([]);
    const syllabiByMentorStore = writable([]);

    let selectSubjects = [ 
      "All", 
      "Arts", 
      "Business", 
      "Computer Science", 
      "Data Science", 
      "IT & Engineering", 
      "Health", 
      "Language", 
      "Math & Logic", 
      "Personal Development", 
      "Physics", 
      "Social Sciences"
    ];
    let selectLanguages = [
      "All",
      "English",
      "Arabic",
      "Bengali",
      "Chinese",
      "French",
      "German",
      "Hindi",
      "Indonesian",
      "Italian",
      "Japanese",
      "Korean",
      "Portuguese",
      "Russian",
      "Spanish",
    ];
    let selectBadges = [
      "All",
      "Bestseller",
      "Featured",
      "New",
      "Popular",
      "Updated",
    ];
    let selectMentors = [
      "All",
      "Available",
      "Not Available",
    ];
    let editSubjects = [
      { id: 1, text: "Arts" },
      { id: 2, text: "Business" },
      { id: 3, text: "Computer Science" },
      { id: 4, text: "Data Science" },
      { id: 5, text: "IT & Engineering" },
      { id: 6, text: "Health" },
      { id: 7, text: "Language" },
      { id: 8, text: "Math & Logic" },
      { id: 9, text: "Personal Development" },
      { id: 10, text: "Physics" },
      { id: 11, text: "Social Sciences" },
    ];
    let editLanguages = [
      { id: 1, text: "English" },
      { id: 2, text: "Arabic" },
      { id: 3, text: "Bengali" },
      { id: 4, text: "Chinese" },
      { id: 5, text: "French" },
      { id: 6, text: "German" },
      { id: 7, text: "Hindi" },
      { id: 8, text: "Indonesian" },
      { id: 9, text: "Italian" },
      { id: 10, text: "Japanese" },
      { id: 11, text: "Korean" },
      { id: 12, text: "Portuguese" },
      { id: 13, text: "Russian" },
      { id: 14, text: "Spanish" },
    ];
    let editBadges = [
      { id: 1, text: "New" },
      { id: 2, text: "Featured" },
    ];
    let editDurations = [
      { id: 1, text: "5 minutes" },
      { id: 2, text: "15 minutes" },
      { id: 3, text: "30 minutes" },
      { id: 4, text: "45 minutes" },
      { id: 5, text: "1 hour" },
      { id: 6, text: "1.5 hours" },
      { id: 7, text: "2 hours" },
      { id: 8, text: "2.5 hours" },
      { id: 9, text: "3 hours" },
      { id: 10, text: "3.5 hours" },
      { id: 11, text: "4 hours" },
      { id: 12, text: "4.5 hours" },
      { id: 13, text: "+5 hours" },
    ];
    let editMentors = [
      { id: 1, text: "Available" },
      { id: 2, text: "Not Available" },
    ];
    let editPrices = [
      { id: 1, text: "2.49" },
      { id: 2, text: "4.99" },
      { id: 3, text: "9.99" },
    ];

    /* src/SearchFilters.svelte generated by Svelte v3.24.1 */
    const file$1 = "src/SearchFilters.svelte";

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[35] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[38] = list[i];
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[41] = list[i];
    	return child_ctx;
    }

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[35] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[38] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[41] = list[i];
    	return child_ctx;
    }

    // (100:4) {:else}
    function create_else_block_1$1(ctx) {
    	let button;
    	let svg;
    	let path;
    	let t0;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			span = element("span");
    			span.textContent = "Filters";
    			attr_dev(path, "d", "M3 6a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1zm3 6a1 1 0 0\n            1 1-1h10a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm4 5a1 1 0 1 0 0 2h4a1 1 0 1\n            0 0-2h-4z");
    			add_location(path, file$1, 111, 10, 3537);
    			attr_dev(svg, "class", "h-6 w-6 fill-current text-gray-500");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$1, 107, 8, 3393);
    			attr_dev(span, "class", "ml-1 text-white font-medium");
    			add_location(span, file$1, 116, 8, 3752);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Filters");
    			attr_dev(button, "class", "ml-4 inline-flex items-center hover:bg-gray-600\n        focus:outline-none focus:shadow-outline rounded-lg shadow pl-3 pr-4\n        bg-gray-700");
    			add_location(button, file$1, 100, 6, 3134);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			append_dev(button, t0);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClick*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(100:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (81:4) {#if isOpen == true}
    function create_if_block_1$1(ctx) {
    	let button;
    	let svg;
    	let path;
    	let t0;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			span = element("span");
    			span.textContent = "Filters";
    			attr_dev(path, "d", "M3 6a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1zm3 6a1 1 0 0\n            1 1-1h10a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm4 5a1 1 0 1 0 0 2h4a1 1 0 1\n            0 0-2h-4z");
    			add_location(path, file$1, 92, 10, 2828);
    			attr_dev(svg, "class", "h-6 w-6 fill-current text-gray-500");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$1, 88, 8, 2684);
    			attr_dev(span, "class", "ml-1 text-white font-medium");
    			add_location(span, file$1, 97, 8, 3043);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Filters");
    			attr_dev(button, "class", "ml-4 inline-flex items-center hover:bg-gray-600\n        focus:outline-none focus:shadow-outline rounded-lg shadow pl-3 pr-4\n        bg-gray-600");
    			add_location(button, file$1, 81, 6, 2425);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			append_dev(button, t0);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClick*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(81:4) {#if isOpen == true}",
    		ctx
    	});

    	return block;
    }

    // (196:2) {:else}
    function create_else_block$1(ctx) {
    	let form;
    	let div8;
    	let div1;
    	let span0;
    	let t1;
    	let div0;
    	let select0;
    	let t2;
    	let div3;
    	let span1;
    	let t4;
    	let div2;
    	let select1;
    	let t5;
    	let div5;
    	let span2;
    	let t7;
    	let div4;
    	let select2;
    	let t8;
    	let div7;
    	let span3;
    	let t10;
    	let div6;
    	let select3;
    	let t11;
    	let div9;
    	let button;
    	let mounted;
    	let dispose;
    	let each_value_7 = selectSubjects;
    	validate_each_argument(each_value_7);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks_3[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    	}

    	let each_value_6 = selectLanguages;
    	validate_each_argument(each_value_6);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks_2[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	let each_value_5 = selectBadges;
    	validate_each_argument(each_value_5);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_1[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	let each_value_4 = selectMentors;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			form = element("form");
    			div8 = element("div");
    			div1 = element("div");
    			span0 = element("span");
    			span0.textContent = "Subjects";
    			t1 = space();
    			div0 = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t2 = space();
    			div3 = element("div");
    			span1 = element("span");
    			span1.textContent = "Languages";
    			t4 = space();
    			div2 = element("div");
    			select1 = element("select");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t5 = space();
    			div5 = element("div");
    			span2 = element("span");
    			span2.textContent = "Badges";
    			t7 = space();
    			div4 = element("div");
    			select2 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t8 = space();
    			div7 = element("div");
    			span3 = element("span");
    			span3.textContent = "Mentors";
    			t10 = space();
    			div6 = element("div");
    			select3 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t11 = space();
    			div9 = element("div");
    			button = element("button");
    			button.textContent = "Apply";
    			attr_dev(span0, "class", "block text-md font-semibold text-gray-500");
    			add_location(span0, file$1, 199, 10, 7197);
    			attr_dev(select0, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*subjectSelected*/ ctx[2] === void 0) add_render_callback(() => /*select0_change_handler_1*/ ctx[18].call(select0));
    			add_location(select0, file$1, 203, 12, 7363);
    			attr_dev(div0, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div0, file$1, 202, 10, 7303);
    			attr_dev(div1, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div1, file$1, 198, 8, 7117);
    			attr_dev(span1, "class", "block text-md font-semibold text-gray-500");
    			add_location(span1, file$1, 215, 10, 7898);
    			attr_dev(select1, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*languageSelected*/ ctx[3] === void 0) add_render_callback(() => /*select1_change_handler_1*/ ctx[19].call(select1));
    			add_location(select1, file$1, 219, 12, 8065);
    			attr_dev(div2, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div2, file$1, 218, 10, 8005);
    			attr_dev(div3, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div3, file$1, 214, 8, 7818);
    			attr_dev(span2, "class", "block text-md font-semibold text-gray-500");
    			add_location(span2, file$1, 231, 10, 8606);
    			attr_dev(select2, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*badgeSelected*/ ctx[4] === void 0) add_render_callback(() => /*select2_change_handler_1*/ ctx[20].call(select2));
    			add_location(select2, file$1, 233, 12, 8746);
    			attr_dev(div4, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div4, file$1, 232, 10, 8686);
    			attr_dev(div5, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div5, file$1, 230, 8, 8526);
    			attr_dev(span3, "class", "block text-md font-semibold text-gray-500");
    			add_location(span3, file$1, 245, 10, 9269);
    			attr_dev(select3, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*mentorSelected*/ ctx[5] === void 0) add_render_callback(() => /*select3_change_handler_1*/ ctx[21].call(select3));
    			add_location(select3, file$1, 247, 12, 9410);
    			attr_dev(div6, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div6, file$1, 246, 10, 9350);
    			attr_dev(div7, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div7, file$1, 244, 8, 9189);
    			attr_dev(div8, "class", "lg:flex");
    			add_location(div8, file$1, 197, 6, 7087);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Apply Filters");
    			attr_dev(button, "class", "block w-full sm:w-auto sm:inline-block bg-blue-700\n          hover:bg-blue-600 font-semibold text-white px-4 py-2 rounded-lg");
    			add_location(button, file$1, 260, 8, 9928);
    			attr_dev(div9, "class", "bg-gray-900 px-4 py-4 sm:text-right");
    			add_location(div9, file$1, 259, 6, 9870);
    			attr_dev(form, "class", "block");
    			add_location(form, file$1, 196, 4, 7060);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, div8);
    			append_dev(div8, div1);
    			append_dev(div1, span0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, select0);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(select0, null);
    			}

    			select_option(select0, /*subjectSelected*/ ctx[2]);
    			append_dev(div8, t2);
    			append_dev(div8, div3);
    			append_dev(div3, span1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, select1);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select1, null);
    			}

    			select_option(select1, /*languageSelected*/ ctx[3]);
    			append_dev(div8, t5);
    			append_dev(div8, div5);
    			append_dev(div5, span2);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			append_dev(div4, select2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select2, null);
    			}

    			select_option(select2, /*badgeSelected*/ ctx[4]);
    			append_dev(div8, t8);
    			append_dev(div8, div7);
    			append_dev(div7, span3);
    			append_dev(div7, t10);
    			append_dev(div7, div6);
    			append_dev(div6, select3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select3, null);
    			}

    			select_option(select3, /*mentorSelected*/ ctx[5]);
    			append_dev(form, t11);
    			append_dev(form, div9);
    			append_dev(div9, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select0, "change", /*select0_change_handler_1*/ ctx[18]),
    					listen_dev(select0, "blur", /*handleSelectedSubject*/ ctx[9], false, false, false),
    					listen_dev(select1, "change", /*select1_change_handler_1*/ ctx[19]),
    					listen_dev(select1, "blur", /*handleSelectedLanguage*/ ctx[10], false, false, false),
    					listen_dev(select2, "change", /*select2_change_handler_1*/ ctx[20]),
    					listen_dev(select2, "blur", /*handleSelectedBadge*/ ctx[11], false, false, false),
    					listen_dev(select3, "change", /*select3_change_handler_1*/ ctx[21]),
    					listen_dev(select3, "blur", /*handleSelectedMentor*/ ctx[12], false, false, false),
    					listen_dev(button, "click", /*applyFilter*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectSubjects*/ 0) {
    				each_value_7 = selectSubjects;
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7(ctx, each_value_7, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_7(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_7.length;
    			}

    			if (dirty[0] & /*subjectSelected*/ 4) {
    				select_option(select0, /*subjectSelected*/ ctx[2]);
    			}

    			if (dirty & /*selectLanguages*/ 0) {
    				each_value_6 = selectLanguages;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_6(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_6.length;
    			}

    			if (dirty[0] & /*languageSelected*/ 8) {
    				select_option(select1, /*languageSelected*/ ctx[3]);
    			}

    			if (dirty & /*selectBadges*/ 0) {
    				each_value_5 = selectBadges;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_5(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_5.length;
    			}

    			if (dirty[0] & /*badgeSelected*/ 16) {
    				select_option(select2, /*badgeSelected*/ ctx[4]);
    			}

    			if (dirty & /*selectMentors*/ 0) {
    				each_value_4 = selectMentors;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}

    			if (dirty[0] & /*mentorSelected*/ 32) {
    				select_option(select3, /*mentorSelected*/ ctx[5]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(196:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (121:2) {#if isOpen == false}
    function create_if_block$1(ctx) {
    	let form;
    	let div8;
    	let div1;
    	let span0;
    	let t1;
    	let div0;
    	let select0;
    	let t2;
    	let div3;
    	let span1;
    	let t4;
    	let div2;
    	let select1;
    	let t5;
    	let div5;
    	let span2;
    	let t7;
    	let div4;
    	let select2;
    	let t8;
    	let div7;
    	let span3;
    	let t10;
    	let div6;
    	let select3;
    	let t11;
    	let div9;
    	let button;
    	let mounted;
    	let dispose;
    	let each_value_3 = selectSubjects;
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	let each_value_2 = selectLanguages;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value_1 = selectBadges;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = selectMentors;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			form = element("form");
    			div8 = element("div");
    			div1 = element("div");
    			span0 = element("span");
    			span0.textContent = "Subjects";
    			t1 = space();
    			div0 = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t2 = space();
    			div3 = element("div");
    			span1 = element("span");
    			span1.textContent = "Languages";
    			t4 = space();
    			div2 = element("div");
    			select1 = element("select");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t5 = space();
    			div5 = element("div");
    			span2 = element("span");
    			span2.textContent = "Badges";
    			t7 = space();
    			div4 = element("div");
    			select2 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t8 = space();
    			div7 = element("div");
    			span3 = element("span");
    			span3.textContent = "Mentors";
    			t10 = space();
    			div6 = element("div");
    			select3 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t11 = space();
    			div9 = element("div");
    			button = element("button");
    			button.textContent = "Apply";
    			attr_dev(span0, "class", "block text-md font-semibold text-gray-500");
    			add_location(span0, file$1, 124, 10, 4010);
    			attr_dev(select0, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*subjectSelected*/ ctx[2] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[14].call(select0));
    			add_location(select0, file$1, 128, 12, 4176);
    			attr_dev(div0, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div0, file$1, 127, 10, 4116);
    			attr_dev(div1, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div1, file$1, 123, 8, 3930);
    			attr_dev(span1, "class", "block text-md font-semibold text-gray-500");
    			add_location(span1, file$1, 140, 10, 4711);
    			attr_dev(select1, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*languageSelected*/ ctx[3] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[15].call(select1));
    			add_location(select1, file$1, 144, 12, 4878);
    			attr_dev(div2, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div2, file$1, 143, 10, 4818);
    			attr_dev(div3, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div3, file$1, 139, 8, 4631);
    			attr_dev(span2, "class", "block text-md font-semibold text-gray-500");
    			add_location(span2, file$1, 156, 10, 5419);
    			attr_dev(select2, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*badgeSelected*/ ctx[4] === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[16].call(select2));
    			add_location(select2, file$1, 158, 12, 5559);
    			attr_dev(div4, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div4, file$1, 157, 10, 5499);
    			attr_dev(div5, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div5, file$1, 155, 8, 5339);
    			attr_dev(span3, "class", "block text-md font-semibold text-gray-500");
    			add_location(span3, file$1, 170, 10, 6082);
    			attr_dev(select3, "class", "mt-1 form-select block w-full text-white shadow bg-gray-700\n              hover:border-gray-500 focus:bg-gray-600 border-none");
    			if (/*mentorSelected*/ ctx[5] === void 0) add_render_callback(() => /*select3_change_handler*/ ctx[17].call(select3));
    			add_location(select3, file$1, 172, 12, 6223);
    			attr_dev(div6, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div6, file$1, 171, 10, 6163);
    			attr_dev(div7, "class", "px-4 py-4 border-t border-gray-900 lg:w-1/4 lg:border-l");
    			add_location(div7, file$1, 169, 8, 6002);
    			attr_dev(div8, "class", "lg:flex");
    			add_location(div8, file$1, 122, 6, 3900);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", "Apply Filters");
    			attr_dev(button, "class", "block w-full sm:w-auto sm:inline-block bg-blue-700\n          hover:bg-blue-600 font-semibold text-white px-4 py-2 rounded-lg");
    			add_location(button, file$1, 185, 8, 6741);
    			attr_dev(div9, "class", "bg-gray-900 px-4 py-4 sm:text-right");
    			add_location(div9, file$1, 184, 6, 6683);
    			attr_dev(form, "class", "hidden");
    			add_location(form, file$1, 121, 4, 3872);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, div8);
    			append_dev(div8, div1);
    			append_dev(div1, span0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, select0);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(select0, null);
    			}

    			select_option(select0, /*subjectSelected*/ ctx[2]);
    			append_dev(div8, t2);
    			append_dev(div8, div3);
    			append_dev(div3, span1);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, select1);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select1, null);
    			}

    			select_option(select1, /*languageSelected*/ ctx[3]);
    			append_dev(div8, t5);
    			append_dev(div8, div5);
    			append_dev(div5, span2);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			append_dev(div4, select2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select2, null);
    			}

    			select_option(select2, /*badgeSelected*/ ctx[4]);
    			append_dev(div8, t8);
    			append_dev(div8, div7);
    			append_dev(div7, span3);
    			append_dev(div7, t10);
    			append_dev(div7, div6);
    			append_dev(div6, select3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select3, null);
    			}

    			select_option(select3, /*mentorSelected*/ ctx[5]);
    			append_dev(form, t11);
    			append_dev(form, div9);
    			append_dev(div9, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[14]),
    					listen_dev(select0, "blur", /*handleSelectedSubject*/ ctx[9], false, false, false),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[15]),
    					listen_dev(select1, "blur", /*handleSelectedLanguage*/ ctx[10], false, false, false),
    					listen_dev(select2, "change", /*select2_change_handler*/ ctx[16]),
    					listen_dev(select2, "blur", /*handleSelectedBadge*/ ctx[11], false, false, false),
    					listen_dev(select3, "change", /*select3_change_handler*/ ctx[17]),
    					listen_dev(select3, "blur", /*handleSelectedMentor*/ ctx[12], false, false, false),
    					listen_dev(button, "click", /*applyFilter*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectSubjects*/ 0) {
    				each_value_3 = selectSubjects;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty[0] & /*subjectSelected*/ 4) {
    				select_option(select0, /*subjectSelected*/ ctx[2]);
    			}

    			if (dirty & /*selectLanguages*/ 0) {
    				each_value_2 = selectLanguages;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty[0] & /*languageSelected*/ 8) {
    				select_option(select1, /*languageSelected*/ ctx[3]);
    			}

    			if (dirty & /*selectBadges*/ 0) {
    				each_value_1 = selectBadges;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*badgeSelected*/ 16) {
    				select_option(select2, /*badgeSelected*/ ctx[4]);
    			}

    			if (dirty & /*selectMentors*/ 0) {
    				each_value = selectMentors;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select3, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*mentorSelected*/ 32) {
    				select_option(select3, /*mentorSelected*/ ctx[5]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(121:2) {#if isOpen == false}",
    		ctx
    	});

    	return block;
    }

    // (209:14) {#each selectSubjects as selectSubject}
    function create_each_block_7(ctx) {
    	let option;
    	let t_value = /*selectSubject*/ ctx[41] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectSubject*/ ctx[41];
    			option.value = option.__value;
    			add_location(option, file$1, 209, 16, 7679);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7.name,
    		type: "each",
    		source: "(209:14) {#each selectSubjects as selectSubject}",
    		ctx
    	});

    	return block;
    }

    // (225:14) {#each selectLanguages as selectLanguage}
    function create_each_block_6(ctx) {
    	let option;
    	let t_value = /*selectLanguage*/ ctx[38] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectLanguage*/ ctx[38];
    			option.value = option.__value;
    			add_location(option, file$1, 225, 16, 8385);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(225:14) {#each selectLanguages as selectLanguage}",
    		ctx
    	});

    	return block;
    }

    // (239:14) {#each selectBadges as selectBadge}
    function create_each_block_5(ctx) {
    	let option;
    	let t_value = /*selectBadge*/ ctx[35] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectBadge*/ ctx[35];
    			option.value = option.__value;
    			add_location(option, file$1, 239, 16, 9054);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(239:14) {#each selectBadges as selectBadge}",
    		ctx
    	});

    	return block;
    }

    // (253:14) {#each selectMentors as selectMentor}
    function create_each_block_4(ctx) {
    	let option;
    	let t_value = /*selectMentor*/ ctx[32] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectMentor*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$1, 253, 16, 9722);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(253:14) {#each selectMentors as selectMentor}",
    		ctx
    	});

    	return block;
    }

    // (134:14) {#each selectSubjects as selectSubject}
    function create_each_block_3(ctx) {
    	let option;
    	let t_value = /*selectSubject*/ ctx[41] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectSubject*/ ctx[41];
    			option.value = option.__value;
    			add_location(option, file$1, 134, 16, 4492);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(134:14) {#each selectSubjects as selectSubject}",
    		ctx
    	});

    	return block;
    }

    // (150:14) {#each selectLanguages as selectLanguage}
    function create_each_block_2(ctx) {
    	let option;
    	let t_value = /*selectLanguage*/ ctx[38] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectLanguage*/ ctx[38];
    			option.value = option.__value;
    			add_location(option, file$1, 150, 16, 5198);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(150:14) {#each selectLanguages as selectLanguage}",
    		ctx
    	});

    	return block;
    }

    // (164:14) {#each selectBadges as selectBadge}
    function create_each_block_1(ctx) {
    	let option;
    	let t_value = /*selectBadge*/ ctx[35] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectBadge*/ ctx[35];
    			option.value = option.__value;
    			add_location(option, file$1, 164, 16, 5867);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(164:14) {#each selectBadges as selectBadge}",
    		ctx
    	});

    	return block;
    }

    // (178:14) {#each selectMentors as selectMentor}
    function create_each_block(ctx) {
    	let option;
    	let t_value = /*selectMentor*/ ctx[32] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*selectMentor*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$1, 178, 16, 6535);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(178:14) {#each selectMentors as selectMentor}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let section;
    	let div2;
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let t0;
    	let input;
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*isOpen*/ ctx[0] == true) return create_if_block_1$1;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*isOpen*/ ctx[0] == false) return create_if_block$1;
    		return create_else_block$1;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			input = element("input");
    			t1 = space();
    			if_block0.c();
    			t2 = space();
    			if_block1.c();
    			attr_dev(path, "d", "M16.32 14.9l1.1 1.1c.4-.02.83.13 1.14.44l3 3a1.5 1.5 0 0 1-2.12\n            2.12l-3-3a1.5 1.5 0 0 1-.44-1.14l-1.1-1.1a8 8 0 1 1\n            1.41-1.41l.01-.01zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z");
    			add_location(path, file$1, 63, 10, 1760);
    			attr_dev(svg, "class", "h-6 w-6 fill-current text-gray-600");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$1, 58, 8, 1594);
    			attr_dev(div0, "class", "absolute inset-y-0 left-0 flex items-center pl-3");
    			add_location(div0, file$1, 57, 6, 1523);
    			attr_dev(input, "type", "search");
    			attr_dev(input, "aria-label", "Search");
    			attr_dev(input, "class", "block w-full bg-gray-900 focus:outline-none focus:bg-white\n        focus:text-gray-900 text-white rounded-lg pl-10 pr-4 py-2");
    			attr_dev(input, "placeholder", "Search for topics");
    			add_location(input, file$1, 69, 6, 2015);
    			attr_dev(div1, "class", "relative max-w-xs w-full");
    			add_location(div1, file$1, 56, 4, 1478);
    			attr_dev(div2, "class", "flex justify-between px-4 py-3");
    			add_location(div2, file$1, 55, 2, 1429);
    			attr_dev(section, "class", "bg-gray-800");
    			add_location(section, file$1, 54, 0, 1397);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(div1, t0);
    			append_dev(div1, input);
    			set_input_value(input, /*searchTerm*/ ctx[1]);
    			append_dev(div2, t1);
    			if_block0.m(div2, null);
    			append_dev(section, t2);
    			if_block1.m(section, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[13]),
    					listen_dev(input, "keyup", /*applySearch*/ ctx[6], false, false, false),
    					listen_dev(input, "change", /*applySearch*/ ctx[6], false, false, false),
    					listen_dev(input, "search", /*applySearch*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*searchTerm*/ 2) {
    				set_input_value(input, /*searchTerm*/ ctx[1]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div2, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(section, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block0.d();
    			if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $searchStore;
    	let $subjectsStore;
    	let $badgesStore;
    	let $languagesStore;
    	let $mentorsStore;
    	validate_store(searchStore, "searchStore");
    	component_subscribe($$self, searchStore, $$value => $$invalidate(26, $searchStore = $$value));
    	validate_store(subjectsStore, "subjectsStore");
    	component_subscribe($$self, subjectsStore, $$value => $$invalidate(27, $subjectsStore = $$value));
    	validate_store(badgesStore, "badgesStore");
    	component_subscribe($$self, badgesStore, $$value => $$invalidate(28, $badgesStore = $$value));
    	validate_store(languagesStore, "languagesStore");
    	component_subscribe($$self, languagesStore, $$value => $$invalidate(29, $languagesStore = $$value));
    	validate_store(mentorsStore, "mentorsStore");
    	component_subscribe($$self, mentorsStore, $$value => $$invalidate(30, $mentorsStore = $$value));
    	let isOpen = false;
    	let searchTerm = $searchStore;
    	let subjectsFilter = $subjectsStore;
    	let badgesFilter = $badgesStore;
    	let languagesFilter = $languagesStore;
    	let mentorsFilter = $mentorsStore;
    	let subjectSelected = $subjectsStore;
    	let languageSelected = $languagesStore;
    	let badgeSelected = $badgesStore;
    	let mentorSelected = $mentorsStore;
    	const dispatch = createEventDispatcher();

    	function applySearch() {
    		searchStore.apply(searchTerm.toLowerCase());
    	}

    	function handleClick() {
    		$$invalidate(0, isOpen = !isOpen);
    	}

    	function applyFilter() {
    		subjectsStore.apply(subjectsFilter);
    		badgesStore.apply(badgesFilter);
    		languagesStore.apply(languagesFilter);
    		mentorsStore.apply(mentorsFilter);
    		$$invalidate(0, isOpen = !isOpen);
    		dispatch("apply");
    	}

    	function handleSelectedSubject() {
    		subjectsFilter = subjectSelected;
    	}

    	function handleSelectedLanguage() {
    		languagesFilter = languageSelected;
    	}

    	function handleSelectedBadge() {
    		badgesFilter = badgeSelected;
    	}

    	function handleSelectedMentor() {
    		mentorsFilter = mentorSelected;
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SearchFilters> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SearchFilters", $$slots, []);

    	function input_input_handler() {
    		searchTerm = this.value;
    		$$invalidate(1, searchTerm);
    	}

    	function select0_change_handler() {
    		subjectSelected = select_value(this);
    		$$invalidate(2, subjectSelected);
    	}

    	function select1_change_handler() {
    		languageSelected = select_value(this);
    		$$invalidate(3, languageSelected);
    	}

    	function select2_change_handler() {
    		badgeSelected = select_value(this);
    		$$invalidate(4, badgeSelected);
    	}

    	function select3_change_handler() {
    		mentorSelected = select_value(this);
    		$$invalidate(5, mentorSelected);
    	}

    	function select0_change_handler_1() {
    		subjectSelected = select_value(this);
    		$$invalidate(2, subjectSelected);
    	}

    	function select1_change_handler_1() {
    		languageSelected = select_value(this);
    		$$invalidate(3, languageSelected);
    	}

    	function select2_change_handler_1() {
    		badgeSelected = select_value(this);
    		$$invalidate(4, badgeSelected);
    	}

    	function select3_change_handler_1() {
    		mentorSelected = select_value(this);
    		$$invalidate(5, mentorSelected);
    	}

    	$$self.$capture_state = () => ({
    		searchStore,
    		subjectsStore,
    		badgesStore,
    		languagesStore,
    		mentorsStore,
    		selectSubjects,
    		selectLanguages,
    		selectBadges,
    		selectMentors,
    		createEventDispatcher,
    		isOpen,
    		searchTerm,
    		subjectsFilter,
    		badgesFilter,
    		languagesFilter,
    		mentorsFilter,
    		subjectSelected,
    		languageSelected,
    		badgeSelected,
    		mentorSelected,
    		dispatch,
    		applySearch,
    		handleClick,
    		applyFilter,
    		handleSelectedSubject,
    		handleSelectedLanguage,
    		handleSelectedBadge,
    		handleSelectedMentor,
    		$searchStore,
    		$subjectsStore,
    		$badgesStore,
    		$languagesStore,
    		$mentorsStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("isOpen" in $$props) $$invalidate(0, isOpen = $$props.isOpen);
    		if ("searchTerm" in $$props) $$invalidate(1, searchTerm = $$props.searchTerm);
    		if ("subjectsFilter" in $$props) subjectsFilter = $$props.subjectsFilter;
    		if ("badgesFilter" in $$props) badgesFilter = $$props.badgesFilter;
    		if ("languagesFilter" in $$props) languagesFilter = $$props.languagesFilter;
    		if ("mentorsFilter" in $$props) mentorsFilter = $$props.mentorsFilter;
    		if ("subjectSelected" in $$props) $$invalidate(2, subjectSelected = $$props.subjectSelected);
    		if ("languageSelected" in $$props) $$invalidate(3, languageSelected = $$props.languageSelected);
    		if ("badgeSelected" in $$props) $$invalidate(4, badgeSelected = $$props.badgeSelected);
    		if ("mentorSelected" in $$props) $$invalidate(5, mentorSelected = $$props.mentorSelected);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		isOpen,
    		searchTerm,
    		subjectSelected,
    		languageSelected,
    		badgeSelected,
    		mentorSelected,
    		applySearch,
    		handleClick,
    		applyFilter,
    		handleSelectedSubject,
    		handleSelectedLanguage,
    		handleSelectedBadge,
    		handleSelectedMentor,
    		input_input_handler,
    		select0_change_handler,
    		select1_change_handler,
    		select2_change_handler,
    		select3_change_handler,
    		select0_change_handler_1,
    		select1_change_handler_1,
    		select2_change_handler_1,
    		select3_change_handler_1
    	];
    }

    class SearchFilters extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {}, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SearchFilters",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/Footer.svelte generated by Svelte v3.24.1 */

    const file$2 = "src/Footer.svelte";

    function create_fragment$2(ctx) {
    	let footer;
    	let nav;
    	let div2;
    	let div1;
    	let a0;
    	let t1;
    	let a1;
    	let t3;
    	let a2;
    	let t5;
    	let div0;
    	let a3;
    	let svg0;
    	let path0;
    	let t6;
    	let a4;
    	let svg1;
    	let path1;
    	let t7;
    	let a5;
    	let svg2;
    	let path2;
    	let t8;
    	let a6;
    	let svg3;
    	let path3;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			nav = element("nav");
    			div2 = element("div");
    			div1 = element("div");
    			a0 = element("a");
    			a0.textContent = "Community";
    			t1 = space();
    			a1 = element("a");
    			a1.textContent = "Jobs Board";
    			t3 = space();
    			a2 = element("a");
    			a2.textContent = "Claim Token";
    			t5 = space();
    			div0 = element("div");
    			a3 = element("a");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t6 = space();
    			a4 = element("a");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t7 = space();
    			a5 = element("a");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t8 = space();
    			a6 = element("a");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			attr_dev(a0, "href", "https://community.xyz/#846sNrRlXoJEkdzRo0F1mCQvbGR0okJLgvzDBLoxXD0");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "rel", "noopener");
    			attr_dev(a0, "aria-label", "SyllabusWeave Community");
    			attr_dev(a0, "class", "block px-3 py-1 rounded font-semibold text-gray-900\n            hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a0, file$2, 5, 8, 263);
    			attr_dev(a1, "href", "https://community.xyz/#846sNrRlXoJEkdzRo0F1mCQvbGR0okJLgvzDBLoxXD0");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "rel", "noopener");
    			attr_dev(a1, "aria-label", "Jobs Board");
    			attr_dev(a1, "class", "block px-3 py-1 rounded font-semibold text-gray-900\n            hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a1, file$2, 14, 8, 611);
    			attr_dev(a2, "href", "https://community.xyz/#846sNrRlXoJEkdzRo0F1mCQvbGR0okJLgvzDBLoxXD0");
    			attr_dev(a2, "target", "_blank");
    			attr_dev(a2, "rel", "noopener");
    			attr_dev(a2, "aria-label", "Claim Token to Arweave Team");
    			attr_dev(a2, "class", "block px-3 py-1 rounded font-semibold text-gray-900\n            hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a2, file$2, 23, 8, 947);
    			attr_dev(path0, "fill-rule", "evenodd");
    			attr_dev(path0, "clip-rule", "evenodd");
    			attr_dev(path0, "d", "M20.222,0 C21.628,0 22.762,1.137 22.829,2.475 L22.829,24\n                L20.152,21.727 L18.682,20.389 L17.078,18.991 L17.748,21.196\n                L3.71,21.196 C2.308,21.196 1.17,20.131 1.17,18.72 L1.17,2.48\n                C1.17,1.142 2.31,0.003 3.715,0.003 L20.215,0.003 L20.222,0 z\n                M14.104,5.683 L14.074,5.683 L13.872,5.883 C15.945,6.483\n                16.948,7.42 16.948,7.42 C15.612,6.752 14.408,6.418 13.204,6.283\n                C12.334,6.148 11.464,6.219 10.729,6.283 L10.529,6.283\n                C10.059,6.283 9.059,6.483 7.719,7.018 C7.252,7.221 6.984,7.354\n                6.984,7.354 C6.984,7.354 7.986,6.352 10.194,5.817 L10.059,5.682\n                C10.059,5.682 8.387,5.618 6.582,6.952 C6.582,6.952 4.777,10.096\n                4.777,13.972 C4.777,13.972 5.777,15.712 8.52,15.778 C8.52,15.778\n                8.92,15.245 9.325,14.776 C7.785,14.308 7.185,13.372 7.185,13.372\n                C7.185,13.372 7.319,13.438 7.52,13.572 L7.58,13.572 C7.61,13.572\n                7.624,13.587 7.64,13.602 L7.64,13.608 C7.656,13.624 7.67,13.638\n                7.7,13.638 C8.03,13.774 8.36,13.908 8.63,14.038 C9.096,14.24\n                9.695,14.441 10.43,14.574 C11.36,14.709 12.426,14.774\n                13.64,14.574 C14.24,14.439 14.84,14.307 15.44,14.039\n                C15.83,13.839 16.31,13.639 16.837,13.302 C16.837,13.302\n                16.237,14.238 14.632,14.706 C14.962,15.172 15.427,15.706\n                15.427,15.706 C18.171,15.646 19.237,13.906 19.297,13.98\n                C19.297,10.11 17.482,6.96 17.482,6.96 C15.847,5.746 14.317,5.7\n                14.047,5.7 L14.103,5.68 z M14.272,10.096 C14.975,10.096\n                15.542,10.696 15.542,11.431 C15.542,12.171 14.972,12.771\n                14.272,12.771 C13.572,12.771 13.002,12.171 13.002,11.437\n                C13.004,10.697 13.575,10.099 14.272,10.099 z M9.729,10.096\n                C10.429,10.096 10.995,10.696 10.995,11.431 C10.995,12.171\n                10.425,12.771 9.725,12.771 C9.025,12.771 8.455,12.171\n                8.455,11.437 C8.455,10.697 9.025,10.099 9.725,10.099 z");
    			add_location(path0, file$2, 44, 14, 1818);
    			attr_dev(svg0, "class", "h-5 w-5 fill-current");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "viewBox", "0, 0, 21.659, 24");
    			add_location(svg0, file$2, 40, 12, 1665);
    			attr_dev(a3, "href", "https://discord.gg/pJsMtM");
    			attr_dev(a3, "target", "_blank");
    			attr_dev(a3, "rel", "noopener");
    			attr_dev(a3, "aria-label", "SyllabusWeave Discord");
    			attr_dev(a3, "class", "flex-grow block px-3 py-1 rounded font-semibold text-gray-900\n              hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a3, file$2, 33, 10, 1367);
    			attr_dev(path1, "fill-rule", "evenodd");
    			attr_dev(path1, "clip-rule", "evenodd");
    			attr_dev(path1, "d", "M23.954,4.569 C23.069,4.958 22.124,5.224 21.128,5.345\n                C22.142,4.734 22.923,3.77 23.292,2.622 C22.34,3.177 21.287,3.581\n                20.164,3.806 C19.268,2.846 17.992,2.247 16.573,2.247\n                C13.856,2.247 11.653,4.45 11.653,7.163 C11.653,7.554\n                11.698,7.929 11.781,8.288 C7.69,8.094 4.065,6.13 1.64,3.161\n                C1.212,3.884 0.974,4.722 0.974,5.636 C0.974,7.346 1.844,8.849\n                3.161,9.733 C2.355,9.707 1.595,9.484 0.933,9.116 L0.933,9.177\n                C0.933,11.562 2.626,13.552 4.879,14.005 C4.466,14.116\n                4.03,14.175 3.583,14.175 C3.27,14.175 2.968,14.146 2.668,14.09\n                C3.299,16.042 5.113,17.466 7.272,17.507 C5.591,18.826\n                3.463,19.611 1.169,19.611 C0.78,19.611 0.391,19.588\n                -0.001,19.545 C2.188,20.938 4.767,21.753 7.556,21.753\n                C16.611,21.753 21.556,14.257 21.556,7.767 C21.556,7.558\n                21.556,7.347 21.541,7.137 C22.501,6.449 23.34,5.577 24,4.589\n                L23.954,4.569 z");
    			add_location(path1, file$2, 88, 14, 4495);
    			attr_dev(svg1, "class", "h-5 w-5 fill-current");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0, 0, 24, 20");
    			add_location(svg1, file$2, 84, 12, 4346);
    			attr_dev(a4, "href", "https://twitter.com");
    			attr_dev(a4, "target", "_blank");
    			attr_dev(a4, "rel", "noopener");
    			attr_dev(a4, "aria-label", "SyllabusWeave Twitter");
    			attr_dev(a4, "class", "flex-grow block px-3 py-1 rounded font-semibold text-gray-900\n              hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a4, file$2, 77, 10, 4054);
    			attr_dev(path2, "fill-rule", "evenodd");
    			attr_dev(path2, "clip-rule", "evenodd");
    			attr_dev(path2, "d", "M12,0.297 C5.37,0.297 0,5.67 0,12.297 C0,17.6 3.438,22.097\n                8.205,23.682 C8.805,23.795 9.025,23.424 9.025,23.105\n                C9.025,22.82 9.015,22.065 9.01,21.065 C5.672,21.789 4.968,19.455\n                4.968,19.455 C4.422,18.07 3.633,17.7 3.633,17.7 C2.546,16.956\n                3.717,16.971 3.717,16.971 C4.922,17.055 5.555,18.207\n                5.555,18.207 C6.625,20.042 8.364,19.512 9.05,19.205\n                C9.158,18.429 9.467,17.9 9.81,17.6 C7.145,17.3 4.344,16.268\n                4.344,11.67 C4.344,10.36 4.809,9.29 5.579,8.45 C5.444,8.147\n                5.039,6.927 5.684,5.274 C5.684,5.274 6.689,4.952 8.984,6.504\n                C9.944,6.237 10.964,6.105 11.984,6.099 C13.004,6.105\n                14.024,6.237 14.984,6.504 C17.264,4.952 18.269,5.274\n                18.269,5.274 C18.914,6.927 18.509,8.147 18.389,8.45 C19.154,9.29\n                19.619,10.36 19.619,11.67 C19.619,16.28 16.814,17.295\n                14.144,17.59 C14.564,17.95 14.954,18.686 14.954,19.81\n                C14.954,21.416 14.939,22.706 14.939,23.096 C14.939,23.411\n                15.149,23.786 15.764,23.666 C20.565,22.092 24,17.592 24,12.297\n                C24,5.67 18.627,0.297 12,0.297");
    			add_location(path2, file$2, 119, 14, 6141);
    			attr_dev(svg2, "class", "h-5 w-5 fill-current");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "viewBox", "0, 0, 24, 24");
    			add_location(svg2, file$2, 115, 12, 5992);
    			attr_dev(a5, "href", "https://github.com/ivanmolto/sillabus");
    			attr_dev(a5, "target", "_blank");
    			attr_dev(a5, "rel", "noopener");
    			attr_dev(a5, "aria-label", "SyllabusWeave Github");
    			attr_dev(a5, "class", "flex-grow block px-3 py-1 rounded font-semibold text-gray-900\n              hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a5, file$2, 108, 10, 5683);
    			attr_dev(path3, "fill-rule", "evenodd");
    			attr_dev(path3, "clip-rule", "evenodd");
    			attr_dev(path3, "d", "M18,2 C19.105,2 20,2.895 20,4 L20,16 C20,17.105 19.105,18\n                18,18 L2,18 C0.895,18 0,17.105 0,16 L0,4 C0,2.9 0.9,2 2,2 L18,2\n                z M13.63,11.1 L20,16 L20,14 L14.88,10.1 L20,6 L20,4 L10,12 L0,4\n                L0,6 L5.12,10.1 L0,14 L0,16 L6.37,11.1 L10,14 L13.63,11.1 z");
    			add_location(path3, file$2, 152, 14, 8027);
    			attr_dev(svg3, "class", "h-5 w-5 fill-current");
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "viewBox", "0, 0, 22, 18");
    			add_location(svg3, file$2, 148, 12, 7878);
    			attr_dev(a6, "href", "https://arweave.net/27WsYOcNHWweInDArUK94_GsBeuQKPXalsnwVPPRfe4?to=wv_3q4_df0jXCVUJjCMYuYLSUcjIbrk9ggp_Ovix8yI");
    			attr_dev(a6, "target", "_blank");
    			attr_dev(a6, "rel", "noopener");
    			attr_dev(a6, "aria-label", "SyllabusWeave mail");
    			attr_dev(a6, "class", "flex-grow block px-3 py-1 rounded font-semibold text-gray-900\n              hover:text-gray-700 sm:text-sm sm:px-2");
    			add_location(a6, file$2, 141, 10, 7498);
    			attr_dev(div0, "class", "flex pt-4 sm:pt-0 md:pt-0 lg:pt-0 xl:pt-0");
    			add_location(div0, file$2, 32, 8, 1301);
    			attr_dev(div1, "class", "px-2 pt-2 pb-5 border-gray-800 sm:flex sm:py-0 sm:px-0");
    			add_location(div1, file$2, 4, 6, 186);
    			attr_dev(div2, "class", "sm:flex sm:items-center");
    			add_location(div2, file$2, 3, 4, 142);
    			attr_dev(nav, "class", "block sm:flex sm:items-center sm:px-4");
    			add_location(nav, file$2, 2, 2, 86);
    			attr_dev(footer, "class", "bg-gray-200 sm:flex sm:items-center sm:justify-between mt-8 pb-8");
    			add_location(footer, file$2, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, nav);
    			append_dev(nav, div2);
    			append_dev(div2, div1);
    			append_dev(div1, a0);
    			append_dev(div1, t1);
    			append_dev(div1, a1);
    			append_dev(div1, t3);
    			append_dev(div1, a2);
    			append_dev(div1, t5);
    			append_dev(div1, div0);
    			append_dev(div0, a3);
    			append_dev(a3, svg0);
    			append_dev(svg0, path0);
    			append_dev(div0, t6);
    			append_dev(div0, a4);
    			append_dev(a4, svg1);
    			append_dev(svg1, path1);
    			append_dev(div0, t7);
    			append_dev(div0, a5);
    			append_dev(a5, svg2);
    			append_dev(svg2, path2);
    			append_dev(div0, t8);
    			append_dev(div0, a6);
    			append_dev(a6, svg3);
    			append_dev(svg3, path3);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props) {
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Footer", $$slots, []);
    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    const APP_NAME = "Syllabus-beta-1";
    const TX_PATTERN = /[A-Za-z0-9-_]{43}/;
    const CONTRACTID = "TmeTF0zp4YEHL_1vgM9K3wrxv3tjjckjO6DcOI_Drfs";

    const read = async txid => {
      let tx = window.localStorage.getItem(txid);
      if (tx) {
         return JSON.parse(tx);
      }
      tx = await arweave.transactions.get(txid);
      const clone = {...tx};
      clone['tags'] = txTags(tx);
      clone['data'] = await txData(tx);
      clone['owner'] = await txOwner(tx);
      window.localStorage.setItem(clone.id, JSON.stringify(clone));
      return clone;
    };
    const publish = async (props, wallet, address) => {
      const id = props.id;
      const title = props.title;
      const subtitle = props.subtitle;
      const imageUrl = props.imageUrl;
      const duration = props.duration;
      const language = props.language;
      const rating = props.rating;
      const reviewCount = props.reviewCount;
      const isFavorite = props.isFavorite;
      const badge = props.badge;
      const author = props.author;
      const mentorAvailable = props.mentorAvailable;
      const price = props.price;
      const subject = props.subject;
      const status = props.status;
      const apiVersion = props.apiVersion;
      const content = props.content;
      const timestamp = Math.round((new Date()).getTime() / 1000);
      let tx = await arweave.createTransaction(
        {
          data: content,
        },
        wallet
      );
      tx['last_tx'] = await arweave.api.get('/tx_anchor').then(x => x.data);
      tx.addTag('Content-Type', 'text/html');
      const tags = {
        'App-Name': APP_NAME,
        'Syllabus-Id': id,
        'Syllabus-Title': title,
        'Syllabus-Subtitle': subtitle,
        'Syllabus-ImageUrl': imageUrl,
        'Syllabus-Duration': duration,
        'Syllabus-Language': language,
        'Syllabus-Rating': rating,
        'Syllabus-ReviewCount': reviewCount,
        'Syllabus-IsFavorite': isFavorite,
        'Syllabus-Badge': badge,
        'Syllabus-Author': author,
        'Syllabus-Mentor': mentorAvailable,
        'Syllabus-Price': price,
        'Syllabus-Subject': subject,
        'Syllabus-Status': status,
        'Syllabus-API': apiVersion,
        'Syllabus-Timestamp': timestamp
      };
      for (const [tagKey, tagValue] of Object.entries(tags)) {
        tx.addTag(tagKey, tagValue);
      }
      await arweave.transactions.sign(tx, wallet);
      let uploader = await arweave.transactions.getUploader(tx);
      while (!uploader.isComplete) {
        await uploader.uploadChunk();
      }
      const clone = {...tx};
      clone['tags'] = tags;
      clone['data'] = content;
      clone['owner'] = address;
      window.localStorage.setItem(clone.id, JSON.stringify(clone));
      return clone;
    };

    /* src/SyllabusItem.svelte generated by Svelte v3.24.1 */
    const file$3 = "src/SyllabusItem.svelte";

    // (76:8) {:else}
    function create_else_block$2(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-red-400 text-gray-800 text-xs px-2 rounded-md\n            uppercase font-semibold tracking-wide");
    			add_location(span, file$3, 76, 10, 2661);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(76:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (70:33) 
    function create_if_block_4(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-blue-400 text-gray-800 text-xs px-2\n            rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$3, 70, 10, 2457);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(70:33) ",
    		ctx
    	});

    	return block;
    }

    // (64:37) 
    function create_if_block_3$1(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-purple-400 text-gray-800 text-xs px-2\n            rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$3, 64, 10, 2233);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(64:37) ",
    		ctx
    	});

    	return block;
    }

    // (58:38) 
    function create_if_block_2$1(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-indigo-400 text-gray-800 text-xs px-2\n            rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$3, 58, 10, 2005);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(58:38) ",
    		ctx
    	});

    	return block;
    }

    // (52:8) {#if badge == 'Bestseller'}
    function create_if_block_1$2(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-yellow-400 text-gray-800 text-xs px-2\n            rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$3, 52, 10, 1776);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(52:8) {#if badge == 'Bestseller'}",
    		ctx
    	});

    	return block;
    }

    // (106:8) {#if mentorAvailable == 'Available'}
    function create_if_block$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Mentor";
    			attr_dev(span, "class", "mt-2 inline-block bg-teal-200 text-teal-800 text-xs px-2\n            rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$3, 106, 10, 3697);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(106:8) {#if mentorAvailable == 'Available'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div9;
    	let a;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div8;
    	let div2;
    	let t1;
    	let div1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let div3;
    	let t6;
    	let t7;
    	let div4;
    	let t8;
    	let t9;
    	let div5;
    	let span0;
    	let t10;
    	let t11;
    	let span1;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let div6;
    	let t16;
    	let t17;
    	let div7;
    	let a_href_value;

    	function select_block_type(ctx, dirty) {
    		if (/*badge*/ ctx[8] == "Bestseller") return create_if_block_1$2;
    		if (/*badge*/ ctx[8] == "Featured") return create_if_block_2$1;
    		if (/*badge*/ ctx[8] == "Updated") return create_if_block_3$1;
    		if (/*badge*/ ctx[8] == "New") return create_if_block_4;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*mentorAvailable*/ ctx[10] == "Available" && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			a = element("a");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div8 = element("div");
    			div2 = element("div");
    			if_block0.c();
    			t1 = space();
    			div1 = element("div");
    			t2 = text(/*language*/ ctx[5]);
    			t3 = text(" • ");
    			t4 = text(/*duration*/ ctx[4]);
    			t5 = space();
    			div3 = element("div");
    			t6 = text(/*title*/ ctx[1]);
    			t7 = space();
    			div4 = element("div");
    			t8 = text(/*subtitle*/ ctx[2]);
    			t9 = space();
    			div5 = element("div");
    			span0 = element("span");
    			t10 = text(/*rating*/ ctx[6]);
    			t11 = space();
    			span1 = element("span");
    			t12 = text("(");
    			t13 = text(/*reviewCount*/ ctx[7]);
    			t14 = text(" ratings)");
    			t15 = space();
    			div6 = element("div");
    			t16 = text(/*author*/ ctx[9]);
    			t17 = space();
    			div7 = element("div");
    			if (if_block1) if_block1.c();
    			attr_dev(img, "class", "h-32 w-full object-cover");
    			if (img.src !== (img_src_value = /*imageUrl*/ ctx[3])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*title*/ ctx[1]);
    			add_location(img, file$3, 47, 6, 1594);
    			attr_dev(div0, "class", "relative pb-2/3");
    			add_location(div0, file$3, 46, 4, 1558);
    			attr_dev(div1, "class", "mt-2 text-gray-800 text-xs font-semibold tracking-wide");
    			add_location(div1, file$3, 82, 8, 2860);
    			attr_dev(div2, "class", "items-baseline");
    			add_location(div2, file$3, 50, 6, 1701);
    			attr_dev(div3, "class", "mt-1 font-semibold text-base leading-tight row-span-2 truncate");
    			add_location(div3, file$3, 86, 6, 3002);
    			attr_dev(div4, "class", "mt-1 text-gray-700 font-base text-medium leading-tight row-span-2\n        truncate");
    			add_location(div4, file$3, 90, 6, 3122);
    			attr_dev(span0, "class", "text-teal-800 font-semibold text-sm");
    			add_location(span0, file$3, 96, 8, 3310);
    			attr_dev(span1, "class", "ml-2 text-gray-800 text-sm");
    			add_location(span1, file$3, 97, 8, 3384);
    			attr_dev(div5, "class", "mt-2 flex items-center");
    			add_location(div5, file$3, 95, 6, 3265);
    			attr_dev(div6, "class", "mt-1 text-gray-900 font-light text-sm leading-tight row-span-2\n        truncate");
    			add_location(div6, file$3, 99, 6, 3475);
    			attr_dev(div7, "class", "items-baseline");
    			add_location(div7, file$3, 104, 6, 3613);
    			attr_dev(div8, "class", "p-4");
    			add_location(div8, file$3, 49, 4, 1677);
    			attr_dev(a, "href", a_href_value = "#/syllabus/" + /*id*/ ctx[0]);
    			attr_dev(a, "class", "no-underline");
    			add_location(a, file$3, 45, 2, 1506);
    			attr_dev(div9, "class", "bg-white rounded-lg overflow-hidden shadow-lg");
    			add_location(div9, file$3, 44, 0, 1444);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, a);
    			append_dev(a, div0);
    			append_dev(div0, img);
    			append_dev(a, t0);
    			append_dev(a, div8);
    			append_dev(div8, div2);
    			if_block0.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, t2);
    			append_dev(div1, t3);
    			append_dev(div1, t4);
    			append_dev(div8, t5);
    			append_dev(div8, div3);
    			append_dev(div3, t6);
    			append_dev(div8, t7);
    			append_dev(div8, div4);
    			append_dev(div4, t8);
    			append_dev(div8, t9);
    			append_dev(div8, div5);
    			append_dev(div5, span0);
    			append_dev(span0, t10);
    			append_dev(div5, t11);
    			append_dev(div5, span1);
    			append_dev(span1, t12);
    			append_dev(span1, t13);
    			append_dev(span1, t14);
    			append_dev(div8, t15);
    			append_dev(div8, div6);
    			append_dev(div6, t16);
    			append_dev(div8, t17);
    			append_dev(div8, div7);
    			if (if_block1) if_block1.m(div7, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*imageUrl*/ 8 && img.src !== (img_src_value = /*imageUrl*/ ctx[3])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*title*/ 2) {
    				attr_dev(img, "alt", /*title*/ ctx[1]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div2, t1);
    				}
    			}

    			if (dirty & /*language*/ 32) set_data_dev(t2, /*language*/ ctx[5]);
    			if (dirty & /*duration*/ 16) set_data_dev(t4, /*duration*/ ctx[4]);
    			if (dirty & /*title*/ 2) set_data_dev(t6, /*title*/ ctx[1]);
    			if (dirty & /*subtitle*/ 4) set_data_dev(t8, /*subtitle*/ ctx[2]);
    			if (dirty & /*rating*/ 64) set_data_dev(t10, /*rating*/ ctx[6]);
    			if (dirty & /*reviewCount*/ 128) set_data_dev(t13, /*reviewCount*/ ctx[7]);
    			if (dirty & /*author*/ 512) set_data_dev(t16, /*author*/ ctx[9]);

    			if (/*mentorAvailable*/ ctx[10] == "Available") {
    				if (if_block1) ; else {
    					if_block1 = create_if_block$2(ctx);
    					if_block1.c();
    					if_block1.m(div7, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*id*/ 1 && a_href_value !== (a_href_value = "#/syllabus/" + /*id*/ ctx[0])) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { id } = $$props;
    	let syllabus = {};
    	let title;
    	let subtitle;
    	let imageUrl;
    	let duration;
    	let language;
    	let rating;
    	let reviewCount;
    	let isFavorite;
    	let badge;
    	let author;
    	let mentorAvailable;
    	let price;
    	let subject;
    	let status;
    	let apiVersion;
    	let content;
    	let timestamp;

    	const render = async id => {
    		syllabus = await read(id);
    		$$invalidate(1, title = syllabus["tags"]["Syllabus-Title"]);
    		$$invalidate(2, subtitle = syllabus["tags"]["Syllabus-Subtitle"]);
    		$$invalidate(4, duration = syllabus["tags"]["Syllabus-Duration"]);
    		$$invalidate(5, language = syllabus["tags"]["Syllabus-Language"]);
    		$$invalidate(6, rating = syllabus["tags"]["Syllabus-Rating"]);
    		$$invalidate(7, reviewCount = syllabus["tags"]["Syllabus-ReviewCount"]);
    		isFavorite = syllabus["tags"]["Syllabus-IsFavorite"];
    		$$invalidate(8, badge = syllabus["tags"]["Syllabus-Badge"]);
    		$$invalidate(9, author = syllabus["tags"]["Syllabus-Author"]);
    		$$invalidate(10, mentorAvailable = syllabus["tags"]["Syllabus-Mentor"]);
    		price = syllabus["tags"]["Syllabus-Price"];
    		subject = syllabus["tags"]["Syllabus-Subject"];
    		status = syllabus["tags"]["Syllabus-Status"];
    		apiVersion = syllabus["tags"]["Syllabus-API"];
    		timestamp = syllabus["tags"]["Syllabus-Timestamp"];
    		$$invalidate(3, imageUrl = syllabus.data.slice(0, syllabus["tags"]["Syllabus-ImageUrl"])); // syllabus["tags"]["Syllabus-ImageUrl"];
    		content = syllabus.data.slice(syllabus["tags"]["Syllabus-ImageUrl"], -1);
    	};

    	const writable_props = ["id"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SyllabusItem> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SyllabusItem", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    	};

    	$$self.$capture_state = () => ({
    		read,
    		id,
    		syllabus,
    		title,
    		subtitle,
    		imageUrl,
    		duration,
    		language,
    		rating,
    		reviewCount,
    		isFavorite,
    		badge,
    		author,
    		mentorAvailable,
    		price,
    		subject,
    		status,
    		apiVersion,
    		content,
    		timestamp,
    		render
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(0, id = $$props.id);
    		if ("syllabus" in $$props) syllabus = $$props.syllabus;
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    		if ("subtitle" in $$props) $$invalidate(2, subtitle = $$props.subtitle);
    		if ("imageUrl" in $$props) $$invalidate(3, imageUrl = $$props.imageUrl);
    		if ("duration" in $$props) $$invalidate(4, duration = $$props.duration);
    		if ("language" in $$props) $$invalidate(5, language = $$props.language);
    		if ("rating" in $$props) $$invalidate(6, rating = $$props.rating);
    		if ("reviewCount" in $$props) $$invalidate(7, reviewCount = $$props.reviewCount);
    		if ("isFavorite" in $$props) isFavorite = $$props.isFavorite;
    		if ("badge" in $$props) $$invalidate(8, badge = $$props.badge);
    		if ("author" in $$props) $$invalidate(9, author = $$props.author);
    		if ("mentorAvailable" in $$props) $$invalidate(10, mentorAvailable = $$props.mentorAvailable);
    		if ("price" in $$props) price = $$props.price;
    		if ("subject" in $$props) subject = $$props.subject;
    		if ("status" in $$props) status = $$props.status;
    		if ("apiVersion" in $$props) apiVersion = $$props.apiVersion;
    		if ("content" in $$props) content = $$props.content;
    		if ("timestamp" in $$props) timestamp = $$props.timestamp;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*id*/ 1) {
    			 render(id);
    		}
    	};

    	return [
    		id,
    		title,
    		subtitle,
    		imageUrl,
    		duration,
    		language,
    		rating,
    		reviewCount,
    		badge,
    		author,
    		mentorAvailable
    	];
    }

    class SyllabusItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { id: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SyllabusItem",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
    			console.warn("<SyllabusItem> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<SyllabusItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<SyllabusItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const syllabiByApp = async() => {
      const txIds = await arweave.arql(
        {
          op: 'equals',
          expr1: 'App-Name',
          expr2: APP_NAME
        }
      );
      return await fillTxIdsWithData(txIds);
    };
    const syllabiByAddress = async address => {
      const txIds = await arweave.arql(
        {
          op: 'and',
          expr1: {
            op: 'equals',
            expr1: 'from',
            expr2: address
          },
          expr2: {
            op: 'equals',
            expr1: 'App-Name',
            expr2: APP_NAME
          }
        }
      );
      return await fillTxIdsWithData(txIds);
    };
    const fillTxIdsWithData = async txIds => {
      if (!txIds.length) {
        return [];
      }
      let txs = [];
      await Promise.all(
        txIds.map(async txId => {
          const tx = await read(txId);
          if (tx.data.length >= 0) {
            txs = [...txs, tx];
          }
        })
      );
      return txs;
    };

    /* src/SyllabusGrid.svelte generated by Svelte v3.24.1 */
    const file$4 = "src/SyllabusGrid.svelte";

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (297:2) {:else}
    function create_else_block_1$2(ctx) {
    	let h3;
    	let t0;
    	let t1;
    	let t2;
    	let br;
    	let t3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text("Sorry, there are no syllabus for \"");
    			t1 = text(/*$searchStore*/ ctx[8]);
    			t2 = text("\"\n      ");
    			br = element("br");
    			t3 = text("\n      Try searching for something else");
    			add_location(br, file$4, 301, 6, 10214);
    			attr_dev(h3, "class", "px-6 py-6 text-gray-900 text-bold text-2xl md:text-2xl lg:text-3xl\n      xl:text-3xl");
    			add_location(h3, file$4, 297, 4, 10048);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, t1);
    			append_dev(h3, t2);
    			append_dev(h3, br);
    			append_dev(h3, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$searchStore*/ 256) set_data_dev(t1, /*$searchStore*/ ctx[8]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(297:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (278:2) {#if resultsSearch.length > 0}
    function create_if_block_39(ctx) {
    	let h3;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let section;
    	let current;
    	let each_value_1 = /*syllabiStore*/ ctx[0];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text("Search results for \"");
    			t1 = text(/*$searchStore*/ ctx[8]);
    			t2 = text("\"");
    			t3 = space();
    			section = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "px-6 py-6 text-gray-900 text-bold text-2xl");
    			add_location(h3, file$4, 278, 4, 9487);
    			attr_dev(section, "class", "mt-2 px-6 svelte-1x7h5ug");
    			add_location(section, file$4, 281, 4, 9599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, t1);
    			append_dev(h3, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, section, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*$searchStore*/ 256) set_data_dev(t1, /*$searchStore*/ ctx[8]);

    			if (dirty & /*syllabiStore, $searchStore*/ 257) {
    				each_value_1 = /*syllabiStore*/ ctx[0];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_39.name,
    		type: "if",
    		source: "(278:2) {#if resultsSearch.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (182:0) {#if $searchStore == ''}
    function create_if_block$3(ctx) {
    	let h3;
    	let t0;
    	let section;
    	let t1;
    	let if_block1_anchor;
    	let current;

    	function select_block_type_1(ctx, dirty) {
    		if (/*$badgesStore*/ ctx[6] == "All" && /*$languagesStore*/ ctx[5] == "All" && /*$mentorsStore*/ ctx[7] != "All" && /*$subjectsStore*/ ctx[4] == "All") return create_if_block_32;
    		if (/*$badgesStore*/ ctx[6] == "All" && /*$languagesStore*/ ctx[5] == "All" && /*$mentorsStore*/ ctx[7] != "All") return create_if_block_33;
    		if (/*$badgesStore*/ ctx[6] == "All" && /*$languagesStore*/ ctx[5] == "All") return create_if_block_34;
    		if (/*$subjectsStore*/ ctx[4] == "All" && /*$badgesStore*/ ctx[6] == "All" && /*$languagesStore*/ ctx[5] != "All") return create_if_block_35;
    		if (/*$subjectsStore*/ ctx[4] != "All" && /*$badgesStore*/ ctx[6] == "All" && /*$languagesStore*/ ctx[5] != "All") return create_if_block_36;
    		if (/*$subjectsStore*/ ctx[4] == "All" && /*$languagesStore*/ ctx[5] == "All" && /*$badgesStore*/ ctx[6] != "All") return create_if_block_37;
    		if (/*$subjectsStore*/ ctx[4] == "All" && /*$languagesStore*/ ctx[5] != "All" && /*$badgesStore*/ ctx[6] != "All") return create_if_block_38;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block0 = current_block_type(ctx);
    	let each_value = /*syllabiStore*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block1 = /*filtersEnded*/ ctx[2] && /*noFiltersApply*/ ctx[3] == 0 && create_if_block_1$3(ctx);

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			if_block0.c();
    			t0 = space();
    			section = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			attr_dev(h3, "class", "px-6 py-6 text-gray-900 text-bold text-2xl truncate");
    			add_location(h3, file$4, 182, 2, 5347);
    			attr_dev(section, "class", "mt-2 px-6 svelte-1x7h5ug");
    			add_location(section, file$4, 202, 2, 6580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			if_block0.m(h3, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, section, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			insert_dev(target, t1, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(h3, null);
    				}
    			}

    			if (dirty & /*syllabiStore, $mentorsStore, $badgesStore, $languagesStore, $subjectsStore*/ 241) {
    				each_value = /*syllabiStore*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*filtersEnded*/ ctx[2] && /*noFiltersApply*/ ctx[3] == 0) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_1$3(ctx);
    					if_block1.c();
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if_block0.d();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(182:0) {#if $searchStore == ''}",
    		ctx
    	});

    	return block;
    }

    // (284:8) {#if syllabus.title           .toLowerCase()           .includes(             $searchStore           ) || syllabus.subtitle             .toLowerCase()             .includes(               $searchStore             ) || syllabus.content.toLowerCase().includes($searchStore)}
    function create_if_block_40(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_40.name,
    		type: "if",
    		source: "(284:8) {#if syllabus.title           .toLowerCase()           .includes(             $searchStore           ) || syllabus.subtitle             .toLowerCase()             .includes(               $searchStore             ) || syllabus.content.toLowerCase().includes($searchStore)}",
    		ctx
    	});

    	return block;
    }

    // (283:6) {#each syllabiStore as syllabus}
    function create_each_block_1$1(ctx) {
    	let show_if = /*syllabus*/ ctx[11].title.toLowerCase().includes(/*$searchStore*/ ctx[8]) || /*syllabus*/ ctx[11].subtitle.toLowerCase().includes(/*$searchStore*/ ctx[8]) || /*syllabus*/ ctx[11].content.toLowerCase().includes(/*$searchStore*/ ctx[8]);
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block_40(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*syllabiStore, $searchStore*/ 257) show_if = /*syllabus*/ ctx[11].title.toLowerCase().includes(/*$searchStore*/ ctx[8]) || /*syllabus*/ ctx[11].subtitle.toLowerCase().includes(/*$searchStore*/ ctx[8]) || /*syllabus*/ ctx[11].content.toLowerCase().includes(/*$searchStore*/ ctx[8]);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*syllabiStore, $searchStore*/ 257) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_40(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(283:6) {#each syllabiStore as syllabus}",
    		ctx
    	});

    	return block;
    }

    // (198:4) {:else}
    function create_else_block$3(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let t7;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for ");
    			t2 = text(/*$badgesStore*/ ctx[6]);
    			t3 = space();
    			t4 = text(/*$languagesStore*/ ctx[5]);
    			t5 = space();
    			t6 = text(/*$subjectsStore*/ ctx[4]);
    			t7 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, t7, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    			if (dirty & /*$badgesStore*/ 64) set_data_dev(t2, /*$badgesStore*/ ctx[6]);
    			if (dirty & /*$languagesStore*/ 32) set_data_dev(t4, /*$languagesStore*/ ctx[5]);
    			if (dirty & /*$subjectsStore*/ 16) set_data_dev(t6, /*$subjectsStore*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(t7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(198:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (196:91) 
    function create_if_block_38(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for ");
    			t2 = text(/*$languagesStore*/ ctx[5]);
    			t3 = space();
    			t4 = text(/*$badgesStore*/ ctx[6]);
    			t5 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, t5, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    			if (dirty & /*$languagesStore*/ 32) set_data_dev(t2, /*$languagesStore*/ ctx[5]);
    			if (dirty & /*$badgesStore*/ 64) set_data_dev(t4, /*$badgesStore*/ ctx[6]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(t5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_38.name,
    		type: "if",
    		source: "(196:91) ",
    		ctx
    	});

    	return block;
    }

    // (194:91) 
    function create_if_block_37(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for ");
    			t2 = text(/*$badgesStore*/ ctx[6]);
    			t3 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    			if (dirty & /*$badgesStore*/ 64) set_data_dev(t2, /*$badgesStore*/ ctx[6]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_37.name,
    		type: "if",
    		source: "(194:91) ",
    		ctx
    	});

    	return block;
    }

    // (192:91) 
    function create_if_block_36(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for ");
    			t2 = text(/*$languagesStore*/ ctx[5]);
    			t3 = space();
    			t4 = text(/*$subjectsStore*/ ctx[4]);
    			t5 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, t5, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    			if (dirty & /*$languagesStore*/ 32) set_data_dev(t2, /*$languagesStore*/ ctx[5]);
    			if (dirty & /*$subjectsStore*/ 16) set_data_dev(t4, /*$subjectsStore*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(t5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_36.name,
    		type: "if",
    		source: "(192:91) ",
    		ctx
    	});

    	return block;
    }

    // (190:91) 
    function create_if_block_35(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for ");
    			t2 = text(/*$languagesStore*/ ctx[5]);
    			t3 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    			if (dirty & /*$languagesStore*/ 32) set_data_dev(t2, /*$languagesStore*/ ctx[5]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_35.name,
    		type: "if",
    		source: "(190:91) ",
    		ctx
    	});

    	return block;
    }

    // (188:64) 
    function create_if_block_34(ctx) {
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text(/*$subjectsStore*/ ctx[4]);
    			t1 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$subjectsStore*/ 16) set_data_dev(t0, /*$subjectsStore*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_34.name,
    		type: "if",
    		source: "(188:64) ",
    		ctx
    	});

    	return block;
    }

    // (186:90) 
    function create_if_block_33(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for ");
    			t2 = text(/*$subjectsStore*/ ctx[4]);
    			t3 = text(" Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    			if (dirty & /*$subjectsStore*/ 16) set_data_dev(t2, /*$subjectsStore*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_33.name,
    		type: "if",
    		source: "(186:90) ",
    		ctx
    	});

    	return block;
    }

    // (184:4) {#if $badgesStore == 'All' && $languagesStore == 'All' && $mentorsStore != 'All' && $subjectsStore == 'All'}
    function create_if_block_32(ctx) {
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text(/*$mentorsStore*/ ctx[7]);
    			t1 = text(" Mentors for Syllabi");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$mentorsStore*/ 128) set_data_dev(t0, /*$mentorsStore*/ ctx[7]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_32.name,
    		type: "if",
    		source: "(184:4) {#if $badgesStore == 'All' && $languagesStore == 'All' && $mentorsStore != 'All' && $subjectsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (235:51) 
    function create_if_block_17(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_18, create_if_block_25];
    	const if_blocks = [];

    	function select_block_type_10(ctx, dirty) {
    		if (/*$languagesStore*/ ctx[5] == "All") return 0;
    		if (/*syllabus*/ ctx[11].language == /*$languagesStore*/ ctx[5]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_10(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_10(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(235:51) ",
    		ctx
    	});

    	return block;
    }

    // (205:6) {#if $subjectsStore == 'All'}
    function create_if_block_2$2(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_3$2, create_if_block_10];
    	const if_blocks = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*$languagesStore*/ ctx[5] == "All") return 0;
    		if (/*syllabus*/ ctx[11].language == /*$languagesStore*/ ctx[5]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_3(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_3(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(205:6) {#if $subjectsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (250:55) 
    function create_if_block_25(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_26, create_if_block_29];
    	const if_blocks = [];

    	function select_block_type_14(ctx, dirty) {
    		if (/*$badgesStore*/ ctx[6] == "All") return 0;
    		if (/*syllabus*/ ctx[11].badge == /*$badgesStore*/ ctx[6]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_14(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_14(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25.name,
    		type: "if",
    		source: "(250:55) ",
    		ctx
    	});

    	return block;
    }

    // (236:8) {#if $languagesStore == 'All'}
    function create_if_block_18(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_19, create_if_block_22];
    	const if_blocks = [];

    	function select_block_type_11(ctx, dirty) {
    		if (/*$badgesStore*/ ctx[6] == "All") return 0;
    		if (/*syllabus*/ ctx[11].badge == /*$badgesStore*/ ctx[6]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_11(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_11(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(236:8) {#if $languagesStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (257:51) 
    function create_if_block_29(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_30, create_if_block_31];
    	const if_blocks = [];

    	function select_block_type_16(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_16(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_16(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_29.name,
    		type: "if",
    		source: "(257:51) ",
    		ctx
    	});

    	return block;
    }

    // (251:10) {#if $badgesStore == 'All'}
    function create_if_block_26(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_27, create_if_block_28];
    	const if_blocks = [];

    	function select_block_type_15(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_15(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_15(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26.name,
    		type: "if",
    		source: "(251:10) {#if $badgesStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (260:64) 
    function create_if_block_31(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_31.name,
    		type: "if",
    		source: "(260:64) ",
    		ctx
    	});

    	return block;
    }

    // (258:12) {#if $mentorsStore == 'All'}
    function create_if_block_30(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_30.name,
    		type: "if",
    		source: "(258:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (254:64) 
    function create_if_block_28(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28.name,
    		type: "if",
    		source: "(254:64) ",
    		ctx
    	});

    	return block;
    }

    // (252:12) {#if $mentorsStore == 'All'}
    function create_if_block_27(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27.name,
    		type: "if",
    		source: "(252:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (243:51) 
    function create_if_block_22(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_23, create_if_block_24];
    	const if_blocks = [];

    	function select_block_type_13(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_13(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_13(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22.name,
    		type: "if",
    		source: "(243:51) ",
    		ctx
    	});

    	return block;
    }

    // (237:10) {#if $badgesStore == 'All'}
    function create_if_block_19(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_20, create_if_block_21];
    	const if_blocks = [];

    	function select_block_type_12(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_12(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_12(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(237:10) {#if $badgesStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (246:64) 
    function create_if_block_24(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24.name,
    		type: "if",
    		source: "(246:64) ",
    		ctx
    	});

    	return block;
    }

    // (244:12) {#if $mentorsStore == 'All'}
    function create_if_block_23(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23.name,
    		type: "if",
    		source: "(244:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (240:64) 
    function create_if_block_21(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21.name,
    		type: "if",
    		source: "(240:64) ",
    		ctx
    	});

    	return block;
    }

    // (238:12) {#if $mentorsStore == 'All'}
    function create_if_block_20(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(238:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (220:55) 
    function create_if_block_10(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_11, create_if_block_14];
    	const if_blocks = [];

    	function select_block_type_7(ctx, dirty) {
    		if (/*$badgesStore*/ ctx[6] == "All") return 0;
    		if (/*syllabus*/ ctx[11].badge == /*$badgesStore*/ ctx[6]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_7(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_7(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(220:55) ",
    		ctx
    	});

    	return block;
    }

    // (206:8) {#if $languagesStore == 'All'}
    function create_if_block_3$2(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_4$1, create_if_block_7];
    	const if_blocks = [];

    	function select_block_type_4(ctx, dirty) {
    		if (/*$badgesStore*/ ctx[6] == "All") return 0;
    		if (/*syllabus*/ ctx[11].badge == /*$badgesStore*/ ctx[6]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_4(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_4(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(206:8) {#if $languagesStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (227:51) 
    function create_if_block_14(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_15, create_if_block_16];
    	const if_blocks = [];

    	function select_block_type_9(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_9(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_9(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(227:51) ",
    		ctx
    	});

    	return block;
    }

    // (221:10) {#if $badgesStore == 'All'}
    function create_if_block_11(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_12, create_if_block_13];
    	const if_blocks = [];

    	function select_block_type_8(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_8(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_8(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(221:10) {#if $badgesStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (230:64) 
    function create_if_block_16(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(230:64) ",
    		ctx
    	});

    	return block;
    }

    // (228:12) {#if $mentorsStore == 'All'}
    function create_if_block_15(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(228:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (224:64) 
    function create_if_block_13(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(224:64) ",
    		ctx
    	});

    	return block;
    }

    // (222:12) {#if $mentorsStore == 'All'}
    function create_if_block_12(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(222:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (213:51) 
    function create_if_block_7(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_8, create_if_block_9];
    	const if_blocks = [];

    	function select_block_type_6(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_6(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_6(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(213:51) ",
    		ctx
    	});

    	return block;
    }

    // (207:10) {#if $badgesStore == 'All'}
    function create_if_block_4$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_5, create_if_block_6];
    	const if_blocks = [];

    	function select_block_type_5(ctx, dirty) {
    		if (/*$mentorsStore*/ ctx[7] == "All") return 0;
    		if (/*syllabus*/ ctx[11].mentorAvailable == /*$mentorsStore*/ ctx[7]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_5(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_5(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(207:10) {#if $badgesStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (216:64) 
    function create_if_block_9(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(216:64) ",
    		ctx
    	});

    	return block;
    }

    // (214:12) {#if $mentorsStore == 'All'}
    function create_if_block_8(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(214:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (210:64) 
    function create_if_block_6(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(210:64) ",
    		ctx
    	});

    	return block;
    }

    // (208:12) {#if $mentorsStore == 'All'}
    function create_if_block_5(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[11].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiStore*/ 1) syllabusitem_changes.id = /*syllabus*/ ctx[11].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(208:12) {#if $mentorsStore == 'All'}",
    		ctx
    	});

    	return block;
    }

    // (204:4) {#each syllabiStore as syllabus}
    function create_each_block$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$2, create_if_block_17];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$subjectsStore*/ ctx[4] == "All") return 0;
    		if (/*syllabus*/ ctx[11].subject == /*$subjectsStore*/ ctx[4]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_2(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(204:4) {#each syllabiStore as syllabus}",
    		ctx
    	});

    	return block;
    }

    // (268:2) {#if filtersEnded && noFiltersApply == 0}
    function create_if_block_1$3(ctx) {
    	let h3;
    	let t0;
    	let br;
    	let t1;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text("Sorry, there are no syllabus for these filters\n      ");
    			br = element("br");
    			t1 = text("\n      Try filter for something else");
    			add_location(br, file$4, 272, 6, 9381);
    			attr_dev(h3, "class", "px-6 py-6 text-gray-900 text-bold text-xl md:text-xl lg:text-2xl\n      xl:text-2xl");
    			add_location(h3, file$4, 268, 4, 9220);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, br);
    			append_dev(h3, t1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(268:2) {#if filtersEnded && noFiltersApply == 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$3, create_if_block_39, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$searchStore*/ ctx[8] == "") return 0;
    		if (/*resultsSearch*/ ctx[1].length > 0) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $subjectsStore;
    	let $languagesStore;
    	let $badgesStore;
    	let $mentorsStore;
    	let $searchStore;
    	validate_store(subjectsStore, "subjectsStore");
    	component_subscribe($$self, subjectsStore, $$value => $$invalidate(4, $subjectsStore = $$value));
    	validate_store(languagesStore, "languagesStore");
    	component_subscribe($$self, languagesStore, $$value => $$invalidate(5, $languagesStore = $$value));
    	validate_store(badgesStore, "badgesStore");
    	component_subscribe($$self, badgesStore, $$value => $$invalidate(6, $badgesStore = $$value));
    	validate_store(mentorsStore, "mentorsStore");
    	component_subscribe($$self, mentorsStore, $$value => $$invalidate(7, $mentorsStore = $$value));
    	validate_store(searchStore, "searchStore");
    	component_subscribe($$self, searchStore, $$value => $$invalidate(8, $searchStore = $$value));
    	let { syllabiStore } = $$props;
    	let syllabiSearch = [];
    	let resultsSearch = [];
    	let resultsFilter = [1];
    	let filtersEnded = false;

    	onMount(async () => {
    		$$invalidate(9, syllabiSearch = await syllabiByApp());
    	});

    	const writable_props = ["syllabiStore"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SyllabusGrid> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SyllabusGrid", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("syllabiStore" in $$props) $$invalidate(0, syllabiStore = $$props.syllabiStore);
    	};

    	$$self.$capture_state = () => ({
    		SyllabusItem,
    		searchStore,
    		subjectsStore,
    		languagesStore,
    		badgesStore,
    		mentorsStore,
    		syllabiStore,
    		onMount,
    		syllabiByApp,
    		syllabiSearch,
    		resultsSearch,
    		resultsFilter,
    		filtersEnded,
    		noFiltersApply,
    		$subjectsStore,
    		$languagesStore,
    		$badgesStore,
    		$mentorsStore,
    		$searchStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("syllabiStore" in $$props) $$invalidate(0, syllabiStore = $$props.syllabiStore);
    		if ("syllabiSearch" in $$props) $$invalidate(9, syllabiSearch = $$props.syllabiSearch);
    		if ("resultsSearch" in $$props) $$invalidate(1, resultsSearch = $$props.resultsSearch);
    		if ("resultsFilter" in $$props) $$invalidate(10, resultsFilter = $$props.resultsFilter);
    		if ("filtersEnded" in $$props) $$invalidate(2, filtersEnded = $$props.filtersEnded);
    		if ("noFiltersApply" in $$props) $$invalidate(3, noFiltersApply = $$props.noFiltersApply);
    	};

    	let noFiltersApply;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*syllabiSearch, $subjectsStore, $languagesStore, $badgesStore, $mentorsStore*/ 752) {
    			 $$invalidate(10, resultsFilter = syllabiSearch.filter(syllabusSearch => {
    				const subject = syllabusSearch.tags["Syllabus-Subject"];
    				const language = syllabusSearch.tags["Syllabus-Language"];
    				const badge = syllabusSearch.tags["Syllabus-Badge"];
    				const mentorAvailable = syllabusSearch.tags["Syllabus-Mentor"];

    				if ($subjectsStore == "All") {
    					if ($languagesStore == "All") {
    						if ($badgesStore == "All") {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return "All";
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return mentorAvailable.includes($mentorsStore);
    							}
    						} else {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return badge.includes($badgesStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return badge.includes($badgesStore) && mentorAvailable.includes($mentorsStore);
    							}
    						}
    					} else {
    						if ($badgesStore == "All") {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return language.includes($languagesStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return language.includes($languagesStore) && mentorAvailable.includes($mentorsStore);
    							}
    						} else {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return language.includes($languagesStore) && badge.includes($badgesStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return language.includes($languagesStore) && badge.includes($badgesStore) && mentorAvailable.includes($mentorsStore);
    							}
    						}
    					}
    				} else {
    					if ($languagesStore == "All") {
    						if ($badgesStore == "All") {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && mentorAvailable.includes($mentorsStore);
    							}
    						} else {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && badge.includes($badgesStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && badge.includes($badgesStore) && mentorAvailable.includes($mentorsStore);
    							}
    						}
    					} else {
    						if ($badgesStore == "All") {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && language.includes($languagesStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && language.includes($languagesStore) && mentorAvailable.includes($mentorsStore);
    							}
    						} else {
    							if ($mentorsStore == "All") {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && language.includes($languagesStore) && badge.includes($badgesStore);
    							} else {
    								$$invalidate(2, filtersEnded = true);
    								return subject.includes($subjectsStore) && language.includes($languagesStore) && badge.includes($badgesStore) && mentorAvailable.includes($mentorsStore);
    							}
    						}
    					}
    				}
    			}));
    		}

    		if ($$self.$$.dirty & /*resultsFilter*/ 1024) {
    			 $$invalidate(3, noFiltersApply = resultsFilter.length);
    		}

    		if ($$self.$$.dirty & /*syllabiSearch, $searchStore*/ 768) {
    			 $$invalidate(1, resultsSearch = syllabiSearch.filter(syllabusSearch => {
    				const title = syllabusSearch.tags["Syllabus-Title"].toLowerCase();
    				const subtitle = syllabusSearch.tags["Syllabus-Subtitle"].toLowerCase();
    				const content = syllabusSearch.data.toLowerCase();
    				return title.includes($searchStore) || subtitle.includes($searchStore) || content.includes($searchStore);
    			}));
    		}
    	};

    	return [
    		syllabiStore,
    		resultsSearch,
    		filtersEnded,
    		noFiltersApply,
    		$subjectsStore,
    		$languagesStore,
    		$badgesStore,
    		$mentorsStore,
    		$searchStore
    	];
    }

    class SyllabusGrid extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { syllabiStore: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SyllabusGrid",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*syllabiStore*/ ctx[0] === undefined && !("syllabiStore" in props)) {
    			console.warn("<SyllabusGrid> was created without expected prop 'syllabiStore'");
    		}
    	}

    	get syllabiStore() {
    		throw new Error("<SyllabusGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set syllabiStore(value) {
    		throw new Error("<SyllabusGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const documentTitle = (prefix = '') => {
      let title = prefix ? `${prefix} - ` : '';
      title += 'SyllabusWeave';
      document.title = title;
    };

    /* src/Home.svelte generated by Svelte v3.24.1 */

    function create_fragment$5(ctx) {
    	let syllabusgrid;
    	let current;

    	syllabusgrid = new SyllabusGrid({
    			props: { syllabiStore: /*$syllabiStore*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusgrid.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusgrid, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const syllabusgrid_changes = {};
    			if (dirty & /*$syllabiStore*/ 1) syllabusgrid_changes.syllabiStore = /*$syllabiStore*/ ctx[0];
    			syllabusgrid.$set(syllabusgrid_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusgrid.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusgrid.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusgrid, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $syllabiStore;
    	validate_store(syllabiStore, "syllabiStore");
    	component_subscribe($$self, syllabiStore, $$value => $$invalidate(0, $syllabiStore = $$value));
    	let tempSyllabi = [];
    	let syllabi = [];

    	onMount(async () => {
    		tempSyllabi = await syllabiByApp();

    		for (let i = 0; i < tempSyllabi.length; i++) {
    			let item = {
    				id: tempSyllabi[i].id,
    				title: tempSyllabi[i].tags["Syllabus-Title"],
    				subtitle: tempSyllabi[i].tags["Syllabus-Subtitle"],
    				imageUrl: tempSyllabi[i].tags["Syllabus-ImageUrl"],
    				duration: tempSyllabi[i].tags["Syllabus-Duration"],
    				language: tempSyllabi[i].tags["Syllabus-Language"],
    				rating: tempSyllabi[i].tags["Syllabus-Rating"],
    				reviewCount: tempSyllabi[i].tags["Syllabus-ReviewCount"],
    				isFavorite: tempSyllabi[i].tags["Syllabus-IsFavorite"],
    				badge: tempSyllabi[i].tags["Syllabus-Badge"],
    				author: tempSyllabi[i].tags["Syllabus-Author"],
    				mentorAvailable: tempSyllabi[i].tags["Syllabus-Mentor"],
    				price: tempSyllabi[i].tags["Syllabus-Price"],
    				subject: tempSyllabi[i].tags["Syllabus-Subject"],
    				status: tempSyllabi[i].tags["Syllabus-Status"],
    				apiVersion: tempSyllabi[i].tags["Syllabus-API"],
    				timestamp: tempSyllabi[i].tags["Syllabus-Timestamp"],
    				content: tempSyllabi[i].data
    			};

    			syllabi.push(item);
    		}

    		syllabiStore.set(syllabi);
    		documentTitle();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Home", $$slots, []);

    	$$self.$capture_state = () => ({
    		onMount,
    		SyllabusGrid,
    		documentTitle,
    		syllabiByApp,
    		syllabiStore,
    		tempSyllabi,
    		syllabi,
    		$syllabiStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("tempSyllabi" in $$props) tempSyllabi = $$props.tempSyllabi;
    		if ("syllabi" in $$props) syllabi = $$props.syllabi;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$syllabiStore];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /**
     * Helpers.
     */

    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    var ms = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }

    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */

    function setup(env) {
    	createDebug.debug = createDebug;
    	createDebug.default = createDebug;
    	createDebug.coerce = coerce;
    	createDebug.disable = disable;
    	createDebug.enable = enable;
    	createDebug.enabled = enabled;
    	createDebug.humanize = ms;

    	Object.keys(env).forEach(key => {
    		createDebug[key] = env[key];
    	});

    	/**
    	* Active `debug` instances.
    	*/
    	createDebug.instances = [];

    	/**
    	* The currently active debug mode names, and names to skip.
    	*/

    	createDebug.names = [];
    	createDebug.skips = [];

    	/**
    	* Map of special "%n" handling functions, for the debug "format" argument.
    	*
    	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    	*/
    	createDebug.formatters = {};

    	/**
    	* Selects a color for a debug namespace
    	* @param {String} namespace The namespace string for the for the debug instance to be colored
    	* @return {Number|String} An ANSI color code for the given namespace
    	* @api private
    	*/
    	function selectColor(namespace) {
    		let hash = 0;

    		for (let i = 0; i < namespace.length; i++) {
    			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
    			hash |= 0; // Convert to 32bit integer
    		}

    		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    	}
    	createDebug.selectColor = selectColor;

    	/**
    	* Create a debugger with the given `namespace`.
    	*
    	* @param {String} namespace
    	* @return {Function}
    	* @api public
    	*/
    	function createDebug(namespace) {
    		let prevTime;

    		function debug(...args) {
    			// Disabled?
    			if (!debug.enabled) {
    				return;
    			}

    			const self = debug;

    			// Set `diff` timestamp
    			const curr = Number(new Date());
    			const ms = curr - (prevTime || curr);
    			self.diff = ms;
    			self.prev = prevTime;
    			self.curr = curr;
    			prevTime = curr;

    			args[0] = createDebug.coerce(args[0]);

    			if (typeof args[0] !== 'string') {
    				// Anything else let's inspect with %O
    				args.unshift('%O');
    			}

    			// Apply any `formatters` transformations
    			let index = 0;
    			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
    				// If we encounter an escaped % then don't increase the array index
    				if (match === '%%') {
    					return match;
    				}
    				index++;
    				const formatter = createDebug.formatters[format];
    				if (typeof formatter === 'function') {
    					const val = args[index];
    					match = formatter.call(self, val);

    					// Now we need to remove `args[index]` since it's inlined in the `format`
    					args.splice(index, 1);
    					index--;
    				}
    				return match;
    			});

    			// Apply env-specific formatting (colors, etc.)
    			createDebug.formatArgs.call(self, args);

    			const logFn = self.log || createDebug.log;
    			logFn.apply(self, args);
    		}

    		debug.namespace = namespace;
    		debug.enabled = createDebug.enabled(namespace);
    		debug.useColors = createDebug.useColors();
    		debug.color = selectColor(namespace);
    		debug.destroy = destroy;
    		debug.extend = extend;
    		// Debug.formatArgs = formatArgs;
    		// debug.rawLog = rawLog;

    		// env-specific initialization logic for debug instances
    		if (typeof createDebug.init === 'function') {
    			createDebug.init(debug);
    		}

    		createDebug.instances.push(debug);

    		return debug;
    	}

    	function destroy() {
    		const index = createDebug.instances.indexOf(this);
    		if (index !== -1) {
    			createDebug.instances.splice(index, 1);
    			return true;
    		}
    		return false;
    	}

    	function extend(namespace, delimiter) {
    		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    		newDebug.log = this.log;
    		return newDebug;
    	}

    	/**
    	* Enables a debug mode by namespaces. This can include modes
    	* separated by a colon and wildcards.
    	*
    	* @param {String} namespaces
    	* @api public
    	*/
    	function enable(namespaces) {
    		createDebug.save(namespaces);

    		createDebug.names = [];
    		createDebug.skips = [];

    		let i;
    		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    		const len = split.length;

    		for (i = 0; i < len; i++) {
    			if (!split[i]) {
    				// ignore empty strings
    				continue;
    			}

    			namespaces = split[i].replace(/\*/g, '.*?');

    			if (namespaces[0] === '-') {
    				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    			} else {
    				createDebug.names.push(new RegExp('^' + namespaces + '$'));
    			}
    		}

    		for (i = 0; i < createDebug.instances.length; i++) {
    			const instance = createDebug.instances[i];
    			instance.enabled = createDebug.enabled(instance.namespace);
    		}
    	}

    	/**
    	* Disable debug output.
    	*
    	* @return {String} namespaces
    	* @api public
    	*/
    	function disable() {
    		const namespaces = [
    			...createDebug.names.map(toNamespace),
    			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
    		].join(',');
    		createDebug.enable('');
    		return namespaces;
    	}

    	/**
    	* Returns true if the given mode name is enabled, false otherwise.
    	*
    	* @param {String} name
    	* @return {Boolean}
    	* @api public
    	*/
    	function enabled(name) {
    		if (name[name.length - 1] === '*') {
    			return true;
    		}

    		let i;
    		let len;

    		for (i = 0, len = createDebug.skips.length; i < len; i++) {
    			if (createDebug.skips[i].test(name)) {
    				return false;
    			}
    		}

    		for (i = 0, len = createDebug.names.length; i < len; i++) {
    			if (createDebug.names[i].test(name)) {
    				return true;
    			}
    		}

    		return false;
    	}

    	/**
    	* Convert regexp to namespace
    	*
    	* @param {RegExp} regxep
    	* @return {String} namespace
    	* @api private
    	*/
    	function toNamespace(regexp) {
    		return regexp.toString()
    			.substring(2, regexp.toString().length - 2)
    			.replace(/\.\*\?$/, '*');
    	}

    	/**
    	* Coerce `val`.
    	*
    	* @param {Mixed} val
    	* @return {Mixed}
    	* @api private
    	*/
    	function coerce(val) {
    		if (val instanceof Error) {
    			return val.stack || val.message;
    		}
    		return val;
    	}

    	createDebug.enable(createDebug.load());

    	return createDebug;
    }

    var common$1 = setup;

    var browser = createCommonjsModule(function (module, exports) {
    /* eslint-env browser */

    /**
     * This is the web browser implementation of `debug()`.
     */

    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();

    /**
     * Colors.
     */

    exports.colors = [
    	'#0000CC',
    	'#0000FF',
    	'#0033CC',
    	'#0033FF',
    	'#0066CC',
    	'#0066FF',
    	'#0099CC',
    	'#0099FF',
    	'#00CC00',
    	'#00CC33',
    	'#00CC66',
    	'#00CC99',
    	'#00CCCC',
    	'#00CCFF',
    	'#3300CC',
    	'#3300FF',
    	'#3333CC',
    	'#3333FF',
    	'#3366CC',
    	'#3366FF',
    	'#3399CC',
    	'#3399FF',
    	'#33CC00',
    	'#33CC33',
    	'#33CC66',
    	'#33CC99',
    	'#33CCCC',
    	'#33CCFF',
    	'#6600CC',
    	'#6600FF',
    	'#6633CC',
    	'#6633FF',
    	'#66CC00',
    	'#66CC33',
    	'#9900CC',
    	'#9900FF',
    	'#9933CC',
    	'#9933FF',
    	'#99CC00',
    	'#99CC33',
    	'#CC0000',
    	'#CC0033',
    	'#CC0066',
    	'#CC0099',
    	'#CC00CC',
    	'#CC00FF',
    	'#CC3300',
    	'#CC3333',
    	'#CC3366',
    	'#CC3399',
    	'#CC33CC',
    	'#CC33FF',
    	'#CC6600',
    	'#CC6633',
    	'#CC9900',
    	'#CC9933',
    	'#CCCC00',
    	'#CCCC33',
    	'#FF0000',
    	'#FF0033',
    	'#FF0066',
    	'#FF0099',
    	'#FF00CC',
    	'#FF00FF',
    	'#FF3300',
    	'#FF3333',
    	'#FF3366',
    	'#FF3399',
    	'#FF33CC',
    	'#FF33FF',
    	'#FF6600',
    	'#FF6633',
    	'#FF9900',
    	'#FF9933',
    	'#FFCC00',
    	'#FFCC33'
    ];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    // eslint-disable-next-line complexity
    function useColors() {
    	// NB: In an Electron preload script, document will be defined but not fully
    	// initialized. Since we know we're in Chrome, we'll just detect this case
    	// explicitly
    	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    		return true;
    	}

    	// Internet Explorer and Edge do not support colors.
    	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    		return false;
    	}

    	// Is webkit? http://stackoverflow.com/a/16459606/376773
    	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    		// Is firebug? http://stackoverflow.com/a/398120/376773
    		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    		// Is firefox >= v31?
    		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    		// Double check webkit in userAgent just in case we are in a worker
    		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    }

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
    	args[0] = (this.useColors ? '%c' : '') +
    		this.namespace +
    		(this.useColors ? ' %c' : ' ') +
    		args[0] +
    		(this.useColors ? '%c ' : ' ') +
    		'+' + module.exports.humanize(this.diff);

    	if (!this.useColors) {
    		return;
    	}

    	const c = 'color: ' + this.color;
    	args.splice(1, 0, c, 'color: inherit');

    	// The final "%c" is somewhat tricky, because there could be other
    	// arguments passed either before or after the %c, so we need to
    	// figure out the correct index to insert the CSS into
    	let index = 0;
    	let lastC = 0;
    	args[0].replace(/%[a-zA-Z%]/g, match => {
    		if (match === '%%') {
    			return;
    		}
    		index++;
    		if (match === '%c') {
    			// We only are interested in the *last* %c
    			// (the user may have provided their own)
    			lastC = index;
    		}
    	});

    	args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */
    function log(...args) {
    	// This hackery is required for IE8/9, where
    	// the `console.log` function doesn't have 'apply'
    	return typeof console === 'object' &&
    		console.log &&
    		console.log(...args);
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
    	try {
    		if (namespaces) {
    			exports.storage.setItem('debug', namespaces);
    		} else {
    			exports.storage.removeItem('debug');
    		}
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
    	let r;
    	try {
    		r = exports.storage.getItem('debug');
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}

    	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    	if (!r && typeof process !== 'undefined' && 'env' in process) {
    		r = process.env.DEBUG;
    	}

    	return r;
    }

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
    	try {
    		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    		// The Browser also has localStorage in the global context.
    		return localStorage;
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}
    }

    module.exports = common$1(exports);

    const {formatters} = module.exports;

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    formatters.j = function (v) {
    	try {
    		return JSON.stringify(v);
    	} catch (error) {
    		return '[UnexpectedJSONParseError]: ' + error.message;
    	}
    };
    });
    var browser_1 = browser.log;
    var browser_2 = browser.formatArgs;
    var browser_3 = browser.save;
    var browser_4 = browser.load;
    var browser_5 = browser.useColors;
    var browser_6 = browser.storage;
    var browser_7 = browser.colors;

    /**
     *
     * Wrap any Promise returning function with retries and backoff.
     * Sensible defaults for typical interactive networking
     * scenarios, such as browser requests.
     *
     * Default settings will result in delays of (in ms):
     * 250, 2000, 6750, 16000, 31250
     *
     * @param opts           - options
     * @param opts.tries     - default 6, Maximum attempts, including initial try.
     * @param opts.startMs   - default 250, statring delay after the first failure
     * @param opts.pow       - default 3, Backoff power. float values are fine.
     * @param opts.maxMs     - default 300000 (5 minutes), upper limit on the delay. Won't be reached with default settings.
     * @param opts.jitter    - default 0.25, amount of jitter to apply. Removes a random value (0-N*delay) from delay.
     * @param func           - the function to wrap.
     *
     */
    function retryWithBackoff(optsOrFn, fn) {
        if (!fn && typeof optsOrFn === 'function') {
            fn = optsOrFn;
            optsOrFn = undefined;
        }
        // somehow even with this, fn will be " T | undefined " in the async function below. 
        if (!fn || typeof fn !== 'function') {
            throw new Error('Invalid arguments');
        }
        const log = browser('promises-tho:retry-with-backoff');
        const { tries, startMs, pow, maxMs, jitter } = Object.assign({ tries: 6, startMs: 250, pow: 3, maxMs: 300000, jitter: 0.25 }, optsOrFn);
        return async function (...args) {
            let errors = 0;
            while (true) {
                try {
                    return await fn(...args);
                }
                catch (e) {
                    if (++errors === tries) {
                        throw (e);
                    }
                    else {
                        let delay = Math.min(maxMs, startMs * Math.pow(errors, pow));
                        delay = delay - (Math.random() * delay * jitter);
                        console.error(e);
                        log(`${fn.name} failed, retrying in ${delay.toFixed(0)}ms`);
                        await new Promise(res => setTimeout(res, delay));
                    }
                }
            }
        };
    }

    /**
     * Wraps a Promise returning function that you want to call in batches.
     * This version will only return once the entire batch is complete.
     *
     * Note: fn must take exactly one argument. If you need to use a function taking
     * multiple arguments, make a small wrapper.
     *
     * @param opts options
     * @param opts.batchSize default 4. the number of concurrent executions of fn
     * @param opts.batchDelayMs default 150. milliseconds to delay between batches. Only applied from the 2d batch onwards.
     * @param fn the function to wrap
     *
     */
    function batch(optsOrFn, fn, opts) {
        if (!fn) {
            fn = optsOrFn;
            optsOrFn = undefined;
        }
        const log = browser('promises-tho:batch');
        const options = Object.assign({
            batchSize: 4,
            batchDelayMs: 150,
        }, optsOrFn);
        return async function (requests) {
            const context = {
                pending: requests,
                completed: [],
            };
            const t0 = Date.now();
            while (context.pending.length > 0) {
                const t1 = Date.now();
                const batch = context.pending.slice(0, options.batchSize).map(x => fn(x));
                const results = await Promise.all(batch);
                context.completed = context.completed.concat(results);
                context.pending = context.pending.slice(options.batchSize);
                log(`Batch of ${results.length} took ${(Date.now() - t1) / 1000} seconds`);
                if (context.pending.length > 0) {
                    const delayMs = options.batchDelayMs;
                    log(`Delaying ${delayMs / 1000} seconds between batches`);
                    await new Promise(res => setTimeout(res, delayMs));
                }
            }
            log(`Total Batch of ${context.completed.length} took ${(Date.now() - t0) / 1000} seconds`);
            return context.completed;
        };
    }

    /**
     * Wraps a promise returning function and returns a default value
     * when it errors.
     *
     * @param defval The default value to return if the promise function errors
     * @param func The promise returning function.
     */
    function softFailWith(defval, func) {
        return (...args) => func(...args).catch(() => defval);
    }

    function getTag(tx, name) {
        let tags = tx.get('tags');
        for (let i = 0; i < tags.length; i++) {
            // decoding tags can throw on invalid utf8 data.
            try {
                if (tags[i].get('name', { decode: true, string: true }) == name)
                    return tags[i].get('value', { decode: true, string: true });
            }
            catch (e) {
            }
        }
        return false;
    }
    /**
     * Unpacks string tags from a Tx and puts in a KV map
     * Tags that appear multiple times will be converted to an
     * array of string values, ordered as they appear in the tx.
     *
     * @param tx
     */
    function unpackTags(tx) {
        let tags = tx.get('tags');
        let result = {};
        for (let i = 0; i < tags.length; i++) {
            try {
                const name = tags[i].get('name', { decode: true, string: true });
                const value = tags[i].get('value', { decode: true, string: true });
                if (!result.hasOwnProperty(name)) {
                    result[name] = value;
                    continue;
                }
                result[name] = [...result[name], value];
            }
            catch (e) {
                // ignore tags with invalid utf-8 strings in key or value.
            }
        }
        return result;
    }
    function arrayToHex(arr) {
        let str = '';
        for (let i = 0; i < arr.length; i++) {
            str += ("0" + arr[i].toString(16)).slice(-2);
        }
        return str;
    }

    /**
     * Executes a single interaction against the contract source code and state, and
     * returns the new state, or 'false' if there was an error.
     *
     * Callers should replay all interactions in the correct order to get the correct
     * state to execute against.
     *
     * @param contractSrc   the source code of the contract
     * @param input         the input interaction, should be a plain Js object
     * @param state         the current state of the contract
     * @param caller        the wallet address of the caller who is interacting with the contract
     */
    async function execute(handler, interaction, state) {
        try {
            const result = await handler(state, interaction);
            if (result && (result.state || result.result)) {
                return {
                    type: 'ok',
                    result: result.result,
                    state: result.state || state
                };
            }
            // Will be caught below as unexpected exception.
            throw new Error(`Unexpected result from contract: ${JSON.stringify(result)}`);
        }
        catch (err) {
            if (err.name === 'ContractError') {
                return {
                    type: 'error',
                    result: err.message,
                    state: state,
                };
            }
            return {
                type: 'exception',
                result: `${(err && err.stack) || (err && err.message)}`,
                state: state,
            };
        }
    }

    /**
     * Queries all interaction transactions and replays a contract to its latest state.
     *
     * If height is provided, will replay only to that block height.
     *
     * @param arweave     an Arweave client instance
     * @param contractId  the Transaction Id of the contract
     * @param height      if specified the contract will be replayed only to this block height
     */
    async function readContract(arweave, contractId, height = Number.POSITIVE_INFINITY) {
        const contractInfo = await loadContract(arweave, contractId);
        let state;
        try {
            state = JSON.parse(contractInfo.initState);
        }
        catch (e) {
            throw new Error(`Unable to parse initial state for contract: ${contractId}`);
        }
        // Load all the interaction txs relevant to this contract. 
        // This can be made a lot cleaner with some GraphQL features, 
        // (block info in results, pagination)
        // but for now, we stick with arql and use some utils to help 
        // with concurency and retry on errors. 
        // (we can be firing off thousands of requests here) 
        const arql = {
            op: 'and',
            expr1: {
                op: 'equals',
                expr1: 'App-Name',
                expr2: 'SmartWeaveAction',
            },
            expr2: {
                op: 'equals',
                expr1: 'Contract',
                expr2: contractId
            }
        };
        let transactions = await arweave.arql(arql);
        const getTxInfoFn = retryWithBackoff({ tries: 3, startMs: 1000 }, (id) => getFullTxInfo(arweave, id));
        const batcher = batch({ batchDelayMs: 50, batchSize: 3 }, softFailWith(undefined, getTxInfoFn));
        console.log(`Query returned ${transactions.length} interactions`);
        let unconfirmed = await batcher(transactions);
        console.log(`Recieved info for ${unconfirmed.length} transactions`);
        // Filter out txs that are not confirmed yet, not found, 
        // or are below the height we are replaying to.
        let txInfos = unconfirmed
            .filter(x => x &&
            x.info.confirmed &&
            x.info.confirmed.block_height <= height);
        console.log(`Replaying ${txInfos.length} confirmed interactions`);
        txInfos.sort((a, b) => a.sortKey.localeCompare(b.sortKey));
        const { handler, swGlobal } = contractInfo;
        for (let i = 0; i < txInfos.length; i++) {
            let input;
            try {
                input = getTag(txInfos[i].tx, 'Input');
                input = JSON.parse(input);
            }
            catch (e) { }
            if (!input) {
                console.warn(`Skipping tx with missing or invalid Input tag - ${txInfos[i].id}`);
                continue;
            }
            const interaction = {
                input: input,
                caller: txInfos[i].from,
            };
            swGlobal._activeTx = txInfos[i];
            const result = await execute(handler, interaction, state);
            if (result.type === 'exception') {
                console.warn(`${result.result}`);
                console.warn(`Executing of interaction: ${txInfos[i].id} threw exception.`);
            }
            if (result.type === 'error') {
                console.warn(`${result.result}`);
                console.warn(`Executing of interaction: ${txInfos[i].id} returned error.`);
            }
            state = result.state;
        }
        return state;
    }
    // This gets the full Tx Info, and calcutes a sort key.
    // It needs to get the block_height and indep_hash from
    // the status endpoint as well as the tx itself. Returns 
    // undefined if the transactions is not confirmed. 
    async function getFullTxInfo(arweave, id) {
        const [tx, info] = await Promise.all([
            arweave.transactions.get(id).catch(e => {
                if (e.type === 'TX_PENDING') {
                    return undefined;
                }
                throw (e);
            }),
            arweave.transactions.getStatus(id)
        ]);
        if (!tx || !info || !info.confirmed) {
            return undefined;
        }
        // Construct a string that will lexographically sort.
        // { block_height, sha256(block_indep_hash + txid) }
        // pad block height to 12 digits and convert hash value 
        // to a hex string.
        const blockHashBytes = arweave.utils.b64UrlToBuffer(info.confirmed.block_indep_hash);
        const txIdBytes = arweave.utils.b64UrlToBuffer(id);
        const concatted = arweave.utils.concatBuffers([blockHashBytes, txIdBytes]);
        const hashed = arrayToHex(await arweave.crypto.hash(concatted));
        const block_height = `000000${info.confirmed.block_height}`.slice(-12);
        const sortKey = `${block_height},${hashed}`;
        return { tx, info, id: tx.id, sortKey, from: await arweave.wallets.ownerToAddress(tx.owner) };
    }

    /**
     *
     * This class is be exposed as a global for contracts
     * as 'SmartWeave' and provides an API for getting further
     * information or using utility and crypto functions from
     * inside the contracts execution.
     *
     * It provides an api:
     *
     * - SmartWeave.transaction.id
     * - SmartWeave.transaction.reward
     * - SmartWeave.block.height
     * - etc
     *
     * and access to some of the arweave utils:
     * - SmartWeave.arweave.utils
     * - SmartWeave.arweave.crypto
     * - SmartWeave.arweave.wallets
     * - SmartWeave.arweave.ar
     *
     */
    class SmartWeaveGlobal {
        constructor(arweave) {
            this.arweave = {
                ar: arweave.ar,
                utils: arweave.utils,
                wallets: arweave.wallets,
                crypto: arweave.crypto,
            };
            this.transaction = new Transaction(this);
            this.block = new Block(this);
            this.contracts = {
                readContractState: (contractId, height) => readContract(arweave, contractId, height || (this._isDryRunning ? Number.POSITIVE_INFINITY : this.block.height))
            };
        }
        get _isDryRunning() {
            return !this._activeTx;
        }
    }
    class Transaction {
        constructor(global) {
            this.global = global;
        }
        get id() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.id;
        }
        get owner() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.tx.owner;
        }
        get target() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.tx.target;
        }
        get tags() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return unpackTags(this.global._activeTx.tx);
        }
        get quantity() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.tx.quantity;
        }
        get reward() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.tx.reward;
        }
    }
    class Block {
        constructor(global) {
            this.global = global;
        }
        get height() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.info.confirmed.block_height;
        }
        get indep_hash() {
            if (!this.global._activeTx) {
                throw new Error('No current Tx');
            }
            return this.global._activeTx.info.confirmed.block_indep_hash;
        }
    }

    /**
     * Loads the contract source, initial state and other parameters
     *
     * @param arweave     an Arweave client instance
     * @param contractID  the Transaction Id of the contract
     */
    async function loadContract(arweave, contractID) {
        try {
            // Generate an object containing the details about a contract in one place.
            const contractTX = await arweave.transactions.get(contractID);
            const contractSrcTXID = getTag(contractTX, 'Contract-Src');
            const minFee = getTag(contractTX, 'Min-Fee');
            const contractSrcTX = await arweave.transactions.get(contractSrcTXID);
            const contractSrc = contractSrcTX.get('data', { decode: true, string: true });
            const state = contractTX.get('data', { decode: true, string: true });
            //console.log(`${contractSrcTXID} (Src) \n`, contractSrc);
            //console.log(`${contractID} (State) \n`, state);
            const { handler, swGlobal } = createContractExecutionEnvironment(arweave, contractSrc);
            return {
                id: contractID,
                contractSrc: contractSrc,
                initState: state,
                minFee: minFee,
                contractTX,
                handler,
                swGlobal
            };
        }
        catch (e) {
            console.error(e);
            throw new Error(`Unable to load contract ${contractID}.`);
        }
    }
    /**
     * Translates a contract source code into a Js function that can be called, and sets
     * up two globals, SmartWeave and the ContractError exception.
     *
     * At the moment this uses the Function() constructor (basically the same as eval),
     * But the design is geared toward switching to Realms or something like
     * https://github.com/justjake/quickjs-emscripten. (probably the latter)
     *
     * In the current implemention, using Function(), the 'globals' are actually
     * just lexically scoped vars, unique to each instance of a contract.
     *
     * @param contractSrc the javascript source for the contract. Must declare a handle() function
     */
    function createContractExecutionEnvironment(arweave, contractSrc) {
        // Convert from ES Module format to something we can run inside a Function.
        // just removes the `export` keyword and adds ;return handle to the end of the function.
        // We also assign the passed in SmartWeaveGlobal to SmartWeave, and declare 
        // the ContractError exception. 
        // We then use `new Function()` which we can call and get back the returned handle function
        // which has access to the per-instance globals. 
        contractSrc = contractSrc.replace(/export\s+async\s+function\s+handle/gmu, 'async function handle');
        contractSrc = contractSrc.replace(/export\s+function\s+handle/gmu, 'function handle');
        const ContractErrorDef = `class ContractError extends Error { constructor(message) { super(message); this.name = 'ContractError' } };`;
        const ContractAssertDef = `function ContractAssert(cond, message) { if (!cond) throw new ContractError(message) };`;
        const returningSrc = `const SmartWeave = swGlobal;\n\n${ContractErrorDef}\n${ContractAssertDef}\n${contractSrc}\n\n;return handle;`;
        const swGlobal = new SmartWeaveGlobal(arweave);
        const getContractFunction = new Function('swGlobal', returningSrc);
        //console.log(returningSrc);
        return {
            handler: getContractFunction(swGlobal),
            swGlobal
        };
    }

    /**
     * Given an map of address->balance, select one random address
     * weighted by the amount of tokens they hold.
     *
     * @param balances  A balances object, where the key is address and the value is the number of tokens they hold
     */
    function selectWeightedPstHolder(balances) {
        // Count the total tokens
        let totalTokens = 0;
        for (const address of Object.keys(balances)) {
            totalTokens += balances[address];
        }
        // Create a copy of balances where the amount each holder owns is represented
        // by a value 0-1.
        const weighted = {};
        for (const address of Object.keys(balances)) {
            weighted[address] = balances[address] / totalTokens;
        }
        let sum = 0;
        const r = Math.random();
        for (const address of Object.keys(weighted)) {
            sum += weighted[address];
            if (r <= sum && weighted[address] > 0) {
                return address;
            }
        }
        throw new Error(`Unable to select token holder`);
    }

    var index_umd = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function (exports) {
    	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

    	function unwrapExports (x) {
    		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    	}

    	function createCommonjsModule(fn, module) {
    		return module = { exports: {} }, fn(module, module.exports), module.exports;
    	}

    	var quill = createCommonjsModule(function (module, exports) {
    	/*!
    	 * Quill Editor v1.3.7
    	 * https://quilljs.com/
    	 * Copyright (c) 2014, Jason Chen
    	 * Copyright (c) 2013, salesforce.com
    	 */
    	(function webpackUniversalModuleDefinition(root, factory) {
    		module.exports = factory();
    	})(typeof self !== 'undefined' ? self : commonjsGlobal$1, function() {
    	return /******/ (function(modules) { // webpackBootstrap
    	/******/ 	// The module cache
    	/******/ 	var installedModules = {};
    	/******/
    	/******/ 	// The require function
    	/******/ 	function __webpack_require__(moduleId) {
    	/******/
    	/******/ 		// Check if module is in cache
    	/******/ 		if(installedModules[moduleId]) {
    	/******/ 			return installedModules[moduleId].exports;
    	/******/ 		}
    	/******/ 		// Create a new module (and put it into the cache)
    	/******/ 		var module = installedModules[moduleId] = {
    	/******/ 			i: moduleId,
    	/******/ 			l: false,
    	/******/ 			exports: {}
    	/******/ 		};
    	/******/
    	/******/ 		// Execute the module function
    	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    	/******/
    	/******/ 		// Flag the module as loaded
    	/******/ 		module.l = true;
    	/******/
    	/******/ 		// Return the exports of the module
    	/******/ 		return module.exports;
    	/******/ 	}
    	/******/
    	/******/
    	/******/ 	// expose the modules object (__webpack_modules__)
    	/******/ 	__webpack_require__.m = modules;
    	/******/
    	/******/ 	// expose the module cache
    	/******/ 	__webpack_require__.c = installedModules;
    	/******/
    	/******/ 	// define getter function for harmony exports
    	/******/ 	__webpack_require__.d = function(exports, name, getter) {
    	/******/ 		if(!__webpack_require__.o(exports, name)) {
    	/******/ 			Object.defineProperty(exports, name, {
    	/******/ 				configurable: false,
    	/******/ 				enumerable: true,
    	/******/ 				get: getter
    	/******/ 			});
    	/******/ 		}
    	/******/ 	};
    	/******/
    	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
    	/******/ 	__webpack_require__.n = function(module) {
    	/******/ 		var getter = module && module.__esModule ?
    	/******/ 			function getDefault() { return module['default']; } :
    	/******/ 			function getModuleExports() { return module; };
    	/******/ 		__webpack_require__.d(getter, 'a', getter);
    	/******/ 		return getter;
    	/******/ 	};
    	/******/
    	/******/ 	// Object.prototype.hasOwnProperty.call
    	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    	/******/
    	/******/ 	// __webpack_public_path__
    	/******/ 	__webpack_require__.p = "";
    	/******/
    	/******/ 	// Load entry module and return exports
    	/******/ 	return __webpack_require__(__webpack_require__.s = 109);
    	/******/ })
    	/************************************************************************/
    	/******/ ([
    	/* 0 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var container_1 = __webpack_require__(17);
    	var format_1 = __webpack_require__(18);
    	var leaf_1 = __webpack_require__(19);
    	var scroll_1 = __webpack_require__(45);
    	var inline_1 = __webpack_require__(46);
    	var block_1 = __webpack_require__(47);
    	var embed_1 = __webpack_require__(48);
    	var text_1 = __webpack_require__(49);
    	var attributor_1 = __webpack_require__(12);
    	var class_1 = __webpack_require__(32);
    	var style_1 = __webpack_require__(33);
    	var store_1 = __webpack_require__(31);
    	var Registry = __webpack_require__(1);
    	var Parchment = {
    	    Scope: Registry.Scope,
    	    create: Registry.create,
    	    find: Registry.find,
    	    query: Registry.query,
    	    register: Registry.register,
    	    Container: container_1.default,
    	    Format: format_1.default,
    	    Leaf: leaf_1.default,
    	    Embed: embed_1.default,
    	    Scroll: scroll_1.default,
    	    Block: block_1.default,
    	    Inline: inline_1.default,
    	    Text: text_1.default,
    	    Attributor: {
    	        Attribute: attributor_1.default,
    	        Class: class_1.default,
    	        Style: style_1.default,
    	        Store: store_1.default,
    	    },
    	};
    	exports.default = Parchment;


    	/***/ }),
    	/* 1 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var ParchmentError = /** @class */ (function (_super) {
    	    __extends(ParchmentError, _super);
    	    function ParchmentError(message) {
    	        var _this = this;
    	        message = '[Parchment] ' + message;
    	        _this = _super.call(this, message) || this;
    	        _this.message = message;
    	        _this.name = _this.constructor.name;
    	        return _this;
    	    }
    	    return ParchmentError;
    	}(Error));
    	exports.ParchmentError = ParchmentError;
    	var attributes = {};
    	var classes = {};
    	var tags = {};
    	var types = {};
    	exports.DATA_KEY = '__blot';
    	var Scope;
    	(function (Scope) {
    	    Scope[Scope["TYPE"] = 3] = "TYPE";
    	    Scope[Scope["LEVEL"] = 12] = "LEVEL";
    	    Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
    	    Scope[Scope["BLOT"] = 14] = "BLOT";
    	    Scope[Scope["INLINE"] = 7] = "INLINE";
    	    Scope[Scope["BLOCK"] = 11] = "BLOCK";
    	    Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
    	    Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
    	    Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
    	    Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
    	    Scope[Scope["ANY"] = 15] = "ANY";
    	})(Scope = exports.Scope || (exports.Scope = {}));
    	function create(input, value) {
    	    var match = query(input);
    	    if (match == null) {
    	        throw new ParchmentError("Unable to create " + input + " blot");
    	    }
    	    var BlotClass = match;
    	    var node = 
    	    // @ts-ignore
    	    input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
    	    return new BlotClass(node, value);
    	}
    	exports.create = create;
    	function find(node, bubble) {
    	    if (bubble === void 0) { bubble = false; }
    	    if (node == null)
    	        return null;
    	    // @ts-ignore
    	    if (node[exports.DATA_KEY] != null)
    	        return node[exports.DATA_KEY].blot;
    	    if (bubble)
    	        return find(node.parentNode, bubble);
    	    return null;
    	}
    	exports.find = find;
    	function query(query, scope) {
    	    if (scope === void 0) { scope = Scope.ANY; }
    	    var match;
    	    if (typeof query === 'string') {
    	        match = types[query] || attributes[query];
    	        // @ts-ignore
    	    }
    	    else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
    	        match = types['text'];
    	    }
    	    else if (typeof query === 'number') {
    	        if (query & Scope.LEVEL & Scope.BLOCK) {
    	            match = types['block'];
    	        }
    	        else if (query & Scope.LEVEL & Scope.INLINE) {
    	            match = types['inline'];
    	        }
    	    }
    	    else if (query instanceof HTMLElement) {
    	        var names = (query.getAttribute('class') || '').split(/\s+/);
    	        for (var i in names) {
    	            match = classes[names[i]];
    	            if (match)
    	                break;
    	        }
    	        match = match || tags[query.tagName];
    	    }
    	    if (match == null)
    	        return null;
    	    // @ts-ignore
    	    if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
    	        return match;
    	    return null;
    	}
    	exports.query = query;
    	function register() {
    	    var Definitions = [];
    	    for (var _i = 0; _i < arguments.length; _i++) {
    	        Definitions[_i] = arguments[_i];
    	    }
    	    if (Definitions.length > 1) {
    	        return Definitions.map(function (d) {
    	            return register(d);
    	        });
    	    }
    	    var Definition = Definitions[0];
    	    if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
    	        throw new ParchmentError('Invalid definition');
    	    }
    	    else if (Definition.blotName === 'abstract') {
    	        throw new ParchmentError('Cannot register abstract class');
    	    }
    	    types[Definition.blotName || Definition.attrName] = Definition;
    	    if (typeof Definition.keyName === 'string') {
    	        attributes[Definition.keyName] = Definition;
    	    }
    	    else {
    	        if (Definition.className != null) {
    	            classes[Definition.className] = Definition;
    	        }
    	        if (Definition.tagName != null) {
    	            if (Array.isArray(Definition.tagName)) {
    	                Definition.tagName = Definition.tagName.map(function (tagName) {
    	                    return tagName.toUpperCase();
    	                });
    	            }
    	            else {
    	                Definition.tagName = Definition.tagName.toUpperCase();
    	            }
    	            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
    	            tagNames.forEach(function (tag) {
    	                if (tags[tag] == null || Definition.className == null) {
    	                    tags[tag] = Definition;
    	                }
    	            });
    	        }
    	    }
    	    return Definition;
    	}
    	exports.register = register;


    	/***/ }),
    	/* 2 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var diff = __webpack_require__(51);
    	var equal = __webpack_require__(11);
    	var extend = __webpack_require__(3);
    	var op = __webpack_require__(20);


    	var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


    	var Delta = function (ops) {
    	  // Assume we are given a well formed ops
    	  if (Array.isArray(ops)) {
    	    this.ops = ops;
    	  } else if (ops != null && Array.isArray(ops.ops)) {
    	    this.ops = ops.ops;
    	  } else {
    	    this.ops = [];
    	  }
    	};


    	Delta.prototype.insert = function (text, attributes) {
    	  var newOp = {};
    	  if (text.length === 0) return this;
    	  newOp.insert = text;
    	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    	    newOp.attributes = attributes;
    	  }
    	  return this.push(newOp);
    	};

    	Delta.prototype['delete'] = function (length) {
    	  if (length <= 0) return this;
    	  return this.push({ 'delete': length });
    	};

    	Delta.prototype.retain = function (length, attributes) {
    	  if (length <= 0) return this;
    	  var newOp = { retain: length };
    	  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    	    newOp.attributes = attributes;
    	  }
    	  return this.push(newOp);
    	};

    	Delta.prototype.push = function (newOp) {
    	  var index = this.ops.length;
    	  var lastOp = this.ops[index - 1];
    	  newOp = extend(true, {}, newOp);
    	  if (typeof lastOp === 'object') {
    	    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
    	      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
    	      return this;
    	    }
    	    // Since it does not matter if we insert before or after deleting at the same index,
    	    // always prefer to insert first
    	    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
    	      index -= 1;
    	      lastOp = this.ops[index - 1];
    	      if (typeof lastOp !== 'object') {
    	        this.ops.unshift(newOp);
    	        return this;
    	      }
    	    }
    	    if (equal(newOp.attributes, lastOp.attributes)) {
    	      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
    	        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
    	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
    	        return this;
    	      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
    	        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
    	        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
    	        return this;
    	      }
    	    }
    	  }
    	  if (index === this.ops.length) {
    	    this.ops.push(newOp);
    	  } else {
    	    this.ops.splice(index, 0, newOp);
    	  }
    	  return this;
    	};

    	Delta.prototype.chop = function () {
    	  var lastOp = this.ops[this.ops.length - 1];
    	  if (lastOp && lastOp.retain && !lastOp.attributes) {
    	    this.ops.pop();
    	  }
    	  return this;
    	};

    	Delta.prototype.filter = function (predicate) {
    	  return this.ops.filter(predicate);
    	};

    	Delta.prototype.forEach = function (predicate) {
    	  this.ops.forEach(predicate);
    	};

    	Delta.prototype.map = function (predicate) {
    	  return this.ops.map(predicate);
    	};

    	Delta.prototype.partition = function (predicate) {
    	  var passed = [], failed = [];
    	  this.forEach(function(op) {
    	    var target = predicate(op) ? passed : failed;
    	    target.push(op);
    	  });
    	  return [passed, failed];
    	};

    	Delta.prototype.reduce = function (predicate, initial) {
    	  return this.ops.reduce(predicate, initial);
    	};

    	Delta.prototype.changeLength = function () {
    	  return this.reduce(function (length, elem) {
    	    if (elem.insert) {
    	      return length + op.length(elem);
    	    } else if (elem.delete) {
    	      return length - elem.delete;
    	    }
    	    return length;
    	  }, 0);
    	};

    	Delta.prototype.length = function () {
    	  return this.reduce(function (length, elem) {
    	    return length + op.length(elem);
    	  }, 0);
    	};

    	Delta.prototype.slice = function (start, end) {
    	  start = start || 0;
    	  if (typeof end !== 'number') end = Infinity;
    	  var ops = [];
    	  var iter = op.iterator(this.ops);
    	  var index = 0;
    	  while (index < end && iter.hasNext()) {
    	    var nextOp;
    	    if (index < start) {
    	      nextOp = iter.next(start - index);
    	    } else {
    	      nextOp = iter.next(end - index);
    	      ops.push(nextOp);
    	    }
    	    index += op.length(nextOp);
    	  }
    	  return new Delta(ops);
    	};


    	Delta.prototype.compose = function (other) {
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  var ops = [];
    	  var firstOther = otherIter.peek();
    	  if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
    	    var firstLeft = firstOther.retain;
    	    while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
    	      firstLeft -= thisIter.peekLength();
    	      ops.push(thisIter.next());
    	    }
    	    if (firstOther.retain - firstLeft > 0) {
    	      otherIter.next(firstOther.retain - firstLeft);
    	    }
    	  }
    	  var delta = new Delta(ops);
    	  while (thisIter.hasNext() || otherIter.hasNext()) {
    	    if (otherIter.peekType() === 'insert') {
    	      delta.push(otherIter.next());
    	    } else if (thisIter.peekType() === 'delete') {
    	      delta.push(thisIter.next());
    	    } else {
    	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	      var thisOp = thisIter.next(length);
    	      var otherOp = otherIter.next(length);
    	      if (typeof otherOp.retain === 'number') {
    	        var newOp = {};
    	        if (typeof thisOp.retain === 'number') {
    	          newOp.retain = length;
    	        } else {
    	          newOp.insert = thisOp.insert;
    	        }
    	        // Preserve null when composing with a retain, otherwise remove it for inserts
    	        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
    	        if (attributes) newOp.attributes = attributes;
    	        delta.push(newOp);

    	        // Optimization if rest of other is just retain
    	        if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
    	          var rest = new Delta(thisIter.rest());
    	          return delta.concat(rest).chop();
    	        }

    	      // Other op should be delete, we could be an insert or retain
    	      // Insert + delete cancels out
    	      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
    	        delta.push(otherOp);
    	      }
    	    }
    	  }
    	  return delta.chop();
    	};

    	Delta.prototype.concat = function (other) {
    	  var delta = new Delta(this.ops.slice());
    	  if (other.ops.length > 0) {
    	    delta.push(other.ops[0]);
    	    delta.ops = delta.ops.concat(other.ops.slice(1));
    	  }
    	  return delta;
    	};

    	Delta.prototype.diff = function (other, index) {
    	  if (this.ops === other.ops) {
    	    return new Delta();
    	  }
    	  var strings = [this, other].map(function (delta) {
    	    return delta.map(function (op) {
    	      if (op.insert != null) {
    	        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
    	      }
    	      var prep = (delta === other) ? 'on' : 'with';
    	      throw new Error('diff() called ' + prep + ' non-document');
    	    }).join('');
    	  });
    	  var delta = new Delta();
    	  var diffResult = diff(strings[0], strings[1], index);
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  diffResult.forEach(function (component) {
    	    var length = component[1].length;
    	    while (length > 0) {
    	      var opLength = 0;
    	      switch (component[0]) {
    	        case diff.INSERT:
    	          opLength = Math.min(otherIter.peekLength(), length);
    	          delta.push(otherIter.next(opLength));
    	          break;
    	        case diff.DELETE:
    	          opLength = Math.min(length, thisIter.peekLength());
    	          thisIter.next(opLength);
    	          delta['delete'](opLength);
    	          break;
    	        case diff.EQUAL:
    	          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
    	          var thisOp = thisIter.next(opLength);
    	          var otherOp = otherIter.next(opLength);
    	          if (equal(thisOp.insert, otherOp.insert)) {
    	            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
    	          } else {
    	            delta.push(otherOp)['delete'](opLength);
    	          }
    	          break;
    	      }
    	      length -= opLength;
    	    }
    	  });
    	  return delta.chop();
    	};

    	Delta.prototype.eachLine = function (predicate, newline) {
    	  newline = newline || '\n';
    	  var iter = op.iterator(this.ops);
    	  var line = new Delta();
    	  var i = 0;
    	  while (iter.hasNext()) {
    	    if (iter.peekType() !== 'insert') return;
    	    var thisOp = iter.peek();
    	    var start = op.length(thisOp) - iter.peekLength();
    	    var index = typeof thisOp.insert === 'string' ?
    	      thisOp.insert.indexOf(newline, start) - start : -1;
    	    if (index < 0) {
    	      line.push(iter.next());
    	    } else if (index > 0) {
    	      line.push(iter.next(index));
    	    } else {
    	      if (predicate(line, iter.next(1).attributes || {}, i) === false) {
    	        return;
    	      }
    	      i += 1;
    	      line = new Delta();
    	    }
    	  }
    	  if (line.length() > 0) {
    	    predicate(line, {}, i);
    	  }
    	};

    	Delta.prototype.transform = function (other, priority) {
    	  priority = !!priority;
    	  if (typeof other === 'number') {
    	    return this.transformPosition(other, priority);
    	  }
    	  var thisIter = op.iterator(this.ops);
    	  var otherIter = op.iterator(other.ops);
    	  var delta = new Delta();
    	  while (thisIter.hasNext() || otherIter.hasNext()) {
    	    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
    	      delta.retain(op.length(thisIter.next()));
    	    } else if (otherIter.peekType() === 'insert') {
    	      delta.push(otherIter.next());
    	    } else {
    	      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    	      var thisOp = thisIter.next(length);
    	      var otherOp = otherIter.next(length);
    	      if (thisOp['delete']) {
    	        // Our delete either makes their delete redundant or removes their retain
    	        continue;
    	      } else if (otherOp['delete']) {
    	        delta.push(otherOp);
    	      } else {
    	        // We retain either their retain or insert
    	        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
    	      }
    	    }
    	  }
    	  return delta.chop();
    	};

    	Delta.prototype.transformPosition = function (index, priority) {
    	  priority = !!priority;
    	  var thisIter = op.iterator(this.ops);
    	  var offset = 0;
    	  while (thisIter.hasNext() && offset <= index) {
    	    var length = thisIter.peekLength();
    	    var nextType = thisIter.peekType();
    	    thisIter.next();
    	    if (nextType === 'delete') {
    	      index -= Math.min(length, index - offset);
    	      continue;
    	    } else if (nextType === 'insert' && (offset < index || !priority)) {
    	      index += length;
    	    }
    	    offset += length;
    	  }
    	  return index;
    	};


    	module.exports = Delta;


    	/***/ }),
    	/* 3 */
    	/***/ (function(module, exports) {

    	var hasOwn = Object.prototype.hasOwnProperty;
    	var toStr = Object.prototype.toString;
    	var defineProperty = Object.defineProperty;
    	var gOPD = Object.getOwnPropertyDescriptor;

    	var isArray = function isArray(arr) {
    		if (typeof Array.isArray === 'function') {
    			return Array.isArray(arr);
    		}

    		return toStr.call(arr) === '[object Array]';
    	};

    	var isPlainObject = function isPlainObject(obj) {
    		if (!obj || toStr.call(obj) !== '[object Object]') {
    			return false;
    		}

    		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    		// Not own constructor property must be Object
    		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    			return false;
    		}

    		// Own properties are enumerated firstly, so to speed up,
    		// if last one is own, then all properties are own.
    		var key;
    		for (key in obj) { /**/ }

    		return typeof key === 'undefined' || hasOwn.call(obj, key);
    	};

    	// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
    	var setProperty = function setProperty(target, options) {
    		if (defineProperty && options.name === '__proto__') {
    			defineProperty(target, options.name, {
    				enumerable: true,
    				configurable: true,
    				value: options.newValue,
    				writable: true
    			});
    		} else {
    			target[options.name] = options.newValue;
    		}
    	};

    	// Return undefined instead of __proto__ if '__proto__' is not an own property
    	var getProperty = function getProperty(obj, name) {
    		if (name === '__proto__') {
    			if (!hasOwn.call(obj, name)) {
    				return void 0;
    			} else if (gOPD) {
    				// In early versions of node, obj['__proto__'] is buggy when obj has
    				// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
    				return gOPD(obj, name).value;
    			}
    		}

    		return obj[name];
    	};

    	module.exports = function extend() {
    		var options, name, src, copy, copyIsArray, clone;
    		var target = arguments[0];
    		var i = 1;
    		var length = arguments.length;
    		var deep = false;

    		// Handle a deep copy situation
    		if (typeof target === 'boolean') {
    			deep = target;
    			target = arguments[1] || {};
    			// skip the boolean and the target
    			i = 2;
    		}
    		if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    			target = {};
    		}

    		for (; i < length; ++i) {
    			options = arguments[i];
    			// Only deal with non-null/undefined values
    			if (options != null) {
    				// Extend the base object
    				for (name in options) {
    					src = getProperty(target, name);
    					copy = getProperty(options, name);

    					// Prevent never-ending loop
    					if (target !== copy) {
    						// Recurse if we're merging plain objects or arrays
    						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
    							if (copyIsArray) {
    								copyIsArray = false;
    								clone = src && isArray(src) ? src : [];
    							} else {
    								clone = src && isPlainObject(src) ? src : {};
    							}

    							// Never move original objects, clone them
    							setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

    						// Don't bring in undefined values
    						} else if (typeof copy !== 'undefined') {
    							setProperty(target, { name: name, newValue: copy });
    						}
    					}
    				}
    			}
    		}

    		// Return the modified object
    		return target;
    	};


    	/***/ }),
    	/* 4 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var NEWLINE_LENGTH = 1;

    	var BlockEmbed = function (_Parchment$Embed) {
    	  _inherits(BlockEmbed, _Parchment$Embed);

    	  function BlockEmbed() {
    	    _classCallCheck(this, BlockEmbed);

    	    return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
    	  }

    	  _createClass(BlockEmbed, [{
    	    key: 'attach',
    	    value: function attach() {
    	      _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
    	      this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
    	    }
    	  }, {
    	    key: 'delta',
    	    value: function delta() {
    	      return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
    	      if (attribute != null) {
    	        this.attributes.attribute(attribute, value);
    	      }
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      this.format(name, value);
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (typeof value === 'string' && value.endsWith('\n')) {
    	        var block = _parchment2.default.create(Block.blotName);
    	        this.parent.insertBefore(block, index === 0 ? this : this.next);
    	        block.insertAt(0, value.slice(0, -1));
    	      } else {
    	        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
    	      }
    	    }
    	  }]);

    	  return BlockEmbed;
    	}(_parchment2.default.Embed);

    	BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
    	// It is important for cursor behavior BlockEmbeds use tags that are block level elements


    	var Block = function (_Parchment$Block) {
    	  _inherits(Block, _Parchment$Block);

    	  function Block(domNode) {
    	    _classCallCheck(this, Block);

    	    var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

    	    _this2.cache = {};
    	    return _this2;
    	  }

    	  _createClass(Block, [{
    	    key: 'delta',
    	    value: function delta() {
    	      if (this.cache.delta == null) {
    	        this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
    	          if (leaf.length() === 0) {
    	            return delta;
    	          } else {
    	            return delta.insert(leaf.value(), bubbleFormats(leaf));
    	          }
    	        }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
    	      }
    	      return this.cache.delta;
    	    }
    	  }, {
    	    key: 'deleteAt',
    	    value: function deleteAt(index, length) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (length <= 0) return;
    	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
    	        if (index + length === this.length()) {
    	          this.format(name, value);
    	        }
    	      } else {
    	        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
    	      }
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
    	      if (value.length === 0) return;
    	      var lines = value.split('\n');
    	      var text = lines.shift();
    	      if (text.length > 0) {
    	        if (index < this.length() - 1 || this.children.tail == null) {
    	          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
    	        } else {
    	          this.children.tail.insertAt(this.children.tail.length(), text);
    	        }
    	        this.cache = {};
    	      }
    	      var block = this;
    	      lines.reduce(function (index, line) {
    	        block = block.split(index, true);
    	        block.insertAt(0, line);
    	        return line.length;
    	      }, index + text.length);
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      var head = this.children.head;
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
    	      if (head instanceof _break2.default) {
    	        head.remove();
    	      }
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      if (this.cache.length == null) {
    	        this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
    	      }
    	      return this.cache.length;
    	    }
    	  }, {
    	    key: 'moveChildren',
    	    value: function moveChildren(target, ref) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'path',
    	    value: function path(index) {
    	      return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
    	    }
    	  }, {
    	    key: 'removeChild',
    	    value: function removeChild(child) {
    	      _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
    	      this.cache = {};
    	    }
    	  }, {
    	    key: 'split',
    	    value: function split(index) {
    	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
    	        var clone = this.clone();
    	        if (index === 0) {
    	          this.parent.insertBefore(clone, this);
    	          return this;
    	        } else {
    	          this.parent.insertBefore(clone, this.next);
    	          return clone;
    	        }
    	      } else {
    	        var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
    	        this.cache = {};
    	        return next;
    	      }
    	    }
    	  }]);

    	  return Block;
    	}(_parchment2.default.Block);

    	Block.blotName = 'block';
    	Block.tagName = 'P';
    	Block.defaultChild = 'break';
    	Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

    	function bubbleFormats(blot) {
    	  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	  if (blot == null) return formats;
    	  if (typeof blot.formats === 'function') {
    	    formats = (0, _extend2.default)(formats, blot.formats());
    	  }
    	  if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
    	    return formats;
    	  }
    	  return bubbleFormats(blot.parent, formats);
    	}

    	exports.bubbleFormats = bubbleFormats;
    	exports.BlockEmbed = BlockEmbed;
    	exports.default = Block;

    	/***/ }),
    	/* 5 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.overload = exports.expandConfig = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	__webpack_require__(50);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _editor = __webpack_require__(14);

    	var _editor2 = _interopRequireDefault(_editor);

    	var _emitter3 = __webpack_require__(8);

    	var _emitter4 = _interopRequireDefault(_emitter3);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _selection = __webpack_require__(15);

    	var _selection2 = _interopRequireDefault(_selection);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _theme = __webpack_require__(34);

    	var _theme2 = _interopRequireDefault(_theme);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var debug = (0, _logger2.default)('quill');

    	var Quill = function () {
    	  _createClass(Quill, null, [{
    	    key: 'debug',
    	    value: function debug(limit) {
    	      if (limit === true) {
    	        limit = 'log';
    	      }
    	      _logger2.default.level(limit);
    	    }
    	  }, {
    	    key: 'find',
    	    value: function find(node) {
    	      return node.__quill || _parchment2.default.find(node);
    	    }
    	  }, {
    	    key: 'import',
    	    value: function _import(name) {
    	      if (this.imports[name] == null) {
    	        debug.error('Cannot import ' + name + '. Are you sure it was registered?');
    	      }
    	      return this.imports[name];
    	    }
    	  }, {
    	    key: 'register',
    	    value: function register(path, target) {
    	      var _this = this;

    	      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    	      if (typeof path !== 'string') {
    	        var name = path.attrName || path.blotName;
    	        if (typeof name === 'string') {
    	          // register(Blot | Attributor, overwrite)
    	          this.register('formats/' + name, path, target);
    	        } else {
    	          Object.keys(path).forEach(function (key) {
    	            _this.register(key, path[key], target);
    	          });
    	        }
    	      } else {
    	        if (this.imports[path] != null && !overwrite) {
    	          debug.warn('Overwriting ' + path + ' with', target);
    	        }
    	        this.imports[path] = target;
    	        if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
    	          _parchment2.default.register(target);
    	        } else if (path.startsWith('modules') && typeof target.register === 'function') {
    	          target.register();
    	        }
    	      }
    	    }
    	  }]);

    	  function Quill(container) {
    	    var _this2 = this;

    	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	    _classCallCheck(this, Quill);

    	    this.options = expandConfig(container, options);
    	    this.container = this.options.container;
    	    if (this.container == null) {
    	      return debug.error('Invalid Quill container', container);
    	    }
    	    if (this.options.debug) {
    	      Quill.debug(this.options.debug);
    	    }
    	    var html = this.container.innerHTML.trim();
    	    this.container.classList.add('ql-container');
    	    this.container.innerHTML = '';
    	    this.container.__quill = this;
    	    this.root = this.addContainer('ql-editor');
    	    this.root.classList.add('ql-blank');
    	    this.root.setAttribute('data-gramm', false);
    	    this.scrollingContainer = this.options.scrollingContainer || this.root;
    	    this.emitter = new _emitter4.default();
    	    this.scroll = _parchment2.default.create(this.root, {
    	      emitter: this.emitter,
    	      whitelist: this.options.formats
    	    });
    	    this.editor = new _editor2.default(this.scroll);
    	    this.selection = new _selection2.default(this.scroll, this.emitter);
    	    this.theme = new this.options.theme(this, this.options);
    	    this.keyboard = this.theme.addModule('keyboard');
    	    this.clipboard = this.theme.addModule('clipboard');
    	    this.history = this.theme.addModule('history');
    	    this.theme.init();
    	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
    	      if (type === _emitter4.default.events.TEXT_CHANGE) {
    	        _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
    	      var range = _this2.selection.lastRange;
    	      var index = range && range.length === 0 ? range.index : undefined;
    	      modify.call(_this2, function () {
    	        return _this2.editor.update(null, mutations, index);
    	      }, source);
    	    });
    	    var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
    	    this.setContents(contents);
    	    this.history.clear();
    	    if (this.options.placeholder) {
    	      this.root.setAttribute('data-placeholder', this.options.placeholder);
    	    }
    	    if (this.options.readOnly) {
    	      this.disable();
    	    }
    	  }

    	  _createClass(Quill, [{
    	    key: 'addContainer',
    	    value: function addContainer(container) {
    	      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	      if (typeof container === 'string') {
    	        var className = container;
    	        container = document.createElement('div');
    	        container.classList.add(className);
    	      }
    	      this.container.insertBefore(container, refNode);
    	      return container;
    	    }
    	  }, {
    	    key: 'blur',
    	    value: function blur() {
    	      this.selection.setRange(null);
    	    }
    	  }, {
    	    key: 'deleteText',
    	    value: function deleteText(index, length, source) {
    	      var _this3 = this;

    	      var _overload = overload(index, length, source);

    	      var _overload2 = _slicedToArray(_overload, 4);

    	      index = _overload2[0];
    	      length = _overload2[1];
    	      source = _overload2[3];

    	      return modify.call(this, function () {
    	        return _this3.editor.deleteText(index, length);
    	      }, source, index, -1 * length);
    	    }
    	  }, {
    	    key: 'disable',
    	    value: function disable() {
    	      this.enable(false);
    	    }
    	  }, {
    	    key: 'enable',
    	    value: function enable() {
    	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    	      this.scroll.enable(enabled);
    	      this.container.classList.toggle('ql-disabled', !enabled);
    	    }
    	  }, {
    	    key: 'focus',
    	    value: function focus() {
    	      var scrollTop = this.scrollingContainer.scrollTop;
    	      this.selection.focus();
    	      this.scrollingContainer.scrollTop = scrollTop;
    	      this.scrollIntoView();
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      var _this4 = this;

    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        var range = _this4.getSelection(true);
    	        var change = new _quillDelta2.default();
    	        if (range == null) {
    	          return change;
    	        } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
    	          change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
    	        } else if (range.length === 0) {
    	          _this4.selection.format(name, value);
    	          return change;
    	        } else {
    	          change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
    	        }
    	        _this4.setSelection(range, _emitter4.default.sources.SILENT);
    	        return change;
    	      }, source);
    	    }
    	  }, {
    	    key: 'formatLine',
    	    value: function formatLine(index, length, name, value, source) {
    	      var _this5 = this;

    	      var formats = void 0;

    	      var _overload3 = overload(index, length, name, value, source);

    	      var _overload4 = _slicedToArray(_overload3, 4);

    	      index = _overload4[0];
    	      length = _overload4[1];
    	      formats = _overload4[2];
    	      source = _overload4[3];

    	      return modify.call(this, function () {
    	        return _this5.editor.formatLine(index, length, formats);
    	      }, source, index, 0);
    	    }
    	  }, {
    	    key: 'formatText',
    	    value: function formatText(index, length, name, value, source) {
    	      var _this6 = this;

    	      var formats = void 0;

    	      var _overload5 = overload(index, length, name, value, source);

    	      var _overload6 = _slicedToArray(_overload5, 4);

    	      index = _overload6[0];
    	      length = _overload6[1];
    	      formats = _overload6[2];
    	      source = _overload6[3];

    	      return modify.call(this, function () {
    	        return _this6.editor.formatText(index, length, formats);
    	      }, source, index, 0);
    	    }
    	  }, {
    	    key: 'getBounds',
    	    value: function getBounds(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var bounds = void 0;
    	      if (typeof index === 'number') {
    	        bounds = this.selection.getBounds(index, length);
    	      } else {
    	        bounds = this.selection.getBounds(index.index, index.length);
    	      }
    	      var containerBounds = this.container.getBoundingClientRect();
    	      return {
    	        bottom: bounds.bottom - containerBounds.top,
    	        height: bounds.height,
    	        left: bounds.left - containerBounds.left,
    	        right: bounds.right - containerBounds.left,
    	        top: bounds.top - containerBounds.top,
    	        width: bounds.width
    	      };
    	    }
    	  }, {
    	    key: 'getContents',
    	    value: function getContents() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    	      var _overload7 = overload(index, length);

    	      var _overload8 = _slicedToArray(_overload7, 2);

    	      index = _overload8[0];
    	      length = _overload8[1];

    	      return this.editor.getContents(index, length);
    	    }
    	  }, {
    	    key: 'getFormat',
    	    value: function getFormat() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      if (typeof index === 'number') {
    	        return this.editor.getFormat(index, length);
    	      } else {
    	        return this.editor.getFormat(index.index, index.length);
    	      }
    	    }
    	  }, {
    	    key: 'getIndex',
    	    value: function getIndex(blot) {
    	      return blot.offset(this.scroll);
    	    }
    	  }, {
    	    key: 'getLength',
    	    value: function getLength() {
    	      return this.scroll.length();
    	    }
    	  }, {
    	    key: 'getLeaf',
    	    value: function getLeaf(index) {
    	      return this.scroll.leaf(index);
    	    }
    	  }, {
    	    key: 'getLine',
    	    value: function getLine(index) {
    	      return this.scroll.line(index);
    	    }
    	  }, {
    	    key: 'getLines',
    	    value: function getLines() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    	      if (typeof index !== 'number') {
    	        return this.scroll.lines(index.index, index.length);
    	      } else {
    	        return this.scroll.lines(index, length);
    	      }
    	    }
    	  }, {
    	    key: 'getModule',
    	    value: function getModule(name) {
    	      return this.theme.modules[name];
    	    }
    	  }, {
    	    key: 'getSelection',
    	    value: function getSelection() {
    	      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    	      if (focus) this.focus();
    	      this.update(); // Make sure we access getRange with editor in consistent state
    	      return this.selection.getRange()[0];
    	    }
    	  }, {
    	    key: 'getText',
    	    value: function getText() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

    	      var _overload9 = overload(index, length);

    	      var _overload10 = _slicedToArray(_overload9, 2);

    	      index = _overload10[0];
    	      length = _overload10[1];

    	      return this.editor.getText(index, length);
    	    }
    	  }, {
    	    key: 'hasFocus',
    	    value: function hasFocus() {
    	      return this.selection.hasFocus();
    	    }
    	  }, {
    	    key: 'insertEmbed',
    	    value: function insertEmbed(index, embed, value) {
    	      var _this7 = this;

    	      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

    	      return modify.call(this, function () {
    	        return _this7.editor.insertEmbed(index, embed, value);
    	      }, source, index);
    	    }
    	  }, {
    	    key: 'insertText',
    	    value: function insertText(index, text, name, value, source) {
    	      var _this8 = this;

    	      var formats = void 0;

    	      var _overload11 = overload(index, 0, name, value, source);

    	      var _overload12 = _slicedToArray(_overload11, 4);

    	      index = _overload12[0];
    	      formats = _overload12[2];
    	      source = _overload12[3];

    	      return modify.call(this, function () {
    	        return _this8.editor.insertText(index, text, formats);
    	      }, source, index, text.length);
    	    }
    	  }, {
    	    key: 'isEnabled',
    	    value: function isEnabled() {
    	      return !this.container.classList.contains('ql-disabled');
    	    }
    	  }, {
    	    key: 'off',
    	    value: function off() {
    	      return this.emitter.off.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'on',
    	    value: function on() {
    	      return this.emitter.on.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'once',
    	    value: function once() {
    	      return this.emitter.once.apply(this.emitter, arguments);
    	    }
    	  }, {
    	    key: 'pasteHTML',
    	    value: function pasteHTML(index, html, source) {
    	      this.clipboard.dangerouslyPasteHTML(index, html, source);
    	    }
    	  }, {
    	    key: 'removeFormat',
    	    value: function removeFormat(index, length, source) {
    	      var _this9 = this;

    	      var _overload13 = overload(index, length, source);

    	      var _overload14 = _slicedToArray(_overload13, 4);

    	      index = _overload14[0];
    	      length = _overload14[1];
    	      source = _overload14[3];

    	      return modify.call(this, function () {
    	        return _this9.editor.removeFormat(index, length);
    	      }, source, index);
    	    }
    	  }, {
    	    key: 'scrollIntoView',
    	    value: function scrollIntoView() {
    	      this.selection.scrollIntoView(this.scrollingContainer);
    	    }
    	  }, {
    	    key: 'setContents',
    	    value: function setContents(delta) {
    	      var _this10 = this;

    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        delta = new _quillDelta2.default(delta);
    	        var length = _this10.getLength();
    	        var deleted = _this10.editor.deleteText(0, length);
    	        var applied = _this10.editor.applyDelta(delta);
    	        var lastOp = applied.ops[applied.ops.length - 1];
    	        if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
    	          _this10.editor.deleteText(_this10.getLength() - 1, 1);
    	          applied.delete(1);
    	        }
    	        var ret = deleted.compose(applied);
    	        return ret;
    	      }, source);
    	    }
    	  }, {
    	    key: 'setSelection',
    	    value: function setSelection(index, length, source) {
    	      if (index == null) {
    	        this.selection.setRange(null, length || Quill.sources.API);
    	      } else {
    	        var _overload15 = overload(index, length, source);

    	        var _overload16 = _slicedToArray(_overload15, 4);

    	        index = _overload16[0];
    	        length = _overload16[1];
    	        source = _overload16[3];

    	        this.selection.setRange(new _selection.Range(index, length), source);
    	        if (source !== _emitter4.default.sources.SILENT) {
    	          this.selection.scrollIntoView(this.scrollingContainer);
    	        }
    	      }
    	    }
    	  }, {
    	    key: 'setText',
    	    value: function setText(text) {
    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      var delta = new _quillDelta2.default().insert(text);
    	      return this.setContents(delta, source);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

    	      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
    	      this.selection.update(source);
    	      return change;
    	    }
    	  }, {
    	    key: 'updateContents',
    	    value: function updateContents(delta) {
    	      var _this11 = this;

    	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

    	      return modify.call(this, function () {
    	        delta = new _quillDelta2.default(delta);
    	        return _this11.editor.applyDelta(delta, source);
    	      }, source, true);
    	    }
    	  }]);

    	  return Quill;
    	}();

    	Quill.DEFAULTS = {
    	  bounds: null,
    	  formats: null,
    	  modules: {},
    	  placeholder: '',
    	  readOnly: false,
    	  scrollingContainer: null,
    	  strict: true,
    	  theme: 'default'
    	};
    	Quill.events = _emitter4.default.events;
    	Quill.sources = _emitter4.default.sources;
    	// eslint-disable-next-line no-undef
    	Quill.version =   "1.3.7";

    	Quill.imports = {
    	  'delta': _quillDelta2.default,
    	  'parchment': _parchment2.default,
    	  'core/module': _module2.default,
    	  'core/theme': _theme2.default
    	};

    	function expandConfig(container, userConfig) {
    	  userConfig = (0, _extend2.default)(true, {
    	    container: container,
    	    modules: {
    	      clipboard: true,
    	      keyboard: true,
    	      history: true
    	    }
    	  }, userConfig);
    	  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
    	    userConfig.theme = _theme2.default;
    	  } else {
    	    userConfig.theme = Quill.import('themes/' + userConfig.theme);
    	    if (userConfig.theme == null) {
    	      throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
    	    }
    	  }
    	  var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
    	  [themeConfig, userConfig].forEach(function (config) {
    	    config.modules = config.modules || {};
    	    Object.keys(config.modules).forEach(function (module) {
    	      if (config.modules[module] === true) {
    	        config.modules[module] = {};
    	      }
    	    });
    	  });
    	  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
    	  var moduleConfig = moduleNames.reduce(function (config, name) {
    	    var moduleClass = Quill.import('modules/' + name);
    	    if (moduleClass == null) {
    	      debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
    	    } else {
    	      config[name] = moduleClass.DEFAULTS || {};
    	    }
    	    return config;
    	  }, {});
    	  // Special case toolbar shorthand
    	  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
    	    userConfig.modules.toolbar = {
    	      container: userConfig.modules.toolbar
    	    };
    	  }
    	  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
    	  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
    	    if (typeof userConfig[key] === 'string') {
    	      userConfig[key] = document.querySelector(userConfig[key]);
    	    }
    	  });
    	  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
    	    if (userConfig.modules[name]) {
    	      config[name] = userConfig.modules[name];
    	    }
    	    return config;
    	  }, {});
    	  return userConfig;
    	}

    	// Handle selection preservation and TEXT_CHANGE emission
    	// common to modification APIs
    	function modify(modifier, source, index, shift) {
    	  if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
    	    return new _quillDelta2.default();
    	  }
    	  var range = index == null ? null : this.getSelection();
    	  var oldDelta = this.editor.delta;
    	  var change = modifier();
    	  if (range != null) {
    	    if (index === true) index = range.index;
    	    if (shift == null) {
    	      range = shiftRange(range, change, source);
    	    } else if (shift !== 0) {
    	      range = shiftRange(range, index, shift, source);
    	    }
    	    this.setSelection(range, _emitter4.default.sources.SILENT);
    	  }
    	  if (change.length() > 0) {
    	    var _emitter;

    	    var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
    	    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
    	    if (source !== _emitter4.default.sources.SILENT) {
    	      var _emitter2;

    	      (_emitter2 = this.emitter).emit.apply(_emitter2, args);
    	    }
    	  }
    	  return change;
    	}

    	function overload(index, length, name, value, source) {
    	  var formats = {};
    	  if (typeof index.index === 'number' && typeof index.length === 'number') {
    	    // Allow for throwaway end (used by insertText/insertEmbed)
    	    if (typeof length !== 'number') {
    	      source = value, value = name, name = length, length = index.length, index = index.index;
    	    } else {
    	      length = index.length, index = index.index;
    	    }
    	  } else if (typeof length !== 'number') {
    	    source = value, value = name, name = length, length = 0;
    	  }
    	  // Handle format being object, two format name/value strings or excluded
    	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
    	    formats = name;
    	    source = value;
    	  } else if (typeof name === 'string') {
    	    if (value != null) {
    	      formats[name] = value;
    	    } else {
    	      source = name;
    	    }
    	  }
    	  // Handle optional source
    	  source = source || _emitter4.default.sources.API;
    	  return [index, length, formats, source];
    	}

    	function shiftRange(range, index, length, source) {
    	  if (range == null) return null;
    	  var start = void 0,
    	      end = void 0;
    	  if (index instanceof _quillDelta2.default) {
    	    var _map = [range.index, range.index + range.length].map(function (pos) {
    	      return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
    	    });

    	    var _map2 = _slicedToArray(_map, 2);

    	    start = _map2[0];
    	    end = _map2[1];
    	  } else {
    	    var _map3 = [range.index, range.index + range.length].map(function (pos) {
    	      if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
    	      if (length >= 0) {
    	        return pos + length;
    	      } else {
    	        return Math.max(index, pos + length);
    	      }
    	    });

    	    var _map4 = _slicedToArray(_map3, 2);

    	    start = _map4[0];
    	    end = _map4[1];
    	  }
    	  return new _selection.Range(start, end - start);
    	}

    	exports.expandConfig = expandConfig;
    	exports.overload = overload;
    	exports.default = Quill;

    	/***/ }),
    	/* 6 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Inline = function (_Parchment$Inline) {
    	  _inherits(Inline, _Parchment$Inline);

    	  function Inline() {
    	    _classCallCheck(this, Inline);

    	    return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
    	  }

    	  _createClass(Inline, [{
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
    	        var blot = this.isolate(index, length);
    	        if (value) {
    	          blot.wrap(name, value);
    	        }
    	      } else {
    	        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
    	      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
    	        var parent = this.parent.isolate(this.offset(), this.length());
    	        this.moveChildren(parent);
    	        parent.wrap(this);
    	      }
    	    }
    	  }], [{
    	    key: 'compare',
    	    value: function compare(self, other) {
    	      var selfIndex = Inline.order.indexOf(self);
    	      var otherIndex = Inline.order.indexOf(other);
    	      if (selfIndex >= 0 || otherIndex >= 0) {
    	        return selfIndex - otherIndex;
    	      } else if (self === other) {
    	        return 0;
    	      } else if (self < other) {
    	        return -1;
    	      } else {
    	        return 1;
    	      }
    	    }
    	  }]);

    	  return Inline;
    	}(_parchment2.default.Inline);

    	Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
    	// Lower index means deeper in the DOM tree, since not found (-1) is for embeds
    	Inline.order = ['cursor', 'inline', // Must be lower
    	'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
    	];

    	exports.default = Inline;

    	/***/ }),
    	/* 7 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TextBlot = function (_Parchment$Text) {
    	  _inherits(TextBlot, _Parchment$Text);

    	  function TextBlot() {
    	    _classCallCheck(this, TextBlot);

    	    return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
    	  }

    	  return TextBlot;
    	}(_parchment2.default.Text);

    	exports.default = TextBlot;

    	/***/ }),
    	/* 8 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _eventemitter = __webpack_require__(54);

    	var _eventemitter2 = _interopRequireDefault(_eventemitter);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:events');

    	var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

    	EVENTS.forEach(function (eventName) {
    	  document.addEventListener(eventName, function () {
    	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    	      args[_key] = arguments[_key];
    	    }

    	    [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
    	      // TODO use WeakMap
    	      if (node.__quill && node.__quill.emitter) {
    	        var _node$__quill$emitter;

    	        (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
    	      }
    	    });
    	  });
    	});

    	var Emitter = function (_EventEmitter) {
    	  _inherits(Emitter, _EventEmitter);

    	  function Emitter() {
    	    _classCallCheck(this, Emitter);

    	    var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

    	    _this.listeners = {};
    	    _this.on('error', debug.error);
    	    return _this;
    	  }

    	  _createClass(Emitter, [{
    	    key: 'emit',
    	    value: function emit() {
    	      debug.log.apply(debug, arguments);
    	      _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
    	    }
    	  }, {
    	    key: 'handleDOM',
    	    value: function handleDOM(event) {
    	      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    	        args[_key2 - 1] = arguments[_key2];
    	      }

    	      (this.listeners[event.type] || []).forEach(function (_ref) {
    	        var node = _ref.node,
    	            handler = _ref.handler;

    	        if (event.target === node || node.contains(event.target)) {
    	          handler.apply(undefined, [event].concat(args));
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'listenDOM',
    	    value: function listenDOM(eventName, node, handler) {
    	      if (!this.listeners[eventName]) {
    	        this.listeners[eventName] = [];
    	      }
    	      this.listeners[eventName].push({ node: node, handler: handler });
    	    }
    	  }]);

    	  return Emitter;
    	}(_eventemitter2.default);

    	Emitter.events = {
    	  EDITOR_CHANGE: 'editor-change',
    	  SCROLL_BEFORE_UPDATE: 'scroll-before-update',
    	  SCROLL_OPTIMIZE: 'scroll-optimize',
    	  SCROLL_UPDATE: 'scroll-update',
    	  SELECTION_CHANGE: 'selection-change',
    	  TEXT_CHANGE: 'text-change'
    	};
    	Emitter.sources = {
    	  API: 'api',
    	  SILENT: 'silent',
    	  USER: 'user'
    	};

    	exports.default = Emitter;

    	/***/ }),
    	/* 9 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Module = function Module(quill) {
    	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	  _classCallCheck(this, Module);

    	  this.quill = quill;
    	  this.options = options;
    	};

    	Module.DEFAULTS = {};

    	exports.default = Module;

    	/***/ }),
    	/* 10 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	var levels = ['error', 'warn', 'log', 'info'];
    	var level = 'warn';

    	function debug(method) {
    	  if (levels.indexOf(method) <= levels.indexOf(level)) {
    	    var _console;

    	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    	      args[_key - 1] = arguments[_key];
    	    }

    	    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
    	  }
    	}

    	function namespace(ns) {
    	  return levels.reduce(function (logger, method) {
    	    logger[method] = debug.bind(console, method, ns);
    	    return logger;
    	  }, {});
    	}

    	debug.level = namespace.level = function (newLevel) {
    	  level = newLevel;
    	};

    	exports.default = namespace;

    	/***/ }),
    	/* 11 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var pSlice = Array.prototype.slice;
    	var objectKeys = __webpack_require__(52);
    	var isArguments = __webpack_require__(53);

    	var deepEqual = module.exports = function (actual, expected, opts) {
    	  if (!opts) opts = {};
    	  // 7.1. All identical values are equivalent, as determined by ===.
    	  if (actual === expected) {
    	    return true;

    	  } else if (actual instanceof Date && expected instanceof Date) {
    	    return actual.getTime() === expected.getTime();

    	  // 7.3. Other pairs that do not both pass typeof value == 'object',
    	  // equivalence is determined by ==.
    	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    	    return opts.strict ? actual === expected : actual == expected;

    	  // 7.4. For all other Object pairs, including Array objects, equivalence is
    	  // determined by having the same number of owned properties (as verified
    	  // with Object.prototype.hasOwnProperty.call), the same set of keys
    	  // (although not necessarily the same order), equivalent values for every
    	  // corresponding key, and an identical 'prototype' property. Note: this
    	  // accounts for both named and indexed properties on Arrays.
    	  } else {
    	    return objEquiv(actual, expected, opts);
    	  }
    	};

    	function isUndefinedOrNull(value) {
    	  return value === null || value === undefined;
    	}

    	function isBuffer (x) {
    	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    	    return false;
    	  }
    	  if (x.length > 0 && typeof x[0] !== 'number') return false;
    	  return true;
    	}

    	function objEquiv(a, b, opts) {
    	  var i, key;
    	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    	    return false;
    	  // an identical 'prototype' property.
    	  if (a.prototype !== b.prototype) return false;
    	  //~~~I've managed to break Object.keys through screwy arguments passing.
    	  //   Converting to array solves the problem.
    	  if (isArguments(a)) {
    	    if (!isArguments(b)) {
    	      return false;
    	    }
    	    a = pSlice.call(a);
    	    b = pSlice.call(b);
    	    return deepEqual(a, b, opts);
    	  }
    	  if (isBuffer(a)) {
    	    if (!isBuffer(b)) {
    	      return false;
    	    }
    	    if (a.length !== b.length) return false;
    	    for (i = 0; i < a.length; i++) {
    	      if (a[i] !== b[i]) return false;
    	    }
    	    return true;
    	  }
    	  try {
    	    var ka = objectKeys(a),
    	        kb = objectKeys(b);
    	  } catch (e) {//happens when one is a string literal and the other isn't
    	    return false;
    	  }
    	  // having the same number of owned properties (keys incorporates
    	  // hasOwnProperty)
    	  if (ka.length != kb.length)
    	    return false;
    	  //the same set of keys (although not necessarily the same order),
    	  ka.sort();
    	  kb.sort();
    	  //~~~cheap key test
    	  for (i = ka.length - 1; i >= 0; i--) {
    	    if (ka[i] != kb[i])
    	      return false;
    	  }
    	  //equivalent values for every corresponding key, and
    	  //~~~possibly expensive deep test
    	  for (i = ka.length - 1; i >= 0; i--) {
    	    key = ka[i];
    	    if (!deepEqual(a[key], b[key], opts)) return false;
    	  }
    	  return typeof a === typeof b;
    	}


    	/***/ }),
    	/* 12 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var Registry = __webpack_require__(1);
    	var Attributor = /** @class */ (function () {
    	    function Attributor(attrName, keyName, options) {
    	        if (options === void 0) { options = {}; }
    	        this.attrName = attrName;
    	        this.keyName = keyName;
    	        var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
    	        if (options.scope != null) {
    	            // Ignore type bits, force attribute bit
    	            this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
    	        }
    	        else {
    	            this.scope = Registry.Scope.ATTRIBUTE;
    	        }
    	        if (options.whitelist != null)
    	            this.whitelist = options.whitelist;
    	    }
    	    Attributor.keys = function (node) {
    	        return [].map.call(node.attributes, function (item) {
    	            return item.name;
    	        });
    	    };
    	    Attributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        node.setAttribute(this.keyName, value);
    	        return true;
    	    };
    	    Attributor.prototype.canAdd = function (node, value) {
    	        var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
    	        if (match == null)
    	            return false;
    	        if (this.whitelist == null)
    	            return true;
    	        if (typeof value === 'string') {
    	            return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
    	        }
    	        else {
    	            return this.whitelist.indexOf(value) > -1;
    	        }
    	    };
    	    Attributor.prototype.remove = function (node) {
    	        node.removeAttribute(this.keyName);
    	    };
    	    Attributor.prototype.value = function (node) {
    	        var value = node.getAttribute(this.keyName);
    	        if (this.canAdd(node, value) && value) {
    	            return value;
    	        }
    	        return '';
    	    };
    	    return Attributor;
    	}());
    	exports.default = Attributor;


    	/***/ }),
    	/* 13 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.Code = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Code = function (_Inline) {
    	  _inherits(Code, _Inline);

    	  function Code() {
    	    _classCallCheck(this, Code);

    	    return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
    	  }

    	  return Code;
    	}(_inline2.default);

    	Code.blotName = 'code';
    	Code.tagName = 'CODE';

    	var CodeBlock = function (_Block) {
    	  _inherits(CodeBlock, _Block);

    	  function CodeBlock() {
    	    _classCallCheck(this, CodeBlock);

    	    return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
    	  }

    	  _createClass(CodeBlock, [{
    	    key: 'delta',
    	    value: function delta() {
    	      var _this3 = this;

    	      var text = this.domNode.textContent;
    	      if (text.endsWith('\n')) {
    	        // Should always be true
    	        text = text.slice(0, -1);
    	      }
    	      return text.split('\n').reduce(function (delta, frag) {
    	        return delta.insert(frag).insert('\n', _this3.formats());
    	      }, new _quillDelta2.default());
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name === this.statics.blotName && value) return;

    	      var _descendant = this.descendant(_text2.default, this.length() - 1),
    	          _descendant2 = _slicedToArray(_descendant, 1),
    	          text = _descendant2[0];

    	      if (text != null) {
    	        text.deleteAt(text.length() - 1, 1);
    	      }
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, name, value) {
    	      if (length === 0) return;
    	      if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
    	        return;
    	      }
    	      var nextNewline = this.newlineIndex(index);
    	      if (nextNewline < 0 || nextNewline >= index + length) return;
    	      var prevNewline = this.newlineIndex(index, true) + 1;
    	      var isolateLength = nextNewline - prevNewline + 1;
    	      var blot = this.isolate(prevNewline, isolateLength);
    	      var next = blot.next;
    	      blot.format(name, value);
    	      if (next instanceof CodeBlock) {
    	        next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null) return;

    	      var _descendant3 = this.descendant(_text2.default, index),
    	          _descendant4 = _slicedToArray(_descendant3, 2),
    	          text = _descendant4[0],
    	          offset = _descendant4[1];

    	      text.insertAt(offset, value);
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      var length = this.domNode.textContent.length;
    	      if (!this.domNode.textContent.endsWith('\n')) {
    	        return length + 1;
    	      }
    	      return length;
    	    }
    	  }, {
    	    key: 'newlineIndex',
    	    value: function newlineIndex(searchIndex) {
    	      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      if (!reverse) {
    	        var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
    	        return offset > -1 ? searchIndex + offset : -1;
    	      } else {
    	        return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      if (!this.domNode.textContent.endsWith('\n')) {
    	        this.appendChild(_parchment2.default.create('text', '\n'));
    	      }
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
    	      var next = this.next;
    	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
    	        next.optimize(context);
    	        next.moveChildren(this);
    	        next.remove();
    	      }
    	    }
    	  }, {
    	    key: 'replace',
    	    value: function replace(target) {
    	      _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
    	      [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
    	        var blot = _parchment2.default.find(node);
    	        if (blot == null) {
    	          node.parentNode.removeChild(node);
    	        } else if (blot instanceof _parchment2.default.Embed) {
    	          blot.remove();
    	        } else {
    	          blot.unwrap();
    	        }
    	      });
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
    	      domNode.setAttribute('spellcheck', false);
    	      return domNode;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      return true;
    	    }
    	  }]);

    	  return CodeBlock;
    	}(_block2.default);

    	CodeBlock.blotName = 'code-block';
    	CodeBlock.tagName = 'PRE';
    	CodeBlock.TAB = '  ';

    	exports.Code = Code;
    	exports.default = CodeBlock;

    	/***/ }),
    	/* 14 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _op = __webpack_require__(20);

    	var _op2 = _interopRequireDefault(_op);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _cursor = __webpack_require__(24);

    	var _cursor2 = _interopRequireDefault(_cursor);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var ASCII = /^[ -~]*$/;

    	var Editor = function () {
    	  function Editor(scroll) {
    	    _classCallCheck(this, Editor);

    	    this.scroll = scroll;
    	    this.delta = this.getDelta();
    	  }

    	  _createClass(Editor, [{
    	    key: 'applyDelta',
    	    value: function applyDelta(delta) {
    	      var _this = this;

    	      var consumeNextNewline = false;
    	      this.scroll.update();
    	      var scrollLength = this.scroll.length();
    	      this.scroll.batchStart();
    	      delta = normalizeDelta(delta);
    	      delta.reduce(function (index, op) {
    	        var length = op.retain || op.delete || op.insert.length || 1;
    	        var attributes = op.attributes || {};
    	        if (op.insert != null) {
    	          if (typeof op.insert === 'string') {
    	            var text = op.insert;
    	            if (text.endsWith('\n') && consumeNextNewline) {
    	              consumeNextNewline = false;
    	              text = text.slice(0, -1);
    	            }
    	            if (index >= scrollLength && !text.endsWith('\n')) {
    	              consumeNextNewline = true;
    	            }
    	            _this.scroll.insertAt(index, text);

    	            var _scroll$line = _this.scroll.line(index),
    	                _scroll$line2 = _slicedToArray(_scroll$line, 2),
    	                line = _scroll$line2[0],
    	                offset = _scroll$line2[1];

    	            var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
    	            if (line instanceof _block2.default) {
    	              var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
    	                  _line$descendant2 = _slicedToArray(_line$descendant, 1),
    	                  leaf = _line$descendant2[0];

    	              formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
    	            }
    	            attributes = _op2.default.attributes.diff(formats, attributes) || {};
    	          } else if (_typeof(op.insert) === 'object') {
    	            var key = Object.keys(op.insert)[0]; // There should only be one key
    	            if (key == null) return index;
    	            _this.scroll.insertAt(index, key, op.insert[key]);
    	          }
    	          scrollLength += length;
    	        }
    	        Object.keys(attributes).forEach(function (name) {
    	          _this.scroll.formatAt(index, length, name, attributes[name]);
    	        });
    	        return index + length;
    	      }, 0);
    	      delta.reduce(function (index, op) {
    	        if (typeof op.delete === 'number') {
    	          _this.scroll.deleteAt(index, op.delete);
    	          return index;
    	        }
    	        return index + (op.retain || op.insert.length || 1);
    	      }, 0);
    	      this.scroll.batchEnd();
    	      return this.update(delta);
    	    }
    	  }, {
    	    key: 'deleteText',
    	    value: function deleteText(index, length) {
    	      this.scroll.deleteAt(index, length);
    	      return this.update(new _quillDelta2.default().retain(index).delete(length));
    	    }
    	  }, {
    	    key: 'formatLine',
    	    value: function formatLine(index, length) {
    	      var _this2 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      this.scroll.update();
    	      Object.keys(formats).forEach(function (format) {
    	        if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
    	        var lines = _this2.scroll.lines(index, Math.max(length, 1));
    	        var lengthRemaining = length;
    	        lines.forEach(function (line) {
    	          var lineLength = line.length();
    	          if (!(line instanceof _code2.default)) {
    	            line.format(format, formats[format]);
    	          } else {
    	            var codeIndex = index - line.offset(_this2.scroll);
    	            var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
    	            line.formatAt(codeIndex, codeLength, format, formats[format]);
    	          }
    	          lengthRemaining -= lineLength;
    	        });
    	      });
    	      this.scroll.optimize();
    	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'formatText',
    	    value: function formatText(index, length) {
    	      var _this3 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      Object.keys(formats).forEach(function (format) {
    	        _this3.scroll.formatAt(index, length, format, formats[format]);
    	      });
    	      return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'getContents',
    	    value: function getContents(index, length) {
    	      return this.delta.slice(index, index + length);
    	    }
    	  }, {
    	    key: 'getDelta',
    	    value: function getDelta() {
    	      return this.scroll.lines().reduce(function (delta, line) {
    	        return delta.concat(line.delta());
    	      }, new _quillDelta2.default());
    	    }
    	  }, {
    	    key: 'getFormat',
    	    value: function getFormat(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var lines = [],
    	          leaves = [];
    	      if (length === 0) {
    	        this.scroll.path(index).forEach(function (path) {
    	          var _path = _slicedToArray(path, 1),
    	              blot = _path[0];

    	          if (blot instanceof _block2.default) {
    	            lines.push(blot);
    	          } else if (blot instanceof _parchment2.default.Leaf) {
    	            leaves.push(blot);
    	          }
    	        });
    	      } else {
    	        lines = this.scroll.lines(index, length);
    	        leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
    	      }
    	      var formatsArr = [lines, leaves].map(function (blots) {
    	        if (blots.length === 0) return {};
    	        var formats = (0, _block.bubbleFormats)(blots.shift());
    	        while (Object.keys(formats).length > 0) {
    	          var blot = blots.shift();
    	          if (blot == null) return formats;
    	          formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
    	        }
    	        return formats;
    	      });
    	      return _extend2.default.apply(_extend2.default, formatsArr);
    	    }
    	  }, {
    	    key: 'getText',
    	    value: function getText(index, length) {
    	      return this.getContents(index, length).filter(function (op) {
    	        return typeof op.insert === 'string';
    	      }).map(function (op) {
    	        return op.insert;
    	      }).join('');
    	    }
    	  }, {
    	    key: 'insertEmbed',
    	    value: function insertEmbed(index, embed, value) {
    	      this.scroll.insertAt(index, embed, value);
    	      return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
    	    }
    	  }, {
    	    key: 'insertText',
    	    value: function insertText(index, text) {
    	      var _this4 = this;

    	      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    	      this.scroll.insertAt(index, text);
    	      Object.keys(formats).forEach(function (format) {
    	        _this4.scroll.formatAt(index, text.length, format, formats[format]);
    	      });
    	      return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
    	    }
    	  }, {
    	    key: 'isBlank',
    	    value: function isBlank() {
    	      if (this.scroll.children.length == 0) return true;
    	      if (this.scroll.children.length > 1) return false;
    	      var block = this.scroll.children.head;
    	      if (block.statics.blotName !== _block2.default.blotName) return false;
    	      if (block.children.length > 1) return false;
    	      return block.children.head instanceof _break2.default;
    	    }
    	  }, {
    	    key: 'removeFormat',
    	    value: function removeFormat(index, length) {
    	      var text = this.getText(index, length);

    	      var _scroll$line3 = this.scroll.line(index + length),
    	          _scroll$line4 = _slicedToArray(_scroll$line3, 2),
    	          line = _scroll$line4[0],
    	          offset = _scroll$line4[1];

    	      var suffixLength = 0,
    	          suffix = new _quillDelta2.default();
    	      if (line != null) {
    	        if (!(line instanceof _code2.default)) {
    	          suffixLength = line.length() - offset;
    	        } else {
    	          suffixLength = line.newlineIndex(offset) - offset + 1;
    	        }
    	        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
    	      }
    	      var contents = this.getContents(index, length + suffixLength);
    	      var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
    	      var delta = new _quillDelta2.default().retain(index).concat(diff);
    	      return this.applyDelta(delta);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(change) {
    	      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    	      var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    	      var oldDelta = this.delta;
    	      if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
    	        // Optimization for character changes
    	        var textBlot = _parchment2.default.find(mutations[0].target);
    	        var formats = (0, _block.bubbleFormats)(textBlot);
    	        var index = textBlot.offset(this.scroll);
    	        var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
    	        var oldText = new _quillDelta2.default().insert(oldValue);
    	        var newText = new _quillDelta2.default().insert(textBlot.value());
    	        var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
    	        change = diffDelta.reduce(function (delta, op) {
    	          if (op.insert) {
    	            return delta.insert(op.insert, formats);
    	          } else {
    	            return delta.push(op);
    	          }
    	        }, new _quillDelta2.default());
    	        this.delta = oldDelta.compose(change);
    	      } else {
    	        this.delta = this.getDelta();
    	        if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
    	          change = oldDelta.diff(this.delta, cursorIndex);
    	        }
    	      }
    	      return change;
    	    }
    	  }]);

    	  return Editor;
    	}();

    	function combineFormats(formats, combined) {
    	  return Object.keys(combined).reduce(function (merged, name) {
    	    if (formats[name] == null) return merged;
    	    if (combined[name] === formats[name]) {
    	      merged[name] = combined[name];
    	    } else if (Array.isArray(combined[name])) {
    	      if (combined[name].indexOf(formats[name]) < 0) {
    	        merged[name] = combined[name].concat([formats[name]]);
    	      }
    	    } else {
    	      merged[name] = [combined[name], formats[name]];
    	    }
    	    return merged;
    	  }, {});
    	}

    	function normalizeDelta(delta) {
    	  return delta.reduce(function (delta, op) {
    	    if (op.insert === 1) {
    	      var attributes = (0, _clone2.default)(op.attributes);
    	      delete attributes['image'];
    	      return delta.insert({ image: op.attributes.image }, attributes);
    	    }
    	    if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
    	      op = (0, _clone2.default)(op);
    	      if (op.attributes.list) {
    	        op.attributes.list = 'ordered';
    	      } else {
    	        op.attributes.list = 'bullet';
    	        delete op.attributes.bullet;
    	      }
    	    }
    	    if (typeof op.insert === 'string') {
    	      var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    	      return delta.insert(text, op.attributes);
    	    }
    	    return delta.push(op);
    	  }, new _quillDelta2.default());
    	}

    	exports.default = Editor;

    	/***/ }),
    	/* 15 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.Range = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _emitter3 = __webpack_require__(8);

    	var _emitter4 = _interopRequireDefault(_emitter3);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var debug = (0, _logger2.default)('quill:selection');

    	var Range = function Range(index) {
    	  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	  _classCallCheck(this, Range);

    	  this.index = index;
    	  this.length = length;
    	};

    	var Selection = function () {
    	  function Selection(scroll, emitter) {
    	    var _this = this;

    	    _classCallCheck(this, Selection);

    	    this.emitter = emitter;
    	    this.scroll = scroll;
    	    this.composing = false;
    	    this.mouseDown = false;
    	    this.root = this.scroll.domNode;
    	    this.cursor = _parchment2.default.create('cursor', this);
    	    // savedRange is last non-null range
    	    this.lastRange = this.savedRange = new Range(0, 0);
    	    this.handleComposition();
    	    this.handleDragging();
    	    this.emitter.listenDOM('selectionchange', document, function () {
    	      if (!_this.mouseDown) {
    	        setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
    	      if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
    	        _this.update(_emitter4.default.sources.SILENT);
    	      }
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
    	      if (!_this.hasFocus()) return;
    	      var native = _this.getNativeRange();
    	      if (native == null) return;
    	      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
    	      // TODO unclear if this has negative side effects
    	      _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
    	        try {
    	          _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
    	        } catch (ignored) {}
    	      });
    	    });
    	    this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
    	      if (context.range) {
    	        var _context$range = context.range,
    	            startNode = _context$range.startNode,
    	            startOffset = _context$range.startOffset,
    	            endNode = _context$range.endNode,
    	            endOffset = _context$range.endOffset;

    	        _this.setNativeRange(startNode, startOffset, endNode, endOffset);
    	      }
    	    });
    	    this.update(_emitter4.default.sources.SILENT);
    	  }

    	  _createClass(Selection, [{
    	    key: 'handleComposition',
    	    value: function handleComposition() {
    	      var _this2 = this;

    	      this.root.addEventListener('compositionstart', function () {
    	        _this2.composing = true;
    	      });
    	      this.root.addEventListener('compositionend', function () {
    	        _this2.composing = false;
    	        if (_this2.cursor.parent) {
    	          var range = _this2.cursor.restore();
    	          if (!range) return;
    	          setTimeout(function () {
    	            _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
    	          }, 1);
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'handleDragging',
    	    value: function handleDragging() {
    	      var _this3 = this;

    	      this.emitter.listenDOM('mousedown', document.body, function () {
    	        _this3.mouseDown = true;
    	      });
    	      this.emitter.listenDOM('mouseup', document.body, function () {
    	        _this3.mouseDown = false;
    	        _this3.update(_emitter4.default.sources.USER);
    	      });
    	    }
    	  }, {
    	    key: 'focus',
    	    value: function focus() {
    	      if (this.hasFocus()) return;
    	      this.root.focus();
    	      this.setRange(this.savedRange);
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(_format, value) {
    	      if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
    	      this.scroll.update();
    	      var nativeRange = this.getNativeRange();
    	      if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
    	      if (nativeRange.start.node !== this.cursor.textNode) {
    	        var blot = _parchment2.default.find(nativeRange.start.node, false);
    	        if (blot == null) return;
    	        // TODO Give blot ability to not split
    	        if (blot instanceof _parchment2.default.Leaf) {
    	          var after = blot.split(nativeRange.start.offset);
    	          blot.parent.insertBefore(this.cursor, after);
    	        } else {
    	          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
    	        }
    	        this.cursor.attach();
    	      }
    	      this.cursor.format(_format, value);
    	      this.scroll.optimize();
    	      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
    	      this.update();
    	    }
    	  }, {
    	    key: 'getBounds',
    	    value: function getBounds(index) {
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    	      var scrollLength = this.scroll.length();
    	      index = Math.min(index, scrollLength - 1);
    	      length = Math.min(index + length, scrollLength - 1) - index;
    	      var node = void 0,
    	          _scroll$leaf = this.scroll.leaf(index),
    	          _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
    	          leaf = _scroll$leaf2[0],
    	          offset = _scroll$leaf2[1];
    	      if (leaf == null) return null;

    	      var _leaf$position = leaf.position(offset, true);

    	      var _leaf$position2 = _slicedToArray(_leaf$position, 2);

    	      node = _leaf$position2[0];
    	      offset = _leaf$position2[1];

    	      var range = document.createRange();
    	      if (length > 0) {
    	        range.setStart(node, offset);

    	        var _scroll$leaf3 = this.scroll.leaf(index + length);

    	        var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

    	        leaf = _scroll$leaf4[0];
    	        offset = _scroll$leaf4[1];

    	        if (leaf == null) return null;

    	        var _leaf$position3 = leaf.position(offset, true);

    	        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

    	        node = _leaf$position4[0];
    	        offset = _leaf$position4[1];

    	        range.setEnd(node, offset);
    	        return range.getBoundingClientRect();
    	      } else {
    	        var side = 'left';
    	        var rect = void 0;
    	        if (node instanceof Text) {
    	          if (offset < node.data.length) {
    	            range.setStart(node, offset);
    	            range.setEnd(node, offset + 1);
    	          } else {
    	            range.setStart(node, offset - 1);
    	            range.setEnd(node, offset);
    	            side = 'right';
    	          }
    	          rect = range.getBoundingClientRect();
    	        } else {
    	          rect = leaf.domNode.getBoundingClientRect();
    	          if (offset > 0) side = 'right';
    	        }
    	        return {
    	          bottom: rect.top + rect.height,
    	          height: rect.height,
    	          left: rect[side],
    	          right: rect[side],
    	          top: rect.top,
    	          width: 0
    	        };
    	      }
    	    }
    	  }, {
    	    key: 'getNativeRange',
    	    value: function getNativeRange() {
    	      var selection = document.getSelection();
    	      if (selection == null || selection.rangeCount <= 0) return null;
    	      var nativeRange = selection.getRangeAt(0);
    	      if (nativeRange == null) return null;
    	      var range = this.normalizeNative(nativeRange);
    	      debug.info('getNativeRange', range);
    	      return range;
    	    }
    	  }, {
    	    key: 'getRange',
    	    value: function getRange() {
    	      var normalized = this.getNativeRange();
    	      if (normalized == null) return [null, null];
    	      var range = this.normalizedToRange(normalized);
    	      return [range, normalized];
    	    }
    	  }, {
    	    key: 'hasFocus',
    	    value: function hasFocus() {
    	      return document.activeElement === this.root;
    	    }
    	  }, {
    	    key: 'normalizedToRange',
    	    value: function normalizedToRange(range) {
    	      var _this4 = this;

    	      var positions = [[range.start.node, range.start.offset]];
    	      if (!range.native.collapsed) {
    	        positions.push([range.end.node, range.end.offset]);
    	      }
    	      var indexes = positions.map(function (position) {
    	        var _position = _slicedToArray(position, 2),
    	            node = _position[0],
    	            offset = _position[1];

    	        var blot = _parchment2.default.find(node, true);
    	        var index = blot.offset(_this4.scroll);
    	        if (offset === 0) {
    	          return index;
    	        } else if (blot instanceof _parchment2.default.Container) {
    	          return index + blot.length();
    	        } else {
    	          return index + blot.index(node, offset);
    	        }
    	      });
    	      var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
    	      var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
    	      return new Range(start, end - start);
    	    }
    	  }, {
    	    key: 'normalizeNative',
    	    value: function normalizeNative(nativeRange) {
    	      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
    	        return null;
    	      }
    	      var range = {
    	        start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
    	        end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
    	        native: nativeRange
    	      };
    	      [range.start, range.end].forEach(function (position) {
    	        var node = position.node,
    	            offset = position.offset;
    	        while (!(node instanceof Text) && node.childNodes.length > 0) {
    	          if (node.childNodes.length > offset) {
    	            node = node.childNodes[offset];
    	            offset = 0;
    	          } else if (node.childNodes.length === offset) {
    	            node = node.lastChild;
    	            offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
    	          } else {
    	            break;
    	          }
    	        }
    	        position.node = node, position.offset = offset;
    	      });
    	      return range;
    	    }
    	  }, {
    	    key: 'rangeToNative',
    	    value: function rangeToNative(range) {
    	      var _this5 = this;

    	      var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
    	      var args = [];
    	      var scrollLength = this.scroll.length();
    	      indexes.forEach(function (index, i) {
    	        index = Math.min(scrollLength - 1, index);
    	        var node = void 0,
    	            _scroll$leaf5 = _this5.scroll.leaf(index),
    	            _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
    	            leaf = _scroll$leaf6[0],
    	            offset = _scroll$leaf6[1];
    	        var _leaf$position5 = leaf.position(offset, i !== 0);

    	        var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

    	        node = _leaf$position6[0];
    	        offset = _leaf$position6[1];

    	        args.push(node, offset);
    	      });
    	      if (args.length < 2) {
    	        args = args.concat(args);
    	      }
    	      return args;
    	    }
    	  }, {
    	    key: 'scrollIntoView',
    	    value: function scrollIntoView(scrollingContainer) {
    	      var range = this.lastRange;
    	      if (range == null) return;
    	      var bounds = this.getBounds(range.index, range.length);
    	      if (bounds == null) return;
    	      var limit = this.scroll.length() - 1;

    	      var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
    	          _scroll$line2 = _slicedToArray(_scroll$line, 1),
    	          first = _scroll$line2[0];

    	      var last = first;
    	      if (range.length > 0) {
    	        var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

    	        var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

    	        last = _scroll$line4[0];
    	      }
    	      if (first == null || last == null) return;
    	      var scrollBounds = scrollingContainer.getBoundingClientRect();
    	      if (bounds.top < scrollBounds.top) {
    	        scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
    	      } else if (bounds.bottom > scrollBounds.bottom) {
    	        scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
    	      }
    	    }
    	  }, {
    	    key: 'setNativeRange',
    	    value: function setNativeRange(startNode, startOffset) {
    	      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
    	      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
    	      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    	      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
    	      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
    	        return;
    	      }
    	      var selection = document.getSelection();
    	      if (selection == null) return;
    	      if (startNode != null) {
    	        if (!this.hasFocus()) this.root.focus();
    	        var native = (this.getNativeRange() || {}).native;
    	        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

    	          if (startNode.tagName == "BR") {
    	            startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
    	            startNode = startNode.parentNode;
    	          }
    	          if (endNode.tagName == "BR") {
    	            endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
    	            endNode = endNode.parentNode;
    	          }
    	          var range = document.createRange();
    	          range.setStart(startNode, startOffset);
    	          range.setEnd(endNode, endOffset);
    	          selection.removeAllRanges();
    	          selection.addRange(range);
    	        }
    	      } else {
    	        selection.removeAllRanges();
    	        this.root.blur();
    	        document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
    	      }
    	    }
    	  }, {
    	    key: 'setRange',
    	    value: function setRange(range) {
    	      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

    	      if (typeof force === 'string') {
    	        source = force;
    	        force = false;
    	      }
    	      debug.info('setRange', range);
    	      if (range != null) {
    	        var args = this.rangeToNative(range);
    	        this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
    	      } else {
    	        this.setNativeRange(null);
    	      }
    	      this.update(source);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

    	      var oldRange = this.lastRange;

    	      var _getRange = this.getRange(),
    	          _getRange2 = _slicedToArray(_getRange, 2),
    	          lastRange = _getRange2[0],
    	          nativeRange = _getRange2[1];

    	      this.lastRange = lastRange;
    	      if (this.lastRange != null) {
    	        this.savedRange = this.lastRange;
    	      }
    	      if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
    	        var _emitter;

    	        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
    	          this.cursor.restore();
    	        }
    	        var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
    	        (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
    	        if (source !== _emitter4.default.sources.SILENT) {
    	          var _emitter2;

    	          (_emitter2 = this.emitter).emit.apply(_emitter2, args);
    	        }
    	      }
    	    }
    	  }]);

    	  return Selection;
    	}();

    	function contains(parent, descendant) {
    	  try {
    	    // Firefox inserts inaccessible nodes around video elements
    	    descendant.parentNode;
    	  } catch (e) {
    	    return false;
    	  }
    	  // IE11 has bug with Text nodes
    	  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
    	  if (descendant instanceof Text) {
    	    descendant = descendant.parentNode;
    	  }
    	  return parent.contains(descendant);
    	}

    	exports.Range = Range;
    	exports.default = Selection;

    	/***/ }),
    	/* 16 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Break = function (_Parchment$Embed) {
    	  _inherits(Break, _Parchment$Embed);

    	  function Break() {
    	    _classCallCheck(this, Break);

    	    return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
    	  }

    	  _createClass(Break, [{
    	    key: 'insertInto',
    	    value: function insertInto(parent, ref) {
    	      if (parent.children.length === 0) {
    	        _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
    	      } else {
    	        this.remove();
    	      }
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      return 0;
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value() {
    	      return '';
    	    }
    	  }], [{
    	    key: 'value',
    	    value: function value() {
    	      return undefined;
    	    }
    	  }]);

    	  return Break;
    	}(_parchment2.default.Embed);

    	Break.blotName = 'break';
    	Break.tagName = 'BR';

    	exports.default = Break;

    	/***/ }),
    	/* 17 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var linked_list_1 = __webpack_require__(44);
    	var shadow_1 = __webpack_require__(30);
    	var Registry = __webpack_require__(1);
    	var ContainerBlot = /** @class */ (function (_super) {
    	    __extends(ContainerBlot, _super);
    	    function ContainerBlot(domNode) {
    	        var _this = _super.call(this, domNode) || this;
    	        _this.build();
    	        return _this;
    	    }
    	    ContainerBlot.prototype.appendChild = function (other) {
    	        this.insertBefore(other);
    	    };
    	    ContainerBlot.prototype.attach = function () {
    	        _super.prototype.attach.call(this);
    	        this.children.forEach(function (child) {
    	            child.attach();
    	        });
    	    };
    	    ContainerBlot.prototype.build = function () {
    	        var _this = this;
    	        this.children = new linked_list_1.default();
    	        // Need to be reversed for if DOM nodes already in order
    	        [].slice
    	            .call(this.domNode.childNodes)
    	            .reverse()
    	            .forEach(function (node) {
    	            try {
    	                var child = makeBlot(node);
    	                _this.insertBefore(child, _this.children.head || undefined);
    	            }
    	            catch (err) {
    	                if (err instanceof Registry.ParchmentError)
    	                    return;
    	                else
    	                    throw err;
    	            }
    	        });
    	    };
    	    ContainerBlot.prototype.deleteAt = function (index, length) {
    	        if (index === 0 && length === this.length()) {
    	            return this.remove();
    	        }
    	        this.children.forEachAt(index, length, function (child, offset, length) {
    	            child.deleteAt(offset, length);
    	        });
    	    };
    	    ContainerBlot.prototype.descendant = function (criteria, index) {
    	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
    	        if ((criteria.blotName == null && criteria(child)) ||
    	            (criteria.blotName != null && child instanceof criteria)) {
    	            return [child, offset];
    	        }
    	        else if (child instanceof ContainerBlot) {
    	            return child.descendant(criteria, offset);
    	        }
    	        else {
    	            return [null, -1];
    	        }
    	    };
    	    ContainerBlot.prototype.descendants = function (criteria, index, length) {
    	        if (index === void 0) { index = 0; }
    	        if (length === void 0) { length = Number.MAX_VALUE; }
    	        var descendants = [];
    	        var lengthLeft = length;
    	        this.children.forEachAt(index, length, function (child, index, length) {
    	            if ((criteria.blotName == null && criteria(child)) ||
    	                (criteria.blotName != null && child instanceof criteria)) {
    	                descendants.push(child);
    	            }
    	            if (child instanceof ContainerBlot) {
    	                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
    	            }
    	            lengthLeft -= length;
    	        });
    	        return descendants;
    	    };
    	    ContainerBlot.prototype.detach = function () {
    	        this.children.forEach(function (child) {
    	            child.detach();
    	        });
    	        _super.prototype.detach.call(this);
    	    };
    	    ContainerBlot.prototype.formatAt = function (index, length, name, value) {
    	        this.children.forEachAt(index, length, function (child, offset, length) {
    	            child.formatAt(offset, length, name, value);
    	        });
    	    };
    	    ContainerBlot.prototype.insertAt = function (index, value, def) {
    	        var _a = this.children.find(index), child = _a[0], offset = _a[1];
    	        if (child) {
    	            child.insertAt(offset, value, def);
    	        }
    	        else {
    	            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
    	            this.appendChild(blot);
    	        }
    	    };
    	    ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
    	        if (this.statics.allowedChildren != null &&
    	            !this.statics.allowedChildren.some(function (child) {
    	                return childBlot instanceof child;
    	            })) {
    	            throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
    	        }
    	        childBlot.insertInto(this, refBlot);
    	    };
    	    ContainerBlot.prototype.length = function () {
    	        return this.children.reduce(function (memo, child) {
    	            return memo + child.length();
    	        }, 0);
    	    };
    	    ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
    	        this.children.forEach(function (child) {
    	            targetParent.insertBefore(child, refNode);
    	        });
    	    };
    	    ContainerBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        if (this.children.length === 0) {
    	            if (this.statics.defaultChild != null) {
    	                var child = Registry.create(this.statics.defaultChild);
    	                this.appendChild(child);
    	                child.optimize(context);
    	            }
    	            else {
    	                this.remove();
    	            }
    	        }
    	    };
    	    ContainerBlot.prototype.path = function (index, inclusive) {
    	        if (inclusive === void 0) { inclusive = false; }
    	        var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
    	        var position = [[this, index]];
    	        if (child instanceof ContainerBlot) {
    	            return position.concat(child.path(offset, inclusive));
    	        }
    	        else if (child != null) {
    	            position.push([child, offset]);
    	        }
    	        return position;
    	    };
    	    ContainerBlot.prototype.removeChild = function (child) {
    	        this.children.remove(child);
    	    };
    	    ContainerBlot.prototype.replace = function (target) {
    	        if (target instanceof ContainerBlot) {
    	            target.moveChildren(this);
    	        }
    	        _super.prototype.replace.call(this, target);
    	    };
    	    ContainerBlot.prototype.split = function (index, force) {
    	        if (force === void 0) { force = false; }
    	        if (!force) {
    	            if (index === 0)
    	                return this;
    	            if (index === this.length())
    	                return this.next;
    	        }
    	        var after = this.clone();
    	        this.parent.insertBefore(after, this.next);
    	        this.children.forEachAt(index, this.length(), function (child, offset, length) {
    	            child = child.split(offset, force);
    	            after.appendChild(child);
    	        });
    	        return after;
    	    };
    	    ContainerBlot.prototype.unwrap = function () {
    	        this.moveChildren(this.parent, this.next);
    	        this.remove();
    	    };
    	    ContainerBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        var addedNodes = [];
    	        var removedNodes = [];
    	        mutations.forEach(function (mutation) {
    	            if (mutation.target === _this.domNode && mutation.type === 'childList') {
    	                addedNodes.push.apply(addedNodes, mutation.addedNodes);
    	                removedNodes.push.apply(removedNodes, mutation.removedNodes);
    	            }
    	        });
    	        removedNodes.forEach(function (node) {
    	            // Check node has actually been removed
    	            // One exception is Chrome does not immediately remove IFRAMEs
    	            // from DOM but MutationRecord is correct in its reported removal
    	            if (node.parentNode != null &&
    	                // @ts-ignore
    	                node.tagName !== 'IFRAME' &&
    	                document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    	                return;
    	            }
    	            var blot = Registry.find(node);
    	            if (blot == null)
    	                return;
    	            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
    	                blot.detach();
    	            }
    	        });
    	        addedNodes
    	            .filter(function (node) {
    	            return node.parentNode == _this.domNode;
    	        })
    	            .sort(function (a, b) {
    	            if (a === b)
    	                return 0;
    	            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
    	                return 1;
    	            }
    	            return -1;
    	        })
    	            .forEach(function (node) {
    	            var refBlot = null;
    	            if (node.nextSibling != null) {
    	                refBlot = Registry.find(node.nextSibling);
    	            }
    	            var blot = makeBlot(node);
    	            if (blot.next != refBlot || blot.next == null) {
    	                if (blot.parent != null) {
    	                    blot.parent.removeChild(_this);
    	                }
    	                _this.insertBefore(blot, refBlot || undefined);
    	            }
    	        });
    	    };
    	    return ContainerBlot;
    	}(shadow_1.default));
    	function makeBlot(node) {
    	    var blot = Registry.find(node);
    	    if (blot == null) {
    	        try {
    	            blot = Registry.create(node);
    	        }
    	        catch (e) {
    	            blot = Registry.create(Registry.Scope.INLINE);
    	            [].slice.call(node.childNodes).forEach(function (child) {
    	                // @ts-ignore
    	                blot.domNode.appendChild(child);
    	            });
    	            if (node.parentNode) {
    	                node.parentNode.replaceChild(blot.domNode, node);
    	            }
    	            blot.attach();
    	        }
    	    }
    	    return blot;
    	}
    	exports.default = ContainerBlot;


    	/***/ }),
    	/* 18 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	var store_1 = __webpack_require__(31);
    	var container_1 = __webpack_require__(17);
    	var Registry = __webpack_require__(1);
    	var FormatBlot = /** @class */ (function (_super) {
    	    __extends(FormatBlot, _super);
    	    function FormatBlot(domNode) {
    	        var _this = _super.call(this, domNode) || this;
    	        _this.attributes = new store_1.default(_this.domNode);
    	        return _this;
    	    }
    	    FormatBlot.formats = function (domNode) {
    	        if (typeof this.tagName === 'string') {
    	            return true;
    	        }
    	        else if (Array.isArray(this.tagName)) {
    	            return domNode.tagName.toLowerCase();
    	        }
    	        return undefined;
    	    };
    	    FormatBlot.prototype.format = function (name, value) {
    	        var format = Registry.query(name);
    	        if (format instanceof attributor_1.default) {
    	            this.attributes.attribute(format, value);
    	        }
    	        else if (value) {
    	            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
    	                this.replaceWith(name, value);
    	            }
    	        }
    	    };
    	    FormatBlot.prototype.formats = function () {
    	        var formats = this.attributes.values();
    	        var format = this.statics.formats(this.domNode);
    	        if (format != null) {
    	            formats[this.statics.blotName] = format;
    	        }
    	        return formats;
    	    };
    	    FormatBlot.prototype.replaceWith = function (name, value) {
    	        var replacement = _super.prototype.replaceWith.call(this, name, value);
    	        this.attributes.copy(replacement);
    	        return replacement;
    	    };
    	    FormatBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        _super.prototype.update.call(this, mutations, context);
    	        if (mutations.some(function (mutation) {
    	            return mutation.target === _this.domNode && mutation.type === 'attributes';
    	        })) {
    	            this.attributes.build();
    	        }
    	    };
    	    FormatBlot.prototype.wrap = function (name, value) {
    	        var wrapper = _super.prototype.wrap.call(this, name, value);
    	        if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
    	            this.attributes.move(wrapper);
    	        }
    	        return wrapper;
    	    };
    	    return FormatBlot;
    	}(container_1.default));
    	exports.default = FormatBlot;


    	/***/ }),
    	/* 19 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var shadow_1 = __webpack_require__(30);
    	var Registry = __webpack_require__(1);
    	var LeafBlot = /** @class */ (function (_super) {
    	    __extends(LeafBlot, _super);
    	    function LeafBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    LeafBlot.value = function (domNode) {
    	        return true;
    	    };
    	    LeafBlot.prototype.index = function (node, offset) {
    	        if (this.domNode === node ||
    	            this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    	            return Math.min(offset, 1);
    	        }
    	        return -1;
    	    };
    	    LeafBlot.prototype.position = function (index, inclusive) {
    	        var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
    	        if (index > 0)
    	            offset += 1;
    	        return [this.parent.domNode, offset];
    	    };
    	    LeafBlot.prototype.value = function () {
    	        var _a;
    	        return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
    	    };
    	    LeafBlot.scope = Registry.Scope.INLINE_BLOT;
    	    return LeafBlot;
    	}(shadow_1.default));
    	exports.default = LeafBlot;


    	/***/ }),
    	/* 20 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var equal = __webpack_require__(11);
    	var extend = __webpack_require__(3);


    	var lib = {
    	  attributes: {
    	    compose: function (a, b, keepNull) {
    	      if (typeof a !== 'object') a = {};
    	      if (typeof b !== 'object') b = {};
    	      var attributes = extend(true, {}, b);
    	      if (!keepNull) {
    	        attributes = Object.keys(attributes).reduce(function (copy, key) {
    	          if (attributes[key] != null) {
    	            copy[key] = attributes[key];
    	          }
    	          return copy;
    	        }, {});
    	      }
    	      for (var key in a) {
    	        if (a[key] !== undefined && b[key] === undefined) {
    	          attributes[key] = a[key];
    	        }
    	      }
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    },

    	    diff: function(a, b) {
    	      if (typeof a !== 'object') a = {};
    	      if (typeof b !== 'object') b = {};
    	      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
    	        if (!equal(a[key], b[key])) {
    	          attributes[key] = b[key] === undefined ? null : b[key];
    	        }
    	        return attributes;
    	      }, {});
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    },

    	    transform: function (a, b, priority) {
    	      if (typeof a !== 'object') return b;
    	      if (typeof b !== 'object') return undefined;
    	      if (!priority) return b;  // b simply overwrites us without priority
    	      var attributes = Object.keys(b).reduce(function (attributes, key) {
    	        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
    	        return attributes;
    	      }, {});
    	      return Object.keys(attributes).length > 0 ? attributes : undefined;
    	    }
    	  },

    	  iterator: function (ops) {
    	    return new Iterator(ops);
    	  },

    	  length: function (op) {
    	    if (typeof op['delete'] === 'number') {
    	      return op['delete'];
    	    } else if (typeof op.retain === 'number') {
    	      return op.retain;
    	    } else {
    	      return typeof op.insert === 'string' ? op.insert.length : 1;
    	    }
    	  }
    	};


    	function Iterator(ops) {
    	  this.ops = ops;
    	  this.index = 0;
    	  this.offset = 0;
    	}
    	Iterator.prototype.hasNext = function () {
    	  return this.peekLength() < Infinity;
    	};

    	Iterator.prototype.next = function (length) {
    	  if (!length) length = Infinity;
    	  var nextOp = this.ops[this.index];
    	  if (nextOp) {
    	    var offset = this.offset;
    	    var opLength = lib.length(nextOp);
    	    if (length >= opLength - offset) {
    	      length = opLength - offset;
    	      this.index += 1;
    	      this.offset = 0;
    	    } else {
    	      this.offset += length;
    	    }
    	    if (typeof nextOp['delete'] === 'number') {
    	      return { 'delete': length };
    	    } else {
    	      var retOp = {};
    	      if (nextOp.attributes) {
    	        retOp.attributes = nextOp.attributes;
    	      }
    	      if (typeof nextOp.retain === 'number') {
    	        retOp.retain = length;
    	      } else if (typeof nextOp.insert === 'string') {
    	        retOp.insert = nextOp.insert.substr(offset, length);
    	      } else {
    	        // offset should === 0, length should === 1
    	        retOp.insert = nextOp.insert;
    	      }
    	      return retOp;
    	    }
    	  } else {
    	    return { retain: Infinity };
    	  }
    	};

    	Iterator.prototype.peek = function () {
    	  return this.ops[this.index];
    	};

    	Iterator.prototype.peekLength = function () {
    	  if (this.ops[this.index]) {
    	    // Should never return 0 if our index is being managed correctly
    	    return lib.length(this.ops[this.index]) - this.offset;
    	  } else {
    	    return Infinity;
    	  }
    	};

    	Iterator.prototype.peekType = function () {
    	  if (this.ops[this.index]) {
    	    if (typeof this.ops[this.index]['delete'] === 'number') {
    	      return 'delete';
    	    } else if (typeof this.ops[this.index].retain === 'number') {
    	      return 'retain';
    	    } else {
    	      return 'insert';
    	    }
    	  }
    	  return 'retain';
    	};

    	Iterator.prototype.rest = function () {
    	  if (!this.hasNext()) {
    	    return [];
    	  } else if (this.offset === 0) {
    	    return this.ops.slice(this.index);
    	  } else {
    	    var offset = this.offset;
    	    var index = this.index;
    	    var next = this.next();
    	    var rest = this.ops.slice(this.index);
    	    this.offset = offset;
    	    this.index = index;
    	    return [next].concat(rest);
    	  }
    	};


    	module.exports = lib;


    	/***/ }),
    	/* 21 */
    	/***/ (function(module, exports) {

    	var clone = (function() {

    	function _instanceof(obj, type) {
    	  return type != null && obj instanceof type;
    	}

    	var nativeMap;
    	try {
    	  nativeMap = Map;
    	} catch(_) {
    	  // maybe a reference error because no `Map`. Give it a dummy value that no
    	  // value will ever be an instanceof.
    	  nativeMap = function() {};
    	}

    	var nativeSet;
    	try {
    	  nativeSet = Set;
    	} catch(_) {
    	  nativeSet = function() {};
    	}

    	var nativePromise;
    	try {
    	  nativePromise = Promise;
    	} catch(_) {
    	  nativePromise = function() {};
    	}

    	/**
    	 * Clones (copies) an Object using deep copying.
    	 *
    	 * This function supports circular references by default, but if you are certain
    	 * there are no circular references in your object, you can save some CPU time
    	 * by calling clone(obj, false).
    	 *
    	 * Caution: if `circular` is false and `parent` contains circular references,
    	 * your program may enter an infinite loop and crash.
    	 *
    	 * @param `parent` - the object to be cloned
    	 * @param `circular` - set to true if the object to be cloned may contain
    	 *    circular references. (optional - true by default)
    	 * @param `depth` - set to a number if the object is only to be cloned to
    	 *    a particular depth. (optional - defaults to Infinity)
    	 * @param `prototype` - sets the prototype to be used when cloning an object.
    	 *    (optional - defaults to parent prototype).
    	 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
    	 *    should be cloned as well. Non-enumerable properties on the prototype
    	 *    chain will be ignored. (optional - false by default)
    	*/
    	function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    	  if (typeof circular === 'object') {
    	    depth = circular.depth;
    	    prototype = circular.prototype;
    	    includeNonEnumerable = circular.includeNonEnumerable;
    	    circular = circular.circular;
    	  }
    	  // maintain two arrays for circular references, where corresponding parents
    	  // and children have the same index
    	  var allParents = [];
    	  var allChildren = [];

    	  var useBuffer = typeof Buffer != 'undefined';

    	  if (typeof circular == 'undefined')
    	    circular = true;

    	  if (typeof depth == 'undefined')
    	    depth = Infinity;

    	  // recurse this function so we don't reset allParents and allChildren
    	  function _clone(parent, depth) {
    	    // cloning null always returns null
    	    if (parent === null)
    	      return null;

    	    if (depth === 0)
    	      return parent;

    	    var child;
    	    var proto;
    	    if (typeof parent != 'object') {
    	      return parent;
    	    }

    	    if (_instanceof(parent, nativeMap)) {
    	      child = new nativeMap();
    	    } else if (_instanceof(parent, nativeSet)) {
    	      child = new nativeSet();
    	    } else if (_instanceof(parent, nativePromise)) {
    	      child = new nativePromise(function (resolve, reject) {
    	        parent.then(function(value) {
    	          resolve(_clone(value, depth - 1));
    	        }, function(err) {
    	          reject(_clone(err, depth - 1));
    	        });
    	      });
    	    } else if (clone.__isArray(parent)) {
    	      child = [];
    	    } else if (clone.__isRegExp(parent)) {
    	      child = new RegExp(parent.source, __getRegExpFlags(parent));
    	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    	    } else if (clone.__isDate(parent)) {
    	      child = new Date(parent.getTime());
    	    } else if (useBuffer && Buffer.isBuffer(parent)) {
    	      if (Buffer.allocUnsafe) {
    	        // Node.js >= 4.5.0
    	        child = Buffer.allocUnsafe(parent.length);
    	      } else {
    	        // Older Node.js versions
    	        child = new Buffer(parent.length);
    	      }
    	      parent.copy(child);
    	      return child;
    	    } else if (_instanceof(parent, Error)) {
    	      child = Object.create(parent);
    	    } else {
    	      if (typeof prototype == 'undefined') {
    	        proto = Object.getPrototypeOf(parent);
    	        child = Object.create(proto);
    	      }
    	      else {
    	        child = Object.create(prototype);
    	        proto = prototype;
    	      }
    	    }

    	    if (circular) {
    	      var index = allParents.indexOf(parent);

    	      if (index != -1) {
    	        return allChildren[index];
    	      }
    	      allParents.push(parent);
    	      allChildren.push(child);
    	    }

    	    if (_instanceof(parent, nativeMap)) {
    	      parent.forEach(function(value, key) {
    	        var keyChild = _clone(key, depth - 1);
    	        var valueChild = _clone(value, depth - 1);
    	        child.set(keyChild, valueChild);
    	      });
    	    }
    	    if (_instanceof(parent, nativeSet)) {
    	      parent.forEach(function(value) {
    	        var entryChild = _clone(value, depth - 1);
    	        child.add(entryChild);
    	      });
    	    }

    	    for (var i in parent) {
    	      var attrs;
    	      if (proto) {
    	        attrs = Object.getOwnPropertyDescriptor(proto, i);
    	      }

    	      if (attrs && attrs.set == null) {
    	        continue;
    	      }
    	      child[i] = _clone(parent[i], depth - 1);
    	    }

    	    if (Object.getOwnPropertySymbols) {
    	      var symbols = Object.getOwnPropertySymbols(parent);
    	      for (var i = 0; i < symbols.length; i++) {
    	        // Don't need to worry about cloning a symbol because it is a primitive,
    	        // like a number or string.
    	        var symbol = symbols[i];
    	        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
    	        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
    	          continue;
    	        }
    	        child[symbol] = _clone(parent[symbol], depth - 1);
    	        if (!descriptor.enumerable) {
    	          Object.defineProperty(child, symbol, {
    	            enumerable: false
    	          });
    	        }
    	      }
    	    }

    	    if (includeNonEnumerable) {
    	      var allPropertyNames = Object.getOwnPropertyNames(parent);
    	      for (var i = 0; i < allPropertyNames.length; i++) {
    	        var propertyName = allPropertyNames[i];
    	        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
    	        if (descriptor && descriptor.enumerable) {
    	          continue;
    	        }
    	        child[propertyName] = _clone(parent[propertyName], depth - 1);
    	        Object.defineProperty(child, propertyName, {
    	          enumerable: false
    	        });
    	      }
    	    }

    	    return child;
    	  }

    	  return _clone(parent, depth);
    	}

    	/**
    	 * Simple flat clone using prototype, accepts only objects, usefull for property
    	 * override on FLAT configuration object (no nested props).
    	 *
    	 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
    	 * works.
    	 */
    	clone.clonePrototype = function clonePrototype(parent) {
    	  if (parent === null)
    	    return null;

    	  var c = function () {};
    	  c.prototype = parent;
    	  return new c();
    	};

    	// private utility functions

    	function __objToStr(o) {
    	  return Object.prototype.toString.call(o);
    	}
    	clone.__objToStr = __objToStr;

    	function __isDate(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object Date]';
    	}
    	clone.__isDate = __isDate;

    	function __isArray(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object Array]';
    	}
    	clone.__isArray = __isArray;

    	function __isRegExp(o) {
    	  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    	}
    	clone.__isRegExp = __isRegExp;

    	function __getRegExpFlags(re) {
    	  var flags = '';
    	  if (re.global) flags += 'g';
    	  if (re.ignoreCase) flags += 'i';
    	  if (re.multiline) flags += 'm';
    	  return flags;
    	}
    	clone.__getRegExpFlags = __getRegExpFlags;

    	return clone;
    	})();

    	if (typeof module === 'object' && module.exports) {
    	  module.exports = clone;
    	}


    	/***/ }),
    	/* 22 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	function isLine(blot) {
    	  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
    	}

    	var Scroll = function (_Parchment$Scroll) {
    	  _inherits(Scroll, _Parchment$Scroll);

    	  function Scroll(domNode, config) {
    	    _classCallCheck(this, Scroll);

    	    var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

    	    _this.emitter = config.emitter;
    	    if (Array.isArray(config.whitelist)) {
    	      _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
    	        whitelist[format] = true;
    	        return whitelist;
    	      }, {});
    	    }
    	    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
    	    _this.domNode.addEventListener('DOMNodeInserted', function () {});
    	    _this.optimize();
    	    _this.enable();
    	    return _this;
    	  }

    	  _createClass(Scroll, [{
    	    key: 'batchStart',
    	    value: function batchStart() {
    	      this.batch = true;
    	    }
    	  }, {
    	    key: 'batchEnd',
    	    value: function batchEnd() {
    	      this.batch = false;
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'deleteAt',
    	    value: function deleteAt(index, length) {
    	      var _line = this.line(index),
    	          _line2 = _slicedToArray(_line, 2),
    	          first = _line2[0],
    	          offset = _line2[1];

    	      var _line3 = this.line(index + length),
    	          _line4 = _slicedToArray(_line3, 1),
    	          last = _line4[0];

    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
    	      if (last != null && first !== last && offset > 0) {
    	        if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
    	          this.optimize();
    	          return;
    	        }
    	        if (first instanceof _code2.default) {
    	          var newlineIndex = first.newlineIndex(first.length(), true);
    	          if (newlineIndex > -1) {
    	            first = first.split(newlineIndex + 1);
    	            if (first === last) {
    	              this.optimize();
    	              return;
    	            }
    	          }
    	        } else if (last instanceof _code2.default) {
    	          var _newlineIndex = last.newlineIndex(0);
    	          if (_newlineIndex > -1) {
    	            last.split(_newlineIndex + 1);
    	          }
    	        }
    	        var ref = last.children.head instanceof _break2.default ? null : last.children.head;
    	        first.moveChildren(last, ref);
    	        first.remove();
    	      }
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'enable',
    	    value: function enable() {
    	      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    	      this.domNode.setAttribute('contenteditable', enabled);
    	    }
    	  }, {
    	    key: 'formatAt',
    	    value: function formatAt(index, length, format, value) {
    	      if (this.whitelist != null && !this.whitelist[format]) return;
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'insertAt',
    	    value: function insertAt(index, value, def) {
    	      if (def != null && this.whitelist != null && !this.whitelist[value]) return;
    	      if (index >= this.length()) {
    	        if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
    	          var blot = _parchment2.default.create(this.statics.defaultChild);
    	          this.appendChild(blot);
    	          if (def == null && value.endsWith('\n')) {
    	            value = value.slice(0, -1);
    	          }
    	          blot.insertAt(0, value, def);
    	        } else {
    	          var embed = _parchment2.default.create(value, def);
    	          this.appendChild(embed);
    	        }
    	      } else {
    	        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
    	      }
    	      this.optimize();
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
    	        var wrapper = _parchment2.default.create(this.statics.defaultChild);
    	        wrapper.appendChild(blot);
    	        blot = wrapper;
    	      }
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
    	    }
    	  }, {
    	    key: 'leaf',
    	    value: function leaf(index) {
    	      return this.path(index).pop() || [null, -1];
    	    }
    	  }, {
    	    key: 'line',
    	    value: function line(index) {
    	      if (index === this.length()) {
    	        return this.line(index - 1);
    	      }
    	      return this.descendant(isLine, index);
    	    }
    	  }, {
    	    key: 'lines',
    	    value: function lines() {
    	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    	      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

    	      var getLines = function getLines(blot, index, length) {
    	        var lines = [],
    	            lengthLeft = length;
    	        blot.children.forEachAt(index, length, function (child, index, length) {
    	          if (isLine(child)) {
    	            lines.push(child);
    	          } else if (child instanceof _parchment2.default.Container) {
    	            lines = lines.concat(getLines(child, index, lengthLeft));
    	          }
    	          lengthLeft -= length;
    	        });
    	        return lines;
    	      };
    	      return getLines(this, index, length);
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize() {
    	      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	      if (this.batch === true) return;
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
    	      }
    	    }
    	  }, {
    	    key: 'path',
    	    value: function path(index) {
    	      return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations) {
    	      if (this.batch === true) return;
    	      var source = _emitter2.default.sources.USER;
    	      if (typeof mutations === 'string') {
    	        source = mutations;
    	      }
    	      if (!Array.isArray(mutations)) {
    	        mutations = this.observer.takeRecords();
    	      }
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
    	      }
    	      _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
    	      if (mutations.length > 0) {
    	        this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
    	      }
    	    }
    	  }]);

    	  return Scroll;
    	}(_parchment2.default.Scroll);

    	Scroll.blotName = 'scroll';
    	Scroll.className = 'ql-editor';
    	Scroll.tagName = 'DIV';
    	Scroll.defaultChild = 'block';
    	Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

    	exports.default = Scroll;

    	/***/ }),
    	/* 23 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.SHORTKEY = exports.default = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _clone = __webpack_require__(21);

    	var _clone2 = _interopRequireDefault(_clone);

    	var _deepEqual = __webpack_require__(11);

    	var _deepEqual2 = _interopRequireDefault(_deepEqual);

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _op = __webpack_require__(20);

    	var _op2 = _interopRequireDefault(_op);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:keyboard');

    	var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

    	var Keyboard = function (_Module) {
    	  _inherits(Keyboard, _Module);

    	  _createClass(Keyboard, null, [{
    	    key: 'match',
    	    value: function match(evt, binding) {
    	      binding = normalize(binding);
    	      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
    	        return !!binding[key] !== evt[key] && binding[key] !== null;
    	      })) {
    	        return false;
    	      }
    	      return binding.key === (evt.which || evt.keyCode);
    	    }
    	  }]);

    	  function Keyboard(quill, options) {
    	    _classCallCheck(this, Keyboard);

    	    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

    	    _this.bindings = {};
    	    Object.keys(_this.options.bindings).forEach(function (name) {
    	      if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
    	        return;
    	      }
    	      if (_this.options.bindings[name]) {
    	        _this.addBinding(_this.options.bindings[name]);
    	      }
    	    });
    	    _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
    	    _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
    	    if (/Firefox/i.test(navigator.userAgent)) {
    	      // Need to handle delete and backspace for Firefox in the general case #1171
    	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
    	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
    	    } else {
    	      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
    	      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
    	    }
    	    _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
    	    _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
    	    _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
    	    _this.listen();
    	    return _this;
    	  }

    	  _createClass(Keyboard, [{
    	    key: 'addBinding',
    	    value: function addBinding(key) {
    	      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    	      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	      var binding = normalize(key);
    	      if (binding == null || binding.key == null) {
    	        return debug.warn('Attempted to add invalid keyboard binding', binding);
    	      }
    	      if (typeof context === 'function') {
    	        context = { handler: context };
    	      }
    	      if (typeof handler === 'function') {
    	        handler = { handler: handler };
    	      }
    	      binding = (0, _extend2.default)(binding, context, handler);
    	      this.bindings[binding.key] = this.bindings[binding.key] || [];
    	      this.bindings[binding.key].push(binding);
    	    }
    	  }, {
    	    key: 'listen',
    	    value: function listen() {
    	      var _this2 = this;

    	      this.quill.root.addEventListener('keydown', function (evt) {
    	        if (evt.defaultPrevented) return;
    	        var which = evt.which || evt.keyCode;
    	        var bindings = (_this2.bindings[which] || []).filter(function (binding) {
    	          return Keyboard.match(evt, binding);
    	        });
    	        if (bindings.length === 0) return;
    	        var range = _this2.quill.getSelection();
    	        if (range == null || !_this2.quill.hasFocus()) return;

    	        var _quill$getLine = _this2.quill.getLine(range.index),
    	            _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
    	            line = _quill$getLine2[0],
    	            offset = _quill$getLine2[1];

    	        var _quill$getLeaf = _this2.quill.getLeaf(range.index),
    	            _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
    	            leafStart = _quill$getLeaf2[0],
    	            offsetStart = _quill$getLeaf2[1];

    	        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
    	            _ref2 = _slicedToArray(_ref, 2),
    	            leafEnd = _ref2[0],
    	            offsetEnd = _ref2[1];

    	        var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
    	        var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
    	        var curContext = {
    	          collapsed: range.length === 0,
    	          empty: range.length === 0 && line.length() <= 1,
    	          format: _this2.quill.getFormat(range),
    	          offset: offset,
    	          prefix: prefixText,
    	          suffix: suffixText
    	        };
    	        var prevented = bindings.some(function (binding) {
    	          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
    	          if (binding.empty != null && binding.empty !== curContext.empty) return false;
    	          if (binding.offset != null && binding.offset !== curContext.offset) return false;
    	          if (Array.isArray(binding.format)) {
    	            // any format is present
    	            if (binding.format.every(function (name) {
    	              return curContext.format[name] == null;
    	            })) {
    	              return false;
    	            }
    	          } else if (_typeof(binding.format) === 'object') {
    	            // all formats must match
    	            if (!Object.keys(binding.format).every(function (name) {
    	              if (binding.format[name] === true) return curContext.format[name] != null;
    	              if (binding.format[name] === false) return curContext.format[name] == null;
    	              return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
    	            })) {
    	              return false;
    	            }
    	          }
    	          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
    	          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
    	          return binding.handler.call(_this2, range, curContext) !== true;
    	        });
    	        if (prevented) {
    	          evt.preventDefault();
    	        }
    	      });
    	    }
    	  }]);

    	  return Keyboard;
    	}(_module2.default);

    	Keyboard.keys = {
    	  BACKSPACE: 8,
    	  TAB: 9,
    	  ENTER: 13,
    	  ESCAPE: 27,
    	  LEFT: 37,
    	  UP: 38,
    	  RIGHT: 39,
    	  DOWN: 40,
    	  DELETE: 46
    	};

    	Keyboard.DEFAULTS = {
    	  bindings: {
    	    'bold': makeFormatHandler('bold'),
    	    'italic': makeFormatHandler('italic'),
    	    'underline': makeFormatHandler('underline'),
    	    'indent': {
    	      // highlight tab or tab at beginning of list, indent or blockquote
    	      key: Keyboard.keys.TAB,
    	      format: ['blockquote', 'indent', 'list'],
    	      handler: function handler(range, context) {
    	        if (context.collapsed && context.offset !== 0) return true;
    	        this.quill.format('indent', '+1', _quill2.default.sources.USER);
    	      }
    	    },
    	    'outdent': {
    	      key: Keyboard.keys.TAB,
    	      shiftKey: true,
    	      format: ['blockquote', 'indent', 'list'],
    	      // highlight tab or tab at beginning of list, indent or blockquote
    	      handler: function handler(range, context) {
    	        if (context.collapsed && context.offset !== 0) return true;
    	        this.quill.format('indent', '-1', _quill2.default.sources.USER);
    	      }
    	    },
    	    'outdent backspace': {
    	      key: Keyboard.keys.BACKSPACE,
    	      collapsed: true,
    	      shiftKey: null,
    	      metaKey: null,
    	      ctrlKey: null,
    	      altKey: null,
    	      format: ['indent', 'list'],
    	      offset: 0,
    	      handler: function handler(range, context) {
    	        if (context.format.indent != null) {
    	          this.quill.format('indent', '-1', _quill2.default.sources.USER);
    	        } else if (context.format.list != null) {
    	          this.quill.format('list', false, _quill2.default.sources.USER);
    	        }
    	      }
    	    },
    	    'indent code-block': makeCodeBlockHandler(true),
    	    'outdent code-block': makeCodeBlockHandler(false),
    	    'remove tab': {
    	      key: Keyboard.keys.TAB,
    	      shiftKey: true,
    	      collapsed: true,
    	      prefix: /\t$/,
    	      handler: function handler(range) {
    	        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
    	      }
    	    },
    	    'tab': {
    	      key: Keyboard.keys.TAB,
    	      handler: function handler(range) {
    	        this.quill.history.cutoff();
    	        var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	      }
    	    },
    	    'list empty enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['list'],
    	      empty: true,
    	      handler: function handler(range, context) {
    	        this.quill.format('list', false, _quill2.default.sources.USER);
    	        if (context.format.indent) {
    	          this.quill.format('indent', false, _quill2.default.sources.USER);
    	        }
    	      }
    	    },
    	    'checklist enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: { list: 'checked' },
    	      handler: function handler(range) {
    	        var _quill$getLine3 = this.quill.getLine(range.index),
    	            _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
    	            line = _quill$getLine4[0],
    	            offset = _quill$getLine4[1];

    	        var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
    	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	        this.quill.scrollIntoView();
    	      }
    	    },
    	    'header enter': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['header'],
    	      suffix: /^$/,
    	      handler: function handler(range, context) {
    	        var _quill$getLine5 = this.quill.getLine(range.index),
    	            _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
    	            line = _quill$getLine6[0],
    	            offset = _quill$getLine6[1];

    	        var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	        this.quill.scrollIntoView();
    	      }
    	    },
    	    'list autofill': {
    	      key: ' ',
    	      collapsed: true,
    	      format: { list: false },
    	      prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
    	      handler: function handler(range, context) {
    	        var length = context.prefix.length;

    	        var _quill$getLine7 = this.quill.getLine(range.index),
    	            _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
    	            line = _quill$getLine8[0],
    	            offset = _quill$getLine8[1];

    	        if (offset > length) return true;
    	        var value = void 0;
    	        switch (context.prefix.trim()) {
    	          case '[]':case '[ ]':
    	            value = 'unchecked';
    	            break;
    	          case '[x]':
    	            value = 'checked';
    	            break;
    	          case '-':case '*':
    	            value = 'bullet';
    	            break;
    	          default:
    	            value = 'ordered';
    	        }
    	        this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	        this.quill.history.cutoff();
    	        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
    	      }
    	    },
    	    'code exit': {
    	      key: Keyboard.keys.ENTER,
    	      collapsed: true,
    	      format: ['code-block'],
    	      prefix: /\n\n$/,
    	      suffix: /^\s+$/,
    	      handler: function handler(range) {
    	        var _quill$getLine9 = this.quill.getLine(range.index),
    	            _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
    	            line = _quill$getLine10[0],
    	            offset = _quill$getLine10[1];

    	        var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
    	        this.quill.updateContents(delta, _quill2.default.sources.USER);
    	      }
    	    },
    	    'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
    	    'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
    	    'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
    	    'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
    	  }
    	};

    	function makeEmbedArrowHandler(key, shiftKey) {
    	  var _ref3;

    	  var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
    	  return _ref3 = {
    	    key: key,
    	    shiftKey: shiftKey,
    	    altKey: null
    	  }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
    	    var index = range.index;
    	    if (key === Keyboard.keys.RIGHT) {
    	      index += range.length + 1;
    	    }

    	    var _quill$getLeaf3 = this.quill.getLeaf(index),
    	        _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
    	        leaf = _quill$getLeaf4[0];

    	    if (!(leaf instanceof _parchment2.default.Embed)) return true;
    	    if (key === Keyboard.keys.LEFT) {
    	      if (shiftKey) {
    	        this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
    	      } else {
    	        this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
    	      }
    	    } else {
    	      if (shiftKey) {
    	        this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
    	      } else {
    	        this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
    	      }
    	    }
    	    return false;
    	  }), _ref3;
    	}

    	function handleBackspace(range, context) {
    	  if (range.index === 0 || this.quill.getLength() <= 1) return;

    	  var _quill$getLine11 = this.quill.getLine(range.index),
    	      _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
    	      line = _quill$getLine12[0];

    	  var formats = {};
    	  if (context.offset === 0) {
    	    var _quill$getLine13 = this.quill.getLine(range.index - 1),
    	        _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
    	        prev = _quill$getLine14[0];

    	    if (prev != null && prev.length() > 1) {
    	      var curFormats = line.formats();
    	      var prevFormats = this.quill.getFormat(range.index - 1, 1);
    	      formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
    	    }
    	  }
    	  // Check for astral symbols
    	  var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
    	  this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
    	  }
    	  this.quill.focus();
    	}

    	function handleDelete(range, context) {
    	  // Check for astral symbols
    	  var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
    	  if (range.index >= this.quill.getLength() - length) return;
    	  var formats = {},
    	      nextLength = 0;

    	  var _quill$getLine15 = this.quill.getLine(range.index),
    	      _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
    	      line = _quill$getLine16[0];

    	  if (context.offset >= line.length() - 1) {
    	    var _quill$getLine17 = this.quill.getLine(range.index + 1),
    	        _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
    	        next = _quill$getLine18[0];

    	    if (next) {
    	      var curFormats = line.formats();
    	      var nextFormats = this.quill.getFormat(range.index, 1);
    	      formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
    	      nextLength = next.length();
    	    }
    	  }
    	  this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
    	  }
    	}

    	function handleDeleteRange(range) {
    	  var lines = this.quill.getLines(range);
    	  var formats = {};
    	  if (lines.length > 1) {
    	    var firstFormats = lines[0].formats();
    	    var lastFormats = lines[lines.length - 1].formats();
    	    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
    	  }
    	  this.quill.deleteText(range, _quill2.default.sources.USER);
    	  if (Object.keys(formats).length > 0) {
    	    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
    	  }
    	  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
    	  this.quill.focus();
    	}

    	function handleEnter(range, context) {
    	  var _this3 = this;

    	  if (range.length > 0) {
    	    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
    	  }
    	  var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
    	    if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
    	      lineFormats[format] = context.format[format];
    	    }
    	    return lineFormats;
    	  }, {});
    	  this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
    	  // Earlier scroll.deleteAt might have messed up our selection,
    	  // so insertText's built in selection preservation is not reliable
    	  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    	  this.quill.focus();
    	  Object.keys(context.format).forEach(function (name) {
    	    if (lineFormats[name] != null) return;
    	    if (Array.isArray(context.format[name])) return;
    	    if (name === 'link') return;
    	    _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
    	  });
    	}

    	function makeCodeBlockHandler(indent) {
    	  return {
    	    key: Keyboard.keys.TAB,
    	    shiftKey: !indent,
    	    format: { 'code-block': true },
    	    handler: function handler(range) {
    	      var CodeBlock = _parchment2.default.query('code-block');
    	      var index = range.index,
    	          length = range.length;

    	      var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
    	          _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
    	          block = _quill$scroll$descend2[0],
    	          offset = _quill$scroll$descend2[1];

    	      if (block == null) return;
    	      var scrollIndex = this.quill.getIndex(block);
    	      var start = block.newlineIndex(offset, true) + 1;
    	      var end = block.newlineIndex(scrollIndex + offset + length);
    	      var lines = block.domNode.textContent.slice(start, end).split('\n');
    	      offset = 0;
    	      lines.forEach(function (line, i) {
    	        if (indent) {
    	          block.insertAt(start + offset, CodeBlock.TAB);
    	          offset += CodeBlock.TAB.length;
    	          if (i === 0) {
    	            index += CodeBlock.TAB.length;
    	          } else {
    	            length += CodeBlock.TAB.length;
    	          }
    	        } else if (line.startsWith(CodeBlock.TAB)) {
    	          block.deleteAt(start + offset, CodeBlock.TAB.length);
    	          offset -= CodeBlock.TAB.length;
    	          if (i === 0) {
    	            index -= CodeBlock.TAB.length;
    	          } else {
    	            length -= CodeBlock.TAB.length;
    	          }
    	        }
    	        offset += line.length + 1;
    	      });
    	      this.quill.update(_quill2.default.sources.USER);
    	      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
    	    }
    	  };
    	}

    	function makeFormatHandler(format) {
    	  return {
    	    key: format[0].toUpperCase(),
    	    shortKey: true,
    	    handler: function handler(range, context) {
    	      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
    	    }
    	  };
    	}

    	function normalize(binding) {
    	  if (typeof binding === 'string' || typeof binding === 'number') {
    	    return normalize({ key: binding });
    	  }
    	  if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
    	    binding = (0, _clone2.default)(binding, false);
    	  }
    	  if (typeof binding.key === 'string') {
    	    if (Keyboard.keys[binding.key.toUpperCase()] != null) {
    	      binding.key = Keyboard.keys[binding.key.toUpperCase()];
    	    } else if (binding.key.length === 1) {
    	      binding.key = binding.key.toUpperCase().charCodeAt(0);
    	    } else {
    	      return null;
    	    }
    	  }
    	  if (binding.shortKey) {
    	    binding[SHORTKEY] = binding.shortKey;
    	    delete binding.shortKey;
    	  }
    	  return binding;
    	}

    	exports.default = Keyboard;
    	exports.SHORTKEY = SHORTKEY;

    	/***/ }),
    	/* 24 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Cursor = function (_Parchment$Embed) {
    	  _inherits(Cursor, _Parchment$Embed);

    	  _createClass(Cursor, null, [{
    	    key: 'value',
    	    value: function value() {
    	      return undefined;
    	    }
    	  }]);

    	  function Cursor(domNode, selection) {
    	    _classCallCheck(this, Cursor);

    	    var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

    	    _this.selection = selection;
    	    _this.textNode = document.createTextNode(Cursor.CONTENTS);
    	    _this.domNode.appendChild(_this.textNode);
    	    _this._length = 0;
    	    return _this;
    	  }

    	  _createClass(Cursor, [{
    	    key: 'detach',
    	    value: function detach() {
    	      // super.detach() will also clear domNode.__blot
    	      if (this.parent != null) this.parent.removeChild(this);
    	    }
    	  }, {
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (this._length !== 0) {
    	        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
    	      }
    	      var target = this,
    	          index = 0;
    	      while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
    	        index += target.offset(target.parent);
    	        target = target.parent;
    	      }
    	      if (target != null) {
    	        this._length = Cursor.CONTENTS.length;
    	        target.optimize();
    	        target.formatAt(index, Cursor.CONTENTS.length, name, value);
    	        this._length = 0;
    	      }
    	    }
    	  }, {
    	    key: 'index',
    	    value: function index(node, offset) {
    	      if (node === this.textNode) return 0;
    	      return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
    	    }
    	  }, {
    	    key: 'length',
    	    value: function length() {
    	      return this._length;
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position() {
    	      return [this.textNode, this.textNode.data.length];
    	    }
    	  }, {
    	    key: 'remove',
    	    value: function remove() {
    	      _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
    	      this.parent = null;
    	    }
    	  }, {
    	    key: 'restore',
    	    value: function restore() {
    	      if (this.selection.composing || this.parent == null) return;
    	      var textNode = this.textNode;
    	      var range = this.selection.getNativeRange();
    	      var restoreText = void 0,
    	          start = void 0,
    	          end = void 0;
    	      if (range != null && range.start.node === textNode && range.end.node === textNode) {
    	        var _ref = [textNode, range.start.offset, range.end.offset];
    	        restoreText = _ref[0];
    	        start = _ref[1];
    	        end = _ref[2];
    	      }
    	      // Link format will insert text outside of anchor tag
    	      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
    	        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
    	      }
    	      if (this.textNode.data !== Cursor.CONTENTS) {
    	        var text = this.textNode.data.split(Cursor.CONTENTS).join('');
    	        if (this.next instanceof _text2.default) {
    	          restoreText = this.next.domNode;
    	          this.next.insertAt(0, text);
    	          this.textNode.data = Cursor.CONTENTS;
    	        } else {
    	          this.textNode.data = text;
    	          this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
    	          this.textNode = document.createTextNode(Cursor.CONTENTS);
    	          this.domNode.appendChild(this.textNode);
    	        }
    	      }
    	      this.remove();
    	      if (start != null) {
    	        var _map = [start, end].map(function (offset) {
    	          return Math.max(0, Math.min(restoreText.data.length, offset - 1));
    	        });

    	        var _map2 = _slicedToArray(_map, 2);

    	        start = _map2[0];
    	        end = _map2[1];

    	        return {
    	          startNode: restoreText,
    	          startOffset: start,
    	          endNode: restoreText,
    	          endOffset: end
    	        };
    	      }
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations, context) {
    	      var _this2 = this;

    	      if (mutations.some(function (mutation) {
    	        return mutation.type === 'characterData' && mutation.target === _this2.textNode;
    	      })) {
    	        var range = this.restore();
    	        if (range) context.range = range;
    	      }
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value() {
    	      return '';
    	    }
    	  }]);

    	  return Cursor;
    	}(_parchment2.default.Embed);

    	Cursor.blotName = 'cursor';
    	Cursor.className = 'ql-cursor';
    	Cursor.tagName = 'span';
    	Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


    	exports.default = Cursor;

    	/***/ }),
    	/* 25 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Container = function (_Parchment$Container) {
    	  _inherits(Container, _Parchment$Container);

    	  function Container() {
    	    _classCallCheck(this, Container);

    	    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    	  }

    	  return Container;
    	}(_parchment2.default.Container);

    	Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

    	exports.default = Container;

    	/***/ }),
    	/* 26 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ColorAttributor = function (_Parchment$Attributor) {
    	  _inherits(ColorAttributor, _Parchment$Attributor);

    	  function ColorAttributor() {
    	    _classCallCheck(this, ColorAttributor);

    	    return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
    	  }

    	  _createClass(ColorAttributor, [{
    	    key: 'value',
    	    value: function value(domNode) {
    	      var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
    	      if (!value.startsWith('rgb(')) return value;
    	      value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
    	      return '#' + value.split(',').map(function (component) {
    	        return ('00' + parseInt(component).toString(16)).slice(-2);
    	      }).join('');
    	    }
    	  }]);

    	  return ColorAttributor;
    	}(_parchment2.default.Attributor.Style);

    	var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});
    	var ColorStyle = new ColorAttributor('color', 'color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	exports.ColorAttributor = ColorAttributor;
    	exports.ColorClass = ColorClass;
    	exports.ColorStyle = ColorStyle;

    	/***/ }),
    	/* 27 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.sanitize = exports.default = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Link = function (_Inline) {
    	  _inherits(Link, _Inline);

    	  function Link() {
    	    _classCallCheck(this, Link);

    	    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
    	  }

    	  _createClass(Link, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
    	      value = this.constructor.sanitize(value);
    	      this.domNode.setAttribute('href', value);
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
    	      value = this.sanitize(value);
    	      node.setAttribute('href', value);
    	      node.setAttribute('rel', 'noopener noreferrer');
    	      node.setAttribute('target', '_blank');
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return domNode.getAttribute('href');
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
    	    }
    	  }]);

    	  return Link;
    	}(_inline2.default);

    	Link.blotName = 'link';
    	Link.tagName = 'A';
    	Link.SANITIZED_URL = 'about:blank';
    	Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

    	function _sanitize(url, protocols) {
    	  var anchor = document.createElement('a');
    	  anchor.href = url;
    	  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
    	  return protocols.indexOf(protocol) > -1;
    	}

    	exports.default = Link;
    	exports.sanitize = _sanitize;

    	/***/ }),
    	/* 28 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	var _dropdown = __webpack_require__(107);

    	var _dropdown2 = _interopRequireDefault(_dropdown);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var optionsCounter = 0;

    	function toggleAriaAttribute(element, attribute) {
    	  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
    	}

    	var Picker = function () {
    	  function Picker(select) {
    	    var _this = this;

    	    _classCallCheck(this, Picker);

    	    this.select = select;
    	    this.container = document.createElement('span');
    	    this.buildPicker();
    	    this.select.style.display = 'none';
    	    this.select.parentNode.insertBefore(this.container, this.select);

    	    this.label.addEventListener('mousedown', function () {
    	      _this.togglePicker();
    	    });
    	    this.label.addEventListener('keydown', function (event) {
    	      switch (event.keyCode) {
    	        // Allows the "Enter" key to open the picker
    	        case _keyboard2.default.keys.ENTER:
    	          _this.togglePicker();
    	          break;

    	        // Allows the "Escape" key to close the picker
    	        case _keyboard2.default.keys.ESCAPE:
    	          _this.escape();
    	          event.preventDefault();
    	          break;
    	      }
    	    });
    	    this.select.addEventListener('change', this.update.bind(this));
    	  }

    	  _createClass(Picker, [{
    	    key: 'togglePicker',
    	    value: function togglePicker() {
    	      this.container.classList.toggle('ql-expanded');
    	      // Toggle aria-expanded and aria-hidden to make the picker accessible
    	      toggleAriaAttribute(this.label, 'aria-expanded');
    	      toggleAriaAttribute(this.options, 'aria-hidden');
    	    }
    	  }, {
    	    key: 'buildItem',
    	    value: function buildItem(option) {
    	      var _this2 = this;

    	      var item = document.createElement('span');
    	      item.tabIndex = '0';
    	      item.setAttribute('role', 'button');

    	      item.classList.add('ql-picker-item');
    	      if (option.hasAttribute('value')) {
    	        item.setAttribute('data-value', option.getAttribute('value'));
    	      }
    	      if (option.textContent) {
    	        item.setAttribute('data-label', option.textContent);
    	      }
    	      item.addEventListener('click', function () {
    	        _this2.selectItem(item, true);
    	      });
    	      item.addEventListener('keydown', function (event) {
    	        switch (event.keyCode) {
    	          // Allows the "Enter" key to select an item
    	          case _keyboard2.default.keys.ENTER:
    	            _this2.selectItem(item, true);
    	            event.preventDefault();
    	            break;

    	          // Allows the "Escape" key to close the picker
    	          case _keyboard2.default.keys.ESCAPE:
    	            _this2.escape();
    	            event.preventDefault();
    	            break;
    	        }
    	      });

    	      return item;
    	    }
    	  }, {
    	    key: 'buildLabel',
    	    value: function buildLabel() {
    	      var label = document.createElement('span');
    	      label.classList.add('ql-picker-label');
    	      label.innerHTML = _dropdown2.default;
    	      label.tabIndex = '0';
    	      label.setAttribute('role', 'button');
    	      label.setAttribute('aria-expanded', 'false');
    	      this.container.appendChild(label);
    	      return label;
    	    }
    	  }, {
    	    key: 'buildOptions',
    	    value: function buildOptions() {
    	      var _this3 = this;

    	      var options = document.createElement('span');
    	      options.classList.add('ql-picker-options');

    	      // Don't want screen readers to read this until options are visible
    	      options.setAttribute('aria-hidden', 'true');
    	      options.tabIndex = '-1';

    	      // Need a unique id for aria-controls
    	      options.id = 'ql-picker-options-' + optionsCounter;
    	      optionsCounter += 1;
    	      this.label.setAttribute('aria-controls', options.id);

    	      this.options = options;

    	      [].slice.call(this.select.options).forEach(function (option) {
    	        var item = _this3.buildItem(option);
    	        options.appendChild(item);
    	        if (option.selected === true) {
    	          _this3.selectItem(item);
    	        }
    	      });
    	      this.container.appendChild(options);
    	    }
    	  }, {
    	    key: 'buildPicker',
    	    value: function buildPicker() {
    	      var _this4 = this;

    	      [].slice.call(this.select.attributes).forEach(function (item) {
    	        _this4.container.setAttribute(item.name, item.value);
    	      });
    	      this.container.classList.add('ql-picker');
    	      this.label = this.buildLabel();
    	      this.buildOptions();
    	    }
    	  }, {
    	    key: 'escape',
    	    value: function escape() {
    	      var _this5 = this;

    	      // Close menu and return focus to trigger label
    	      this.close();
    	      // Need setTimeout for accessibility to ensure that the browser executes
    	      // focus on the next process thread and after any DOM content changes
    	      setTimeout(function () {
    	        return _this5.label.focus();
    	      }, 1);
    	    }
    	  }, {
    	    key: 'close',
    	    value: function close() {
    	      this.container.classList.remove('ql-expanded');
    	      this.label.setAttribute('aria-expanded', 'false');
    	      this.options.setAttribute('aria-hidden', 'true');
    	    }
    	  }, {
    	    key: 'selectItem',
    	    value: function selectItem(item) {
    	      var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    	      var selected = this.container.querySelector('.ql-selected');
    	      if (item === selected) return;
    	      if (selected != null) {
    	        selected.classList.remove('ql-selected');
    	      }
    	      if (item == null) return;
    	      item.classList.add('ql-selected');
    	      this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
    	      if (item.hasAttribute('data-value')) {
    	        this.label.setAttribute('data-value', item.getAttribute('data-value'));
    	      } else {
    	        this.label.removeAttribute('data-value');
    	      }
    	      if (item.hasAttribute('data-label')) {
    	        this.label.setAttribute('data-label', item.getAttribute('data-label'));
    	      } else {
    	        this.label.removeAttribute('data-label');
    	      }
    	      if (trigger) {
    	        if (typeof Event === 'function') {
    	          this.select.dispatchEvent(new Event('change'));
    	        } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
    	          // IE11
    	          var event = document.createEvent('Event');
    	          event.initEvent('change', true, true);
    	          this.select.dispatchEvent(event);
    	        }
    	        this.close();
    	      }
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update() {
    	      var option = void 0;
    	      if (this.select.selectedIndex > -1) {
    	        var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
    	        option = this.select.options[this.select.selectedIndex];
    	        this.selectItem(item);
    	      } else {
    	        this.selectItem(null);
    	      }
    	      var isActive = option != null && option !== this.select.querySelector('option[selected]');
    	      this.label.classList.toggle('ql-active', isActive);
    	    }
    	  }]);

    	  return Picker;
    	}();

    	exports.default = Picker;

    	/***/ }),
    	/* 29 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _break = __webpack_require__(16);

    	var _break2 = _interopRequireDefault(_break);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	var _cursor = __webpack_require__(24);

    	var _cursor2 = _interopRequireDefault(_cursor);

    	var _embed = __webpack_require__(35);

    	var _embed2 = _interopRequireDefault(_embed);

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	var _scroll = __webpack_require__(22);

    	var _scroll2 = _interopRequireDefault(_scroll);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	var _clipboard = __webpack_require__(55);

    	var _clipboard2 = _interopRequireDefault(_clipboard);

    	var _history = __webpack_require__(42);

    	var _history2 = _interopRequireDefault(_history);

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	_quill2.default.register({
    	  'blots/block': _block2.default,
    	  'blots/block/embed': _block.BlockEmbed,
    	  'blots/break': _break2.default,
    	  'blots/container': _container2.default,
    	  'blots/cursor': _cursor2.default,
    	  'blots/embed': _embed2.default,
    	  'blots/inline': _inline2.default,
    	  'blots/scroll': _scroll2.default,
    	  'blots/text': _text2.default,

    	  'modules/clipboard': _clipboard2.default,
    	  'modules/history': _history2.default,
    	  'modules/keyboard': _keyboard2.default
    	});

    	_parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

    	exports.default = _quill2.default;

    	/***/ }),
    	/* 30 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var Registry = __webpack_require__(1);
    	var ShadowBlot = /** @class */ (function () {
    	    function ShadowBlot(domNode) {
    	        this.domNode = domNode;
    	        // @ts-ignore
    	        this.domNode[Registry.DATA_KEY] = { blot: this };
    	    }
    	    Object.defineProperty(ShadowBlot.prototype, "statics", {
    	        // Hack for accessing inherited static methods
    	        get: function () {
    	            return this.constructor;
    	        },
    	        enumerable: true,
    	        configurable: true
    	    });
    	    ShadowBlot.create = function (value) {
    	        if (this.tagName == null) {
    	            throw new Registry.ParchmentError('Blot definition missing tagName');
    	        }
    	        var node;
    	        if (Array.isArray(this.tagName)) {
    	            if (typeof value === 'string') {
    	                value = value.toUpperCase();
    	                if (parseInt(value).toString() === value) {
    	                    value = parseInt(value);
    	                }
    	            }
    	            if (typeof value === 'number') {
    	                node = document.createElement(this.tagName[value - 1]);
    	            }
    	            else if (this.tagName.indexOf(value) > -1) {
    	                node = document.createElement(value);
    	            }
    	            else {
    	                node = document.createElement(this.tagName[0]);
    	            }
    	        }
    	        else {
    	            node = document.createElement(this.tagName);
    	        }
    	        if (this.className) {
    	            node.classList.add(this.className);
    	        }
    	        return node;
    	    };
    	    ShadowBlot.prototype.attach = function () {
    	        if (this.parent != null) {
    	            this.scroll = this.parent.scroll;
    	        }
    	    };
    	    ShadowBlot.prototype.clone = function () {
    	        var domNode = this.domNode.cloneNode(false);
    	        return Registry.create(domNode);
    	    };
    	    ShadowBlot.prototype.detach = function () {
    	        if (this.parent != null)
    	            this.parent.removeChild(this);
    	        // @ts-ignore
    	        delete this.domNode[Registry.DATA_KEY];
    	    };
    	    ShadowBlot.prototype.deleteAt = function (index, length) {
    	        var blot = this.isolate(index, length);
    	        blot.remove();
    	    };
    	    ShadowBlot.prototype.formatAt = function (index, length, name, value) {
    	        var blot = this.isolate(index, length);
    	        if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
    	            blot.wrap(name, value);
    	        }
    	        else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
    	            var parent = Registry.create(this.statics.scope);
    	            blot.wrap(parent);
    	            parent.format(name, value);
    	        }
    	    };
    	    ShadowBlot.prototype.insertAt = function (index, value, def) {
    	        var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
    	        var ref = this.split(index);
    	        this.parent.insertBefore(blot, ref);
    	    };
    	    ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
    	        if (refBlot === void 0) { refBlot = null; }
    	        if (this.parent != null) {
    	            this.parent.children.remove(this);
    	        }
    	        var refDomNode = null;
    	        parentBlot.children.insertBefore(this, refBlot);
    	        if (refBlot != null) {
    	            refDomNode = refBlot.domNode;
    	        }
    	        if (this.domNode.parentNode != parentBlot.domNode ||
    	            this.domNode.nextSibling != refDomNode) {
    	            parentBlot.domNode.insertBefore(this.domNode, refDomNode);
    	        }
    	        this.parent = parentBlot;
    	        this.attach();
    	    };
    	    ShadowBlot.prototype.isolate = function (index, length) {
    	        var target = this.split(index);
    	        target.split(length);
    	        return target;
    	    };
    	    ShadowBlot.prototype.length = function () {
    	        return 1;
    	    };
    	    ShadowBlot.prototype.offset = function (root) {
    	        if (root === void 0) { root = this.parent; }
    	        if (this.parent == null || this == root)
    	            return 0;
    	        return this.parent.children.offset(this) + this.parent.offset(root);
    	    };
    	    ShadowBlot.prototype.optimize = function (context) {
    	        // TODO clean up once we use WeakMap
    	        // @ts-ignore
    	        if (this.domNode[Registry.DATA_KEY] != null) {
    	            // @ts-ignore
    	            delete this.domNode[Registry.DATA_KEY].mutations;
    	        }
    	    };
    	    ShadowBlot.prototype.remove = function () {
    	        if (this.domNode.parentNode != null) {
    	            this.domNode.parentNode.removeChild(this.domNode);
    	        }
    	        this.detach();
    	    };
    	    ShadowBlot.prototype.replace = function (target) {
    	        if (target.parent == null)
    	            return;
    	        target.parent.insertBefore(this, target.next);
    	        target.remove();
    	    };
    	    ShadowBlot.prototype.replaceWith = function (name, value) {
    	        var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
    	        replacement.replace(this);
    	        return replacement;
    	    };
    	    ShadowBlot.prototype.split = function (index, force) {
    	        return index === 0 ? this : this.next;
    	    };
    	    ShadowBlot.prototype.update = function (mutations, context) {
    	        // Nothing to do by default
    	    };
    	    ShadowBlot.prototype.wrap = function (name, value) {
    	        var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
    	        if (this.parent != null) {
    	            this.parent.insertBefore(wrapper, this.next);
    	        }
    	        wrapper.appendChild(this);
    	        return wrapper;
    	    };
    	    ShadowBlot.blotName = 'abstract';
    	    return ShadowBlot;
    	}());
    	exports.default = ShadowBlot;


    	/***/ }),
    	/* 31 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	var class_1 = __webpack_require__(32);
    	var style_1 = __webpack_require__(33);
    	var Registry = __webpack_require__(1);
    	var AttributorStore = /** @class */ (function () {
    	    function AttributorStore(domNode) {
    	        this.attributes = {};
    	        this.domNode = domNode;
    	        this.build();
    	    }
    	    AttributorStore.prototype.attribute = function (attribute, value) {
    	        // verb
    	        if (value) {
    	            if (attribute.add(this.domNode, value)) {
    	                if (attribute.value(this.domNode) != null) {
    	                    this.attributes[attribute.attrName] = attribute;
    	                }
    	                else {
    	                    delete this.attributes[attribute.attrName];
    	                }
    	            }
    	        }
    	        else {
    	            attribute.remove(this.domNode);
    	            delete this.attributes[attribute.attrName];
    	        }
    	    };
    	    AttributorStore.prototype.build = function () {
    	        var _this = this;
    	        this.attributes = {};
    	        var attributes = attributor_1.default.keys(this.domNode);
    	        var classes = class_1.default.keys(this.domNode);
    	        var styles = style_1.default.keys(this.domNode);
    	        attributes
    	            .concat(classes)
    	            .concat(styles)
    	            .forEach(function (name) {
    	            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
    	            if (attr instanceof attributor_1.default) {
    	                _this.attributes[attr.attrName] = attr;
    	            }
    	        });
    	    };
    	    AttributorStore.prototype.copy = function (target) {
    	        var _this = this;
    	        Object.keys(this.attributes).forEach(function (key) {
    	            var value = _this.attributes[key].value(_this.domNode);
    	            target.format(key, value);
    	        });
    	    };
    	    AttributorStore.prototype.move = function (target) {
    	        var _this = this;
    	        this.copy(target);
    	        Object.keys(this.attributes).forEach(function (key) {
    	            _this.attributes[key].remove(_this.domNode);
    	        });
    	        this.attributes = {};
    	    };
    	    AttributorStore.prototype.values = function () {
    	        var _this = this;
    	        return Object.keys(this.attributes).reduce(function (attributes, name) {
    	            attributes[name] = _this.attributes[name].value(_this.domNode);
    	            return attributes;
    	        }, {});
    	    };
    	    return AttributorStore;
    	}());
    	exports.default = AttributorStore;


    	/***/ }),
    	/* 32 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	function match(node, prefix) {
    	    var className = node.getAttribute('class') || '';
    	    return className.split(/\s+/).filter(function (name) {
    	        return name.indexOf(prefix + "-") === 0;
    	    });
    	}
    	var ClassAttributor = /** @class */ (function (_super) {
    	    __extends(ClassAttributor, _super);
    	    function ClassAttributor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    ClassAttributor.keys = function (node) {
    	        return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
    	            return name
    	                .split('-')
    	                .slice(0, -1)
    	                .join('-');
    	        });
    	    };
    	    ClassAttributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        this.remove(node);
    	        node.classList.add(this.keyName + "-" + value);
    	        return true;
    	    };
    	    ClassAttributor.prototype.remove = function (node) {
    	        var matches = match(node, this.keyName);
    	        matches.forEach(function (name) {
    	            node.classList.remove(name);
    	        });
    	        if (node.classList.length === 0) {
    	            node.removeAttribute('class');
    	        }
    	    };
    	    ClassAttributor.prototype.value = function (node) {
    	        var result = match(node, this.keyName)[0] || '';
    	        var value = result.slice(this.keyName.length + 1); // +1 for hyphen
    	        return this.canAdd(node, value) ? value : '';
    	    };
    	    return ClassAttributor;
    	}(attributor_1.default));
    	exports.default = ClassAttributor;


    	/***/ }),
    	/* 33 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var attributor_1 = __webpack_require__(12);
    	function camelize(name) {
    	    var parts = name.split('-');
    	    var rest = parts
    	        .slice(1)
    	        .map(function (part) {
    	        return part[0].toUpperCase() + part.slice(1);
    	    })
    	        .join('');
    	    return parts[0] + rest;
    	}
    	var StyleAttributor = /** @class */ (function (_super) {
    	    __extends(StyleAttributor, _super);
    	    function StyleAttributor() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    StyleAttributor.keys = function (node) {
    	        return (node.getAttribute('style') || '').split(';').map(function (value) {
    	            var arr = value.split(':');
    	            return arr[0].trim();
    	        });
    	    };
    	    StyleAttributor.prototype.add = function (node, value) {
    	        if (!this.canAdd(node, value))
    	            return false;
    	        // @ts-ignore
    	        node.style[camelize(this.keyName)] = value;
    	        return true;
    	    };
    	    StyleAttributor.prototype.remove = function (node) {
    	        // @ts-ignore
    	        node.style[camelize(this.keyName)] = '';
    	        if (!node.getAttribute('style')) {
    	            node.removeAttribute('style');
    	        }
    	    };
    	    StyleAttributor.prototype.value = function (node) {
    	        // @ts-ignore
    	        var value = node.style[camelize(this.keyName)];
    	        return this.canAdd(node, value) ? value : '';
    	    };
    	    return StyleAttributor;
    	}(attributor_1.default));
    	exports.default = StyleAttributor;


    	/***/ }),
    	/* 34 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Theme = function () {
    	  function Theme(quill, options) {
    	    _classCallCheck(this, Theme);

    	    this.quill = quill;
    	    this.options = options;
    	    this.modules = {};
    	  }

    	  _createClass(Theme, [{
    	    key: 'init',
    	    value: function init() {
    	      var _this = this;

    	      Object.keys(this.options.modules).forEach(function (name) {
    	        if (_this.modules[name] == null) {
    	          _this.addModule(name);
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'addModule',
    	    value: function addModule(name) {
    	      var moduleClass = this.quill.constructor.import('modules/' + name);
    	      this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
    	      return this.modules[name];
    	    }
    	  }]);

    	  return Theme;
    	}();

    	Theme.DEFAULTS = {
    	  modules: {}
    	};
    	Theme.themes = {
    	  'default': Theme
    	};

    	exports.default = Theme;

    	/***/ }),
    	/* 35 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _text = __webpack_require__(7);

    	var _text2 = _interopRequireDefault(_text);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var GUARD_TEXT = '\uFEFF';

    	var Embed = function (_Parchment$Embed) {
    	  _inherits(Embed, _Parchment$Embed);

    	  function Embed(node) {
    	    _classCallCheck(this, Embed);

    	    var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

    	    _this.contentNode = document.createElement('span');
    	    _this.contentNode.setAttribute('contenteditable', false);
    	    [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
    	      _this.contentNode.appendChild(childNode);
    	    });
    	    _this.leftGuard = document.createTextNode(GUARD_TEXT);
    	    _this.rightGuard = document.createTextNode(GUARD_TEXT);
    	    _this.domNode.appendChild(_this.leftGuard);
    	    _this.domNode.appendChild(_this.contentNode);
    	    _this.domNode.appendChild(_this.rightGuard);
    	    return _this;
    	  }

    	  _createClass(Embed, [{
    	    key: 'index',
    	    value: function index(node, offset) {
    	      if (node === this.leftGuard) return 0;
    	      if (node === this.rightGuard) return 1;
    	      return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
    	    }
    	  }, {
    	    key: 'restore',
    	    value: function restore(node) {
    	      var range = void 0,
    	          textNode = void 0;
    	      var text = node.data.split(GUARD_TEXT).join('');
    	      if (node === this.leftGuard) {
    	        if (this.prev instanceof _text2.default) {
    	          var prevLength = this.prev.length();
    	          this.prev.insertAt(prevLength, text);
    	          range = {
    	            startNode: this.prev.domNode,
    	            startOffset: prevLength + text.length
    	          };
    	        } else {
    	          textNode = document.createTextNode(text);
    	          this.parent.insertBefore(_parchment2.default.create(textNode), this);
    	          range = {
    	            startNode: textNode,
    	            startOffset: text.length
    	          };
    	        }
    	      } else if (node === this.rightGuard) {
    	        if (this.next instanceof _text2.default) {
    	          this.next.insertAt(0, text);
    	          range = {
    	            startNode: this.next.domNode,
    	            startOffset: text.length
    	          };
    	        } else {
    	          textNode = document.createTextNode(text);
    	          this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
    	          range = {
    	            startNode: textNode,
    	            startOffset: text.length
    	          };
    	        }
    	      }
    	      node.data = GUARD_TEXT;
    	      return range;
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(mutations, context) {
    	      var _this2 = this;

    	      mutations.forEach(function (mutation) {
    	        if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
    	          var range = _this2.restore(mutation.target);
    	          if (range) context.range = range;
    	        }
    	      });
    	    }
    	  }]);

    	  return Embed;
    	}(_parchment2.default.Embed);

    	exports.default = Embed;

    	/***/ }),
    	/* 36 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var config = {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: ['right', 'center', 'justify']
    	};

    	var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
    	var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
    	var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

    	exports.AlignAttribute = AlignAttribute;
    	exports.AlignClass = AlignClass;
    	exports.AlignStyle = AlignStyle;

    	/***/ }),
    	/* 37 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.BackgroundStyle = exports.BackgroundClass = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _color = __webpack_require__(26);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
    	  scope: _parchment2.default.Scope.INLINE
    	});
    	var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	exports.BackgroundClass = BackgroundClass;
    	exports.BackgroundStyle = BackgroundStyle;

    	/***/ }),
    	/* 38 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var config = {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: ['rtl']
    	};

    	var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
    	var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
    	var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

    	exports.DirectionAttribute = DirectionAttribute;
    	exports.DirectionClass = DirectionClass;
    	exports.DirectionStyle = DirectionStyle;

    	/***/ }),
    	/* 39 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.FontClass = exports.FontStyle = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var config = {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['serif', 'monospace']
    	};

    	var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

    	var FontStyleAttributor = function (_Parchment$Attributor) {
    	  _inherits(FontStyleAttributor, _Parchment$Attributor);

    	  function FontStyleAttributor() {
    	    _classCallCheck(this, FontStyleAttributor);

    	    return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
    	  }

    	  _createClass(FontStyleAttributor, [{
    	    key: 'value',
    	    value: function value(node) {
    	      return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
    	    }
    	  }]);

    	  return FontStyleAttributor;
    	}(_parchment2.default.Attributor.Style);

    	var FontStyle = new FontStyleAttributor('font', 'font-family', config);

    	exports.FontStyle = FontStyle;
    	exports.FontClass = FontClass;

    	/***/ }),
    	/* 40 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.SizeStyle = exports.SizeClass = undefined;

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['small', 'large', 'huge']
    	});
    	var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
    	  scope: _parchment2.default.Scope.INLINE,
    	  whitelist: ['10px', '18px', '32px']
    	});

    	exports.SizeClass = SizeClass;
    	exports.SizeStyle = SizeStyle;

    	/***/ }),
    	/* 41 */
    	/***/ (function(module, exports, __webpack_require__) {


    	module.exports = {
    	  'align': {
    	    '': __webpack_require__(76),
    	    'center': __webpack_require__(77),
    	    'right': __webpack_require__(78),
    	    'justify': __webpack_require__(79)
    	  },
    	  'background': __webpack_require__(80),
    	  'blockquote': __webpack_require__(81),
    	  'bold': __webpack_require__(82),
    	  'clean': __webpack_require__(83),
    	  'code': __webpack_require__(58),
    	  'code-block': __webpack_require__(58),
    	  'color': __webpack_require__(84),
    	  'direction': {
    	    '': __webpack_require__(85),
    	    'rtl': __webpack_require__(86)
    	  },
    	  'float': {
    	    'center': __webpack_require__(87),
    	    'full': __webpack_require__(88),
    	    'left': __webpack_require__(89),
    	    'right': __webpack_require__(90)
    	  },
    	  'formula': __webpack_require__(91),
    	  'header': {
    	    '1': __webpack_require__(92),
    	    '2': __webpack_require__(93)
    	  },
    	  'italic': __webpack_require__(94),
    	  'image': __webpack_require__(95),
    	  'indent': {
    	    '+1': __webpack_require__(96),
    	    '-1': __webpack_require__(97)
    	  },
    	  'link': __webpack_require__(98),
    	  'list': {
    	    'ordered': __webpack_require__(99),
    	    'bullet': __webpack_require__(100),
    	    'check': __webpack_require__(101)
    	  },
    	  'script': {
    	    'sub': __webpack_require__(102),
    	    'super': __webpack_require__(103)
    	  },
    	  'strike': __webpack_require__(104),
    	  'underline': __webpack_require__(105),
    	  'video': __webpack_require__(106)
    	};

    	/***/ }),
    	/* 42 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.getLastChangeIndex = exports.default = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var History = function (_Module) {
    	  _inherits(History, _Module);

    	  function History(quill, options) {
    	    _classCallCheck(this, History);

    	    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

    	    _this.lastRecorded = 0;
    	    _this.ignoreChange = false;
    	    _this.clear();
    	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
    	      if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
    	      if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
    	        _this.record(delta, oldDelta);
    	      } else {
    	        _this.transform(delta);
    	      }
    	    });
    	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
    	    _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
    	    if (/Win/i.test(navigator.platform)) {
    	      _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
    	    }
    	    return _this;
    	  }

    	  _createClass(History, [{
    	    key: 'change',
    	    value: function change(source, dest) {
    	      if (this.stack[source].length === 0) return;
    	      var delta = this.stack[source].pop();
    	      this.stack[dest].push(delta);
    	      this.lastRecorded = 0;
    	      this.ignoreChange = true;
    	      this.quill.updateContents(delta[source], _quill2.default.sources.USER);
    	      this.ignoreChange = false;
    	      var index = getLastChangeIndex(delta[source]);
    	      this.quill.setSelection(index);
    	    }
    	  }, {
    	    key: 'clear',
    	    value: function clear() {
    	      this.stack = { undo: [], redo: [] };
    	    }
    	  }, {
    	    key: 'cutoff',
    	    value: function cutoff() {
    	      this.lastRecorded = 0;
    	    }
    	  }, {
    	    key: 'record',
    	    value: function record(changeDelta, oldDelta) {
    	      if (changeDelta.ops.length === 0) return;
    	      this.stack.redo = [];
    	      var undoDelta = this.quill.getContents().diff(oldDelta);
    	      var timestamp = Date.now();
    	      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
    	        var delta = this.stack.undo.pop();
    	        undoDelta = undoDelta.compose(delta.undo);
    	        changeDelta = delta.redo.compose(changeDelta);
    	      } else {
    	        this.lastRecorded = timestamp;
    	      }
    	      this.stack.undo.push({
    	        redo: changeDelta,
    	        undo: undoDelta
    	      });
    	      if (this.stack.undo.length > this.options.maxStack) {
    	        this.stack.undo.shift();
    	      }
    	    }
    	  }, {
    	    key: 'redo',
    	    value: function redo() {
    	      this.change('redo', 'undo');
    	    }
    	  }, {
    	    key: 'transform',
    	    value: function transform(delta) {
    	      this.stack.undo.forEach(function (change) {
    	        change.undo = delta.transform(change.undo, true);
    	        change.redo = delta.transform(change.redo, true);
    	      });
    	      this.stack.redo.forEach(function (change) {
    	        change.undo = delta.transform(change.undo, true);
    	        change.redo = delta.transform(change.redo, true);
    	      });
    	    }
    	  }, {
    	    key: 'undo',
    	    value: function undo() {
    	      this.change('undo', 'redo');
    	    }
    	  }]);

    	  return History;
    	}(_module2.default);

    	History.DEFAULTS = {
    	  delay: 1000,
    	  maxStack: 100,
    	  userOnly: false
    	};

    	function endsWithNewlineChange(delta) {
    	  var lastOp = delta.ops[delta.ops.length - 1];
    	  if (lastOp == null) return false;
    	  if (lastOp.insert != null) {
    	    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
    	  }
    	  if (lastOp.attributes != null) {
    	    return Object.keys(lastOp.attributes).some(function (attr) {
    	      return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
    	    });
    	  }
    	  return false;
    	}

    	function getLastChangeIndex(delta) {
    	  var deleteLength = delta.reduce(function (length, op) {
    	    length += op.delete || 0;
    	    return length;
    	  }, 0);
    	  var changeIndex = delta.length() - deleteLength;
    	  if (endsWithNewlineChange(delta)) {
    	    changeIndex -= 1;
    	  }
    	  return changeIndex;
    	}

    	exports.default = History;
    	exports.getLastChangeIndex = getLastChangeIndex;

    	/***/ }),
    	/* 43 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BaseTooltip = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _keyboard = __webpack_require__(23);

    	var _keyboard2 = _interopRequireDefault(_keyboard);

    	var _theme = __webpack_require__(34);

    	var _theme2 = _interopRequireDefault(_theme);

    	var _colorPicker = __webpack_require__(59);

    	var _colorPicker2 = _interopRequireDefault(_colorPicker);

    	var _iconPicker = __webpack_require__(60);

    	var _iconPicker2 = _interopRequireDefault(_iconPicker);

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	var _tooltip = __webpack_require__(61);

    	var _tooltip2 = _interopRequireDefault(_tooltip);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ALIGNS = [false, 'center', 'right', 'justify'];

    	var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

    	var FONTS = [false, 'serif', 'monospace'];

    	var HEADERS = ['1', '2', '3', false];

    	var SIZES = ['small', false, 'large', 'huge'];

    	var BaseTheme = function (_Theme) {
    	  _inherits(BaseTheme, _Theme);

    	  function BaseTheme(quill, options) {
    	    _classCallCheck(this, BaseTheme);

    	    var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

    	    var listener = function listener(e) {
    	      if (!document.body.contains(quill.root)) {
    	        return document.body.removeEventListener('click', listener);
    	      }
    	      if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
    	        _this.tooltip.hide();
    	      }
    	      if (_this.pickers != null) {
    	        _this.pickers.forEach(function (picker) {
    	          if (!picker.container.contains(e.target)) {
    	            picker.close();
    	          }
    	        });
    	      }
    	    };
    	    quill.emitter.listenDOM('click', document.body, listener);
    	    return _this;
    	  }

    	  _createClass(BaseTheme, [{
    	    key: 'addModule',
    	    value: function addModule(name) {
    	      var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
    	      if (name === 'toolbar') {
    	        this.extendToolbar(module);
    	      }
    	      return module;
    	    }
    	  }, {
    	    key: 'buildButtons',
    	    value: function buildButtons(buttons, icons) {
    	      buttons.forEach(function (button) {
    	        var className = button.getAttribute('class') || '';
    	        className.split(/\s+/).forEach(function (name) {
    	          if (!name.startsWith('ql-')) return;
    	          name = name.slice('ql-'.length);
    	          if (icons[name] == null) return;
    	          if (name === 'direction') {
    	            button.innerHTML = icons[name][''] + icons[name]['rtl'];
    	          } else if (typeof icons[name] === 'string') {
    	            button.innerHTML = icons[name];
    	          } else {
    	            var value = button.value || '';
    	            if (value != null && icons[name][value]) {
    	              button.innerHTML = icons[name][value];
    	            }
    	          }
    	        });
    	      });
    	    }
    	  }, {
    	    key: 'buildPickers',
    	    value: function buildPickers(selects, icons) {
    	      var _this2 = this;

    	      this.pickers = selects.map(function (select) {
    	        if (select.classList.contains('ql-align')) {
    	          if (select.querySelector('option') == null) {
    	            fillSelect(select, ALIGNS);
    	          }
    	          return new _iconPicker2.default(select, icons.align);
    	        } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
    	          var format = select.classList.contains('ql-background') ? 'background' : 'color';
    	          if (select.querySelector('option') == null) {
    	            fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
    	          }
    	          return new _colorPicker2.default(select, icons[format]);
    	        } else {
    	          if (select.querySelector('option') == null) {
    	            if (select.classList.contains('ql-font')) {
    	              fillSelect(select, FONTS);
    	            } else if (select.classList.contains('ql-header')) {
    	              fillSelect(select, HEADERS);
    	            } else if (select.classList.contains('ql-size')) {
    	              fillSelect(select, SIZES);
    	            }
    	          }
    	          return new _picker2.default(select);
    	        }
    	      });
    	      var update = function update() {
    	        _this2.pickers.forEach(function (picker) {
    	          picker.update();
    	        });
    	      };
    	      this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
    	    }
    	  }]);

    	  return BaseTheme;
    	}(_theme2.default);

    	BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        formula: function formula() {
    	          this.quill.theme.tooltip.edit('formula');
    	        },
    	        image: function image() {
    	          var _this3 = this;

    	          var fileInput = this.container.querySelector('input.ql-image[type=file]');
    	          if (fileInput == null) {
    	            fileInput = document.createElement('input');
    	            fileInput.setAttribute('type', 'file');
    	            fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
    	            fileInput.classList.add('ql-image');
    	            fileInput.addEventListener('change', function () {
    	              if (fileInput.files != null && fileInput.files[0] != null) {
    	                var reader = new FileReader();
    	                reader.onload = function (e) {
    	                  var range = _this3.quill.getSelection(true);
    	                  _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
    	                  _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
    	                  fileInput.value = "";
    	                };
    	                reader.readAsDataURL(fileInput.files[0]);
    	              }
    	            });
    	            this.container.appendChild(fileInput);
    	          }
    	          fileInput.click();
    	        },
    	        video: function video() {
    	          this.quill.theme.tooltip.edit('video');
    	        }
    	      }
    	    }
    	  }
    	});

    	var BaseTooltip = function (_Tooltip) {
    	  _inherits(BaseTooltip, _Tooltip);

    	  function BaseTooltip(quill, boundsContainer) {
    	    _classCallCheck(this, BaseTooltip);

    	    var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

    	    _this4.textbox = _this4.root.querySelector('input[type="text"]');
    	    _this4.listen();
    	    return _this4;
    	  }

    	  _createClass(BaseTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this5 = this;

    	      this.textbox.addEventListener('keydown', function (event) {
    	        if (_keyboard2.default.match(event, 'enter')) {
    	          _this5.save();
    	          event.preventDefault();
    	        } else if (_keyboard2.default.match(event, 'escape')) {
    	          _this5.cancel();
    	          event.preventDefault();
    	        }
    	      });
    	    }
    	  }, {
    	    key: 'cancel',
    	    value: function cancel() {
    	      this.hide();
    	    }
    	  }, {
    	    key: 'edit',
    	    value: function edit() {
    	      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
    	      var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	      this.root.classList.remove('ql-hidden');
    	      this.root.classList.add('ql-editing');
    	      if (preview != null) {
    	        this.textbox.value = preview;
    	      } else if (mode !== this.root.getAttribute('data-mode')) {
    	        this.textbox.value = '';
    	      }
    	      this.position(this.quill.getBounds(this.quill.selection.savedRange));
    	      this.textbox.select();
    	      this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
    	      this.root.setAttribute('data-mode', mode);
    	    }
    	  }, {
    	    key: 'restoreFocus',
    	    value: function restoreFocus() {
    	      var scrollTop = this.quill.scrollingContainer.scrollTop;
    	      this.quill.focus();
    	      this.quill.scrollingContainer.scrollTop = scrollTop;
    	    }
    	  }, {
    	    key: 'save',
    	    value: function save() {
    	      var value = this.textbox.value;
    	      switch (this.root.getAttribute('data-mode')) {
    	        case 'link':
    	          {
    	            var scrollTop = this.quill.root.scrollTop;
    	            if (this.linkRange) {
    	              this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
    	              delete this.linkRange;
    	            } else {
    	              this.restoreFocus();
    	              this.quill.format('link', value, _emitter2.default.sources.USER);
    	            }
    	            this.quill.root.scrollTop = scrollTop;
    	            break;
    	          }
    	        case 'video':
    	          {
    	            value = extractVideoUrl(value);
    	          } // eslint-disable-next-line no-fallthrough
    	        case 'formula':
    	          {
    	            if (!value) break;
    	            var range = this.quill.getSelection(true);
    	            if (range != null) {
    	              var index = range.index + range.length;
    	              this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
    	              if (this.root.getAttribute('data-mode') === 'formula') {
    	                this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
    	              }
    	              this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
    	            }
    	            break;
    	          }
    	      }
    	      this.textbox.value = '';
    	      this.hide();
    	    }
    	  }]);

    	  return BaseTooltip;
    	}(_tooltip2.default);

    	function extractVideoUrl(url) {
    	  var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
    	  if (match) {
    	    return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
    	  }
    	  if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
    	    // eslint-disable-line no-cond-assign
    	    return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
    	  }
    	  return url;
    	}

    	function fillSelect(select, values) {
    	  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    	  values.forEach(function (value) {
    	    var option = document.createElement('option');
    	    if (value === defaultValue) {
    	      option.setAttribute('selected', 'selected');
    	    } else {
    	      option.setAttribute('value', value);
    	    }
    	    select.appendChild(option);
    	  });
    	}

    	exports.BaseTooltip = BaseTooltip;
    	exports.default = BaseTheme;

    	/***/ }),
    	/* 44 */
    	/***/ (function(module, exports, __webpack_require__) {

    	Object.defineProperty(exports, "__esModule", { value: true });
    	var LinkedList = /** @class */ (function () {
    	    function LinkedList() {
    	        this.head = this.tail = null;
    	        this.length = 0;
    	    }
    	    LinkedList.prototype.append = function () {
    	        var nodes = [];
    	        for (var _i = 0; _i < arguments.length; _i++) {
    	            nodes[_i] = arguments[_i];
    	        }
    	        this.insertBefore(nodes[0], null);
    	        if (nodes.length > 1) {
    	            this.append.apply(this, nodes.slice(1));
    	        }
    	    };
    	    LinkedList.prototype.contains = function (node) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            if (cur === node)
    	                return true;
    	        }
    	        return false;
    	    };
    	    LinkedList.prototype.insertBefore = function (node, refNode) {
    	        if (!node)
    	            return;
    	        node.next = refNode;
    	        if (refNode != null) {
    	            node.prev = refNode.prev;
    	            if (refNode.prev != null) {
    	                refNode.prev.next = node;
    	            }
    	            refNode.prev = node;
    	            if (refNode === this.head) {
    	                this.head = node;
    	            }
    	        }
    	        else if (this.tail != null) {
    	            this.tail.next = node;
    	            node.prev = this.tail;
    	            this.tail = node;
    	        }
    	        else {
    	            node.prev = null;
    	            this.head = this.tail = node;
    	        }
    	        this.length += 1;
    	    };
    	    LinkedList.prototype.offset = function (target) {
    	        var index = 0, cur = this.head;
    	        while (cur != null) {
    	            if (cur === target)
    	                return index;
    	            index += cur.length();
    	            cur = cur.next;
    	        }
    	        return -1;
    	    };
    	    LinkedList.prototype.remove = function (node) {
    	        if (!this.contains(node))
    	            return;
    	        if (node.prev != null)
    	            node.prev.next = node.next;
    	        if (node.next != null)
    	            node.next.prev = node.prev;
    	        if (node === this.head)
    	            this.head = node.next;
    	        if (node === this.tail)
    	            this.tail = node.prev;
    	        this.length -= 1;
    	    };
    	    LinkedList.prototype.iterator = function (curNode) {
    	        if (curNode === void 0) { curNode = this.head; }
    	        // TODO use yield when we can
    	        return function () {
    	            var ret = curNode;
    	            if (curNode != null)
    	                curNode = curNode.next;
    	            return ret;
    	        };
    	    };
    	    LinkedList.prototype.find = function (index, inclusive) {
    	        if (inclusive === void 0) { inclusive = false; }
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            var length = cur.length();
    	            if (index < length ||
    	                (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
    	                return [cur, index];
    	            }
    	            index -= length;
    	        }
    	        return [null, 0];
    	    };
    	    LinkedList.prototype.forEach = function (callback) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            callback(cur);
    	        }
    	    };
    	    LinkedList.prototype.forEachAt = function (index, length, callback) {
    	        if (length <= 0)
    	            return;
    	        var _a = this.find(index), startNode = _a[0], offset = _a[1];
    	        var cur, curIndex = index - offset, next = this.iterator(startNode);
    	        while ((cur = next()) && curIndex < index + length) {
    	            var curLength = cur.length();
    	            if (index > curIndex) {
    	                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
    	            }
    	            else {
    	                callback(cur, 0, Math.min(curLength, index + length - curIndex));
    	            }
    	            curIndex += curLength;
    	        }
    	    };
    	    LinkedList.prototype.map = function (callback) {
    	        return this.reduce(function (memo, cur) {
    	            memo.push(callback(cur));
    	            return memo;
    	        }, []);
    	    };
    	    LinkedList.prototype.reduce = function (callback, memo) {
    	        var cur, next = this.iterator();
    	        while ((cur = next())) {
    	            memo = callback(memo, cur);
    	        }
    	        return memo;
    	    };
    	    return LinkedList;
    	}());
    	exports.default = LinkedList;


    	/***/ }),
    	/* 45 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var container_1 = __webpack_require__(17);
    	var Registry = __webpack_require__(1);
    	var OBSERVER_CONFIG = {
    	    attributes: true,
    	    characterData: true,
    	    characterDataOldValue: true,
    	    childList: true,
    	    subtree: true,
    	};
    	var MAX_OPTIMIZE_ITERATIONS = 100;
    	var ScrollBlot = /** @class */ (function (_super) {
    	    __extends(ScrollBlot, _super);
    	    function ScrollBlot(node) {
    	        var _this = _super.call(this, node) || this;
    	        _this.scroll = _this;
    	        _this.observer = new MutationObserver(function (mutations) {
    	            _this.update(mutations);
    	        });
    	        _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
    	        _this.attach();
    	        return _this;
    	    }
    	    ScrollBlot.prototype.detach = function () {
    	        _super.prototype.detach.call(this);
    	        this.observer.disconnect();
    	    };
    	    ScrollBlot.prototype.deleteAt = function (index, length) {
    	        this.update();
    	        if (index === 0 && length === this.length()) {
    	            this.children.forEach(function (child) {
    	                child.remove();
    	            });
    	        }
    	        else {
    	            _super.prototype.deleteAt.call(this, index, length);
    	        }
    	    };
    	    ScrollBlot.prototype.formatAt = function (index, length, name, value) {
    	        this.update();
    	        _super.prototype.formatAt.call(this, index, length, name, value);
    	    };
    	    ScrollBlot.prototype.insertAt = function (index, value, def) {
    	        this.update();
    	        _super.prototype.insertAt.call(this, index, value, def);
    	    };
    	    ScrollBlot.prototype.optimize = function (mutations, context) {
    	        var _this = this;
    	        if (mutations === void 0) { mutations = []; }
    	        if (context === void 0) { context = {}; }
    	        _super.prototype.optimize.call(this, context);
    	        // We must modify mutations directly, cannot make copy and then modify
    	        var records = [].slice.call(this.observer.takeRecords());
    	        // Array.push currently seems to be implemented by a non-tail recursive function
    	        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
    	        while (records.length > 0)
    	            mutations.push(records.pop());
    	        // TODO use WeakMap
    	        var mark = function (blot, markParent) {
    	            if (markParent === void 0) { markParent = true; }
    	            if (blot == null || blot === _this)
    	                return;
    	            if (blot.domNode.parentNode == null)
    	                return;
    	            // @ts-ignore
    	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations = [];
    	            }
    	            if (markParent)
    	                mark(blot.parent);
    	        };
    	        var optimize = function (blot) {
    	            // Post-order traversal
    	            if (
    	            // @ts-ignore
    	            blot.domNode[Registry.DATA_KEY] == null ||
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                return;
    	            }
    	            if (blot instanceof container_1.default) {
    	                blot.children.forEach(optimize);
    	            }
    	            blot.optimize(context);
    	        };
    	        var remaining = mutations;
    	        for (var i = 0; remaining.length > 0; i += 1) {
    	            if (i >= MAX_OPTIMIZE_ITERATIONS) {
    	                throw new Error('[Parchment] Maximum optimize iterations reached');
    	            }
    	            remaining.forEach(function (mutation) {
    	                var blot = Registry.find(mutation.target, true);
    	                if (blot == null)
    	                    return;
    	                if (blot.domNode === mutation.target) {
    	                    if (mutation.type === 'childList') {
    	                        mark(Registry.find(mutation.previousSibling, false));
    	                        [].forEach.call(mutation.addedNodes, function (node) {
    	                            var child = Registry.find(node, false);
    	                            mark(child, false);
    	                            if (child instanceof container_1.default) {
    	                                child.children.forEach(function (grandChild) {
    	                                    mark(grandChild, false);
    	                                });
    	                            }
    	                        });
    	                    }
    	                    else if (mutation.type === 'attributes') {
    	                        mark(blot.prev);
    	                    }
    	                }
    	                mark(blot);
    	            });
    	            this.children.forEach(optimize);
    	            remaining = [].slice.call(this.observer.takeRecords());
    	            records = remaining.slice();
    	            while (records.length > 0)
    	                mutations.push(records.pop());
    	        }
    	    };
    	    ScrollBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        if (context === void 0) { context = {}; }
    	        mutations = mutations || this.observer.takeRecords();
    	        // TODO use WeakMap
    	        mutations
    	            .map(function (mutation) {
    	            var blot = Registry.find(mutation.target, true);
    	            if (blot == null)
    	                return null;
    	            // @ts-ignore
    	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations = [mutation];
    	                return blot;
    	            }
    	            else {
    	                // @ts-ignore
    	                blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
    	                return null;
    	            }
    	        })
    	            .forEach(function (blot) {
    	            if (blot == null ||
    	                blot === _this ||
    	                //@ts-ignore
    	                blot.domNode[Registry.DATA_KEY] == null)
    	                return;
    	            // @ts-ignore
    	            blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
    	        });
    	        // @ts-ignore
    	        if (this.domNode[Registry.DATA_KEY].mutations != null) {
    	            // @ts-ignore
    	            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
    	        }
    	        this.optimize(mutations, context);
    	    };
    	    ScrollBlot.blotName = 'scroll';
    	    ScrollBlot.defaultChild = 'block';
    	    ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
    	    ScrollBlot.tagName = 'DIV';
    	    return ScrollBlot;
    	}(container_1.default));
    	exports.default = ScrollBlot;


    	/***/ }),
    	/* 46 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var format_1 = __webpack_require__(18);
    	var Registry = __webpack_require__(1);
    	// Shallow object comparison
    	function isEqual(obj1, obj2) {
    	    if (Object.keys(obj1).length !== Object.keys(obj2).length)
    	        return false;
    	    // @ts-ignore
    	    for (var prop in obj1) {
    	        // @ts-ignore
    	        if (obj1[prop] !== obj2[prop])
    	            return false;
    	    }
    	    return true;
    	}
    	var InlineBlot = /** @class */ (function (_super) {
    	    __extends(InlineBlot, _super);
    	    function InlineBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    InlineBlot.formats = function (domNode) {
    	        if (domNode.tagName === InlineBlot.tagName)
    	            return undefined;
    	        return _super.formats.call(this, domNode);
    	    };
    	    InlineBlot.prototype.format = function (name, value) {
    	        var _this = this;
    	        if (name === this.statics.blotName && !value) {
    	            this.children.forEach(function (child) {
    	                if (!(child instanceof format_1.default)) {
    	                    child = child.wrap(InlineBlot.blotName, true);
    	                }
    	                _this.attributes.copy(child);
    	            });
    	            this.unwrap();
    	        }
    	        else {
    	            _super.prototype.format.call(this, name, value);
    	        }
    	    };
    	    InlineBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
    	            var blot = this.isolate(index, length);
    	            blot.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    InlineBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        var formats = this.formats();
    	        if (Object.keys(formats).length === 0) {
    	            return this.unwrap(); // unformatted span
    	        }
    	        var next = this.next;
    	        if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
    	            next.moveChildren(this);
    	            next.remove();
    	        }
    	    };
    	    InlineBlot.blotName = 'inline';
    	    InlineBlot.scope = Registry.Scope.INLINE_BLOT;
    	    InlineBlot.tagName = 'SPAN';
    	    return InlineBlot;
    	}(format_1.default));
    	exports.default = InlineBlot;


    	/***/ }),
    	/* 47 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var format_1 = __webpack_require__(18);
    	var Registry = __webpack_require__(1);
    	var BlockBlot = /** @class */ (function (_super) {
    	    __extends(BlockBlot, _super);
    	    function BlockBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    BlockBlot.formats = function (domNode) {
    	        var tagName = Registry.query(BlockBlot.blotName).tagName;
    	        if (domNode.tagName === tagName)
    	            return undefined;
    	        return _super.formats.call(this, domNode);
    	    };
    	    BlockBlot.prototype.format = function (name, value) {
    	        if (Registry.query(name, Registry.Scope.BLOCK) == null) {
    	            return;
    	        }
    	        else if (name === this.statics.blotName && !value) {
    	            this.replaceWith(BlockBlot.blotName);
    	        }
    	        else {
    	            _super.prototype.format.call(this, name, value);
    	        }
    	    };
    	    BlockBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (Registry.query(name, Registry.Scope.BLOCK) != null) {
    	            this.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    BlockBlot.prototype.insertAt = function (index, value, def) {
    	        if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
    	            // Insert text or inline
    	            _super.prototype.insertAt.call(this, index, value, def);
    	        }
    	        else {
    	            var after = this.split(index);
    	            var blot = Registry.create(value, def);
    	            after.parent.insertBefore(blot, after);
    	        }
    	    };
    	    BlockBlot.prototype.update = function (mutations, context) {
    	        if (navigator.userAgent.match(/Trident/)) {
    	            this.build();
    	        }
    	        else {
    	            _super.prototype.update.call(this, mutations, context);
    	        }
    	    };
    	    BlockBlot.blotName = 'block';
    	    BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
    	    BlockBlot.tagName = 'P';
    	    return BlockBlot;
    	}(format_1.default));
    	exports.default = BlockBlot;


    	/***/ }),
    	/* 48 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var leaf_1 = __webpack_require__(19);
    	var EmbedBlot = /** @class */ (function (_super) {
    	    __extends(EmbedBlot, _super);
    	    function EmbedBlot() {
    	        return _super !== null && _super.apply(this, arguments) || this;
    	    }
    	    EmbedBlot.formats = function (domNode) {
    	        return undefined;
    	    };
    	    EmbedBlot.prototype.format = function (name, value) {
    	        // super.formatAt wraps, which is what we want in general,
    	        // but this allows subclasses to overwrite for formats
    	        // that just apply to particular embeds
    	        _super.prototype.formatAt.call(this, 0, this.length(), name, value);
    	    };
    	    EmbedBlot.prototype.formatAt = function (index, length, name, value) {
    	        if (index === 0 && length === this.length()) {
    	            this.format(name, value);
    	        }
    	        else {
    	            _super.prototype.formatAt.call(this, index, length, name, value);
    	        }
    	    };
    	    EmbedBlot.prototype.formats = function () {
    	        return this.statics.formats(this.domNode);
    	    };
    	    return EmbedBlot;
    	}(leaf_1.default));
    	exports.default = EmbedBlot;


    	/***/ }),
    	/* 49 */
    	/***/ (function(module, exports, __webpack_require__) {

    	var __extends = (this && this.__extends) || (function () {
    	    var extendStatics = Object.setPrototypeOf ||
    	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    	    return function (d, b) {
    	        extendStatics(d, b);
    	        function __() { this.constructor = d; }
    	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    	    };
    	})();
    	Object.defineProperty(exports, "__esModule", { value: true });
    	var leaf_1 = __webpack_require__(19);
    	var Registry = __webpack_require__(1);
    	var TextBlot = /** @class */ (function (_super) {
    	    __extends(TextBlot, _super);
    	    function TextBlot(node) {
    	        var _this = _super.call(this, node) || this;
    	        _this.text = _this.statics.value(_this.domNode);
    	        return _this;
    	    }
    	    TextBlot.create = function (value) {
    	        return document.createTextNode(value);
    	    };
    	    TextBlot.value = function (domNode) {
    	        var text = domNode.data;
    	        // @ts-ignore
    	        if (text['normalize'])
    	            text = text['normalize']();
    	        return text;
    	    };
    	    TextBlot.prototype.deleteAt = function (index, length) {
    	        this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
    	    };
    	    TextBlot.prototype.index = function (node, offset) {
    	        if (this.domNode === node) {
    	            return offset;
    	        }
    	        return -1;
    	    };
    	    TextBlot.prototype.insertAt = function (index, value, def) {
    	        if (def == null) {
    	            this.text = this.text.slice(0, index) + value + this.text.slice(index);
    	            this.domNode.data = this.text;
    	        }
    	        else {
    	            _super.prototype.insertAt.call(this, index, value, def);
    	        }
    	    };
    	    TextBlot.prototype.length = function () {
    	        return this.text.length;
    	    };
    	    TextBlot.prototype.optimize = function (context) {
    	        _super.prototype.optimize.call(this, context);
    	        this.text = this.statics.value(this.domNode);
    	        if (this.text.length === 0) {
    	            this.remove();
    	        }
    	        else if (this.next instanceof TextBlot && this.next.prev === this) {
    	            this.insertAt(this.length(), this.next.value());
    	            this.next.remove();
    	        }
    	    };
    	    TextBlot.prototype.position = function (index, inclusive) {
    	        return [this.domNode, index];
    	    };
    	    TextBlot.prototype.split = function (index, force) {
    	        if (force === void 0) { force = false; }
    	        if (!force) {
    	            if (index === 0)
    	                return this;
    	            if (index === this.length())
    	                return this.next;
    	        }
    	        var after = Registry.create(this.domNode.splitText(index));
    	        this.parent.insertBefore(after, this.next);
    	        this.text = this.statics.value(this.domNode);
    	        return after;
    	    };
    	    TextBlot.prototype.update = function (mutations, context) {
    	        var _this = this;
    	        if (mutations.some(function (mutation) {
    	            return mutation.type === 'characterData' && mutation.target === _this.domNode;
    	        })) {
    	            this.text = this.statics.value(this.domNode);
    	        }
    	    };
    	    TextBlot.prototype.value = function () {
    	        return this.text;
    	    };
    	    TextBlot.blotName = 'text';
    	    TextBlot.scope = Registry.Scope.INLINE_BLOT;
    	    return TextBlot;
    	}(leaf_1.default));
    	exports.default = TextBlot;


    	/***/ }),
    	/* 50 */
    	/***/ (function(module, exports, __webpack_require__) {


    	var elem = document.createElement('div');
    	elem.classList.toggle('test-class', false);
    	if (elem.classList.contains('test-class')) {
    	  var _toggle = DOMTokenList.prototype.toggle;
    	  DOMTokenList.prototype.toggle = function (token, force) {
    	    if (arguments.length > 1 && !this.contains(token) === !force) {
    	      return force;
    	    } else {
    	      return _toggle.call(this, token);
    	    }
    	  };
    	}

    	if (!String.prototype.startsWith) {
    	  String.prototype.startsWith = function (searchString, position) {
    	    position = position || 0;
    	    return this.substr(position, searchString.length) === searchString;
    	  };
    	}

    	if (!String.prototype.endsWith) {
    	  String.prototype.endsWith = function (searchString, position) {
    	    var subjectString = this.toString();
    	    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
    	      position = subjectString.length;
    	    }
    	    position -= searchString.length;
    	    var lastIndex = subjectString.indexOf(searchString, position);
    	    return lastIndex !== -1 && lastIndex === position;
    	  };
    	}

    	if (!Array.prototype.find) {
    	  Object.defineProperty(Array.prototype, "find", {
    	    value: function value(predicate) {
    	      if (this === null) {
    	        throw new TypeError('Array.prototype.find called on null or undefined');
    	      }
    	      if (typeof predicate !== 'function') {
    	        throw new TypeError('predicate must be a function');
    	      }
    	      var list = Object(this);
    	      var length = list.length >>> 0;
    	      var thisArg = arguments[1];
    	      var value;

    	      for (var i = 0; i < length; i++) {
    	        value = list[i];
    	        if (predicate.call(thisArg, value, i, list)) {
    	          return value;
    	        }
    	      }
    	      return undefined;
    	    }
    	  });
    	}

    	document.addEventListener("DOMContentLoaded", function () {
    	  // Disable resizing in Firefox
    	  document.execCommand("enableObjectResizing", false, false);
    	  // Disable automatic linkifying in IE11
    	  document.execCommand("autoUrlDetect", false, false);
    	});

    	/***/ }),
    	/* 51 */
    	/***/ (function(module, exports) {

    	/**
    	 * This library modifies the diff-patch-match library by Neil Fraser
    	 * by removing the patch and match functionality and certain advanced
    	 * options in the diff function. The original license is as follows:
    	 *
    	 * ===
    	 *
    	 * Diff Match and Patch
    	 *
    	 * Copyright 2006 Google Inc.
    	 * http://code.google.com/p/google-diff-match-patch/
    	 *
    	 * Licensed under the Apache License, Version 2.0 (the "License");
    	 * you may not use this file except in compliance with the License.
    	 * You may obtain a copy of the License at
    	 *
    	 *   http://www.apache.org/licenses/LICENSE-2.0
    	 *
    	 * Unless required by applicable law or agreed to in writing, software
    	 * distributed under the License is distributed on an "AS IS" BASIS,
    	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    	 * See the License for the specific language governing permissions and
    	 * limitations under the License.
    	 */


    	/**
    	 * The data structure representing a diff is an array of tuples:
    	 * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
    	 * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
    	 */
    	var DIFF_DELETE = -1;
    	var DIFF_INSERT = 1;
    	var DIFF_EQUAL = 0;


    	/**
    	 * Find the differences between two texts.  Simplifies the problem by stripping
    	 * any common prefix or suffix off the texts before diffing.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @param {Int} cursor_pos Expected edit position in text1 (optional)
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_main(text1, text2, cursor_pos) {
    	  // Check for equality (speedup).
    	  if (text1 == text2) {
    	    if (text1) {
    	      return [[DIFF_EQUAL, text1]];
    	    }
    	    return [];
    	  }

    	  // Check cursor_pos within bounds
    	  if (cursor_pos < 0 || text1.length < cursor_pos) {
    	    cursor_pos = null;
    	  }

    	  // Trim off common prefix (speedup).
    	  var commonlength = diff_commonPrefix(text1, text2);
    	  var commonprefix = text1.substring(0, commonlength);
    	  text1 = text1.substring(commonlength);
    	  text2 = text2.substring(commonlength);

    	  // Trim off common suffix (speedup).
    	  commonlength = diff_commonSuffix(text1, text2);
    	  var commonsuffix = text1.substring(text1.length - commonlength);
    	  text1 = text1.substring(0, text1.length - commonlength);
    	  text2 = text2.substring(0, text2.length - commonlength);

    	  // Compute the diff on the middle block.
    	  var diffs = diff_compute_(text1, text2);

    	  // Restore the prefix and suffix.
    	  if (commonprefix) {
    	    diffs.unshift([DIFF_EQUAL, commonprefix]);
    	  }
    	  if (commonsuffix) {
    	    diffs.push([DIFF_EQUAL, commonsuffix]);
    	  }
    	  diff_cleanupMerge(diffs);
    	  if (cursor_pos != null) {
    	    diffs = fix_cursor(diffs, cursor_pos);
    	  }
    	  diffs = fix_emoji(diffs);
    	  return diffs;
    	}

    	/**
    	 * Find the differences between two texts.  Assumes that the texts do not
    	 * have any common prefix or suffix.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_compute_(text1, text2) {
    	  var diffs;

    	  if (!text1) {
    	    // Just add some text (speedup).
    	    return [[DIFF_INSERT, text2]];
    	  }

    	  if (!text2) {
    	    // Just delete some text (speedup).
    	    return [[DIFF_DELETE, text1]];
    	  }

    	  var longtext = text1.length > text2.length ? text1 : text2;
    	  var shorttext = text1.length > text2.length ? text2 : text1;
    	  var i = longtext.indexOf(shorttext);
    	  if (i != -1) {
    	    // Shorter text is inside the longer text (speedup).
    	    diffs = [[DIFF_INSERT, longtext.substring(0, i)],
    	             [DIFF_EQUAL, shorttext],
    	             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
    	    // Swap insertions for deletions if diff is reversed.
    	    if (text1.length > text2.length) {
    	      diffs[0][0] = diffs[2][0] = DIFF_DELETE;
    	    }
    	    return diffs;
    	  }

    	  if (shorttext.length == 1) {
    	    // Single character string.
    	    // After the previous speedup, the character can't be an equality.
    	    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    	  }

    	  // Check to see if the problem can be split in two.
    	  var hm = diff_halfMatch_(text1, text2);
    	  if (hm) {
    	    // A half-match was found, sort out the return data.
    	    var text1_a = hm[0];
    	    var text1_b = hm[1];
    	    var text2_a = hm[2];
    	    var text2_b = hm[3];
    	    var mid_common = hm[4];
    	    // Send both pairs off for separate processing.
    	    var diffs_a = diff_main(text1_a, text2_a);
    	    var diffs_b = diff_main(text1_b, text2_b);
    	    // Merge the results.
    	    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    	  }

    	  return diff_bisect_(text1, text2);
    	}

    	/**
    	 * Find the 'middle snake' of a diff, split the problem in two
    	 * and return the recursively constructed diff.
    	 * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @return {Array} Array of diff tuples.
    	 * @private
    	 */
    	function diff_bisect_(text1, text2) {
    	  // Cache the text lengths to prevent multiple calls.
    	  var text1_length = text1.length;
    	  var text2_length = text2.length;
    	  var max_d = Math.ceil((text1_length + text2_length) / 2);
    	  var v_offset = max_d;
    	  var v_length = 2 * max_d;
    	  var v1 = new Array(v_length);
    	  var v2 = new Array(v_length);
    	  // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    	  // integers and undefined.
    	  for (var x = 0; x < v_length; x++) {
    	    v1[x] = -1;
    	    v2[x] = -1;
    	  }
    	  v1[v_offset + 1] = 0;
    	  v2[v_offset + 1] = 0;
    	  var delta = text1_length - text2_length;
    	  // If the total number of characters is odd, then the front path will collide
    	  // with the reverse path.
    	  var front = (delta % 2 != 0);
    	  // Offsets for start and end of k loop.
    	  // Prevents mapping of space beyond the grid.
    	  var k1start = 0;
    	  var k1end = 0;
    	  var k2start = 0;
    	  var k2end = 0;
    	  for (var d = 0; d < max_d; d++) {
    	    // Walk the front path one step.
    	    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
    	      var k1_offset = v_offset + k1;
    	      var x1;
    	      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
    	        x1 = v1[k1_offset + 1];
    	      } else {
    	        x1 = v1[k1_offset - 1] + 1;
    	      }
    	      var y1 = x1 - k1;
    	      while (x1 < text1_length && y1 < text2_length &&
    	             text1.charAt(x1) == text2.charAt(y1)) {
    	        x1++;
    	        y1++;
    	      }
    	      v1[k1_offset] = x1;
    	      if (x1 > text1_length) {
    	        // Ran off the right of the graph.
    	        k1end += 2;
    	      } else if (y1 > text2_length) {
    	        // Ran off the bottom of the graph.
    	        k1start += 2;
    	      } else if (front) {
    	        var k2_offset = v_offset + delta - k1;
    	        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
    	          // Mirror x2 onto top-left coordinate system.
    	          var x2 = text1_length - v2[k2_offset];
    	          if (x1 >= x2) {
    	            // Overlap detected.
    	            return diff_bisectSplit_(text1, text2, x1, y1);
    	          }
    	        }
    	      }
    	    }

    	    // Walk the reverse path one step.
    	    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
    	      var k2_offset = v_offset + k2;
    	      var x2;
    	      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
    	        x2 = v2[k2_offset + 1];
    	      } else {
    	        x2 = v2[k2_offset - 1] + 1;
    	      }
    	      var y2 = x2 - k2;
    	      while (x2 < text1_length && y2 < text2_length &&
    	             text1.charAt(text1_length - x2 - 1) ==
    	             text2.charAt(text2_length - y2 - 1)) {
    	        x2++;
    	        y2++;
    	      }
    	      v2[k2_offset] = x2;
    	      if (x2 > text1_length) {
    	        // Ran off the left of the graph.
    	        k2end += 2;
    	      } else if (y2 > text2_length) {
    	        // Ran off the top of the graph.
    	        k2start += 2;
    	      } else if (!front) {
    	        var k1_offset = v_offset + delta - k2;
    	        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
    	          var x1 = v1[k1_offset];
    	          var y1 = v_offset + x1 - k1_offset;
    	          // Mirror x2 onto top-left coordinate system.
    	          x2 = text1_length - x2;
    	          if (x1 >= x2) {
    	            // Overlap detected.
    	            return diff_bisectSplit_(text1, text2, x1, y1);
    	          }
    	        }
    	      }
    	    }
    	  }
    	  // Diff took too long and hit the deadline or
    	  // number of diffs equals number of characters, no commonality at all.
    	  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    	}

    	/**
    	 * Given the location of the 'middle snake', split the diff in two parts
    	 * and recurse.
    	 * @param {string} text1 Old string to be diffed.
    	 * @param {string} text2 New string to be diffed.
    	 * @param {number} x Index of split point in text1.
    	 * @param {number} y Index of split point in text2.
    	 * @return {Array} Array of diff tuples.
    	 */
    	function diff_bisectSplit_(text1, text2, x, y) {
    	  var text1a = text1.substring(0, x);
    	  var text2a = text2.substring(0, y);
    	  var text1b = text1.substring(x);
    	  var text2b = text2.substring(y);

    	  // Compute both diffs serially.
    	  var diffs = diff_main(text1a, text2a);
    	  var diffsb = diff_main(text1b, text2b);

    	  return diffs.concat(diffsb);
    	}

    	/**
    	 * Determine the common prefix of two strings.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {number} The number of characters common to the start of each
    	 *     string.
    	 */
    	function diff_commonPrefix(text1, text2) {
    	  // Quick check for common null cases.
    	  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    	    return 0;
    	  }
    	  // Binary search.
    	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    	  var pointermin = 0;
    	  var pointermax = Math.min(text1.length, text2.length);
    	  var pointermid = pointermax;
    	  var pointerstart = 0;
    	  while (pointermin < pointermid) {
    	    if (text1.substring(pointerstart, pointermid) ==
    	        text2.substring(pointerstart, pointermid)) {
    	      pointermin = pointermid;
    	      pointerstart = pointermin;
    	    } else {
    	      pointermax = pointermid;
    	    }
    	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    	  }
    	  return pointermid;
    	}

    	/**
    	 * Determine the common suffix of two strings.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {number} The number of characters common to the end of each string.
    	 */
    	function diff_commonSuffix(text1, text2) {
    	  // Quick check for common null cases.
    	  if (!text1 || !text2 ||
    	      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    	    return 0;
    	  }
    	  // Binary search.
    	  // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    	  var pointermin = 0;
    	  var pointermax = Math.min(text1.length, text2.length);
    	  var pointermid = pointermax;
    	  var pointerend = 0;
    	  while (pointermin < pointermid) {
    	    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
    	        text2.substring(text2.length - pointermid, text2.length - pointerend)) {
    	      pointermin = pointermid;
    	      pointerend = pointermin;
    	    } else {
    	      pointermax = pointermid;
    	    }
    	    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    	  }
    	  return pointermid;
    	}

    	/**
    	 * Do the two texts share a substring which is at least half the length of the
    	 * longer text?
    	 * This speedup can produce non-minimal diffs.
    	 * @param {string} text1 First string.
    	 * @param {string} text2 Second string.
    	 * @return {Array.<string>} Five element Array, containing the prefix of
    	 *     text1, the suffix of text1, the prefix of text2, the suffix of
    	 *     text2 and the common middle.  Or null if there was no match.
    	 */
    	function diff_halfMatch_(text1, text2) {
    	  var longtext = text1.length > text2.length ? text1 : text2;
    	  var shorttext = text1.length > text2.length ? text2 : text1;
    	  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    	    return null;  // Pointless.
    	  }

    	  /**
    	   * Does a substring of shorttext exist within longtext such that the substring
    	   * is at least half the length of longtext?
    	   * Closure, but does not reference any external variables.
    	   * @param {string} longtext Longer string.
    	   * @param {string} shorttext Shorter string.
    	   * @param {number} i Start index of quarter length substring within longtext.
    	   * @return {Array.<string>} Five element Array, containing the prefix of
    	   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
    	   *     of shorttext and the common middle.  Or null if there was no match.
    	   * @private
    	   */
    	  function diff_halfMatchI_(longtext, shorttext, i) {
    	    // Start with a 1/4 length substring at position i as a seed.
    	    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
    	    var j = -1;
    	    var best_common = '';
    	    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    	    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
    	      var prefixLength = diff_commonPrefix(longtext.substring(i),
    	                                           shorttext.substring(j));
    	      var suffixLength = diff_commonSuffix(longtext.substring(0, i),
    	                                           shorttext.substring(0, j));
    	      if (best_common.length < suffixLength + prefixLength) {
    	        best_common = shorttext.substring(j - suffixLength, j) +
    	            shorttext.substring(j, j + prefixLength);
    	        best_longtext_a = longtext.substring(0, i - suffixLength);
    	        best_longtext_b = longtext.substring(i + prefixLength);
    	        best_shorttext_a = shorttext.substring(0, j - suffixLength);
    	        best_shorttext_b = shorttext.substring(j + prefixLength);
    	      }
    	    }
    	    if (best_common.length * 2 >= longtext.length) {
    	      return [best_longtext_a, best_longtext_b,
    	              best_shorttext_a, best_shorttext_b, best_common];
    	    } else {
    	      return null;
    	    }
    	  }

    	  // First check if the second quarter is the seed for a half-match.
    	  var hm1 = diff_halfMatchI_(longtext, shorttext,
    	                             Math.ceil(longtext.length / 4));
    	  // Check again based on the third quarter.
    	  var hm2 = diff_halfMatchI_(longtext, shorttext,
    	                             Math.ceil(longtext.length / 2));
    	  var hm;
    	  if (!hm1 && !hm2) {
    	    return null;
    	  } else if (!hm2) {
    	    hm = hm1;
    	  } else if (!hm1) {
    	    hm = hm2;
    	  } else {
    	    // Both matched.  Select the longest.
    	    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    	  }

    	  // A half-match was found, sort out the return data.
    	  var text1_a, text1_b, text2_a, text2_b;
    	  if (text1.length > text2.length) {
    	    text1_a = hm[0];
    	    text1_b = hm[1];
    	    text2_a = hm[2];
    	    text2_b = hm[3];
    	  } else {
    	    text2_a = hm[0];
    	    text2_b = hm[1];
    	    text1_a = hm[2];
    	    text1_b = hm[3];
    	  }
    	  var mid_common = hm[4];
    	  return [text1_a, text1_b, text2_a, text2_b, mid_common];
    	}

    	/**
    	 * Reorder and merge like edit sections.  Merge equalities.
    	 * Any edit section can move as long as it doesn't cross an equality.
    	 * @param {Array} diffs Array of diff tuples.
    	 */
    	function diff_cleanupMerge(diffs) {
    	  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
    	  var pointer = 0;
    	  var count_delete = 0;
    	  var count_insert = 0;
    	  var text_delete = '';
    	  var text_insert = '';
    	  var commonlength;
    	  while (pointer < diffs.length) {
    	    switch (diffs[pointer][0]) {
    	      case DIFF_INSERT:
    	        count_insert++;
    	        text_insert += diffs[pointer][1];
    	        pointer++;
    	        break;
    	      case DIFF_DELETE:
    	        count_delete++;
    	        text_delete += diffs[pointer][1];
    	        pointer++;
    	        break;
    	      case DIFF_EQUAL:
    	        // Upon reaching an equality, check for prior redundancies.
    	        if (count_delete + count_insert > 1) {
    	          if (count_delete !== 0 && count_insert !== 0) {
    	            // Factor out any common prefixies.
    	            commonlength = diff_commonPrefix(text_insert, text_delete);
    	            if (commonlength !== 0) {
    	              if ((pointer - count_delete - count_insert) > 0 &&
    	                  diffs[pointer - count_delete - count_insert - 1][0] ==
    	                  DIFF_EQUAL) {
    	                diffs[pointer - count_delete - count_insert - 1][1] +=
    	                    text_insert.substring(0, commonlength);
    	              } else {
    	                diffs.splice(0, 0, [DIFF_EQUAL,
    	                                    text_insert.substring(0, commonlength)]);
    	                pointer++;
    	              }
    	              text_insert = text_insert.substring(commonlength);
    	              text_delete = text_delete.substring(commonlength);
    	            }
    	            // Factor out any common suffixies.
    	            commonlength = diff_commonSuffix(text_insert, text_delete);
    	            if (commonlength !== 0) {
    	              diffs[pointer][1] = text_insert.substring(text_insert.length -
    	                  commonlength) + diffs[pointer][1];
    	              text_insert = text_insert.substring(0, text_insert.length -
    	                  commonlength);
    	              text_delete = text_delete.substring(0, text_delete.length -
    	                  commonlength);
    	            }
    	          }
    	          // Delete the offending records and add the merged ones.
    	          if (count_delete === 0) {
    	            diffs.splice(pointer - count_insert,
    	                count_delete + count_insert, [DIFF_INSERT, text_insert]);
    	          } else if (count_insert === 0) {
    	            diffs.splice(pointer - count_delete,
    	                count_delete + count_insert, [DIFF_DELETE, text_delete]);
    	          } else {
    	            diffs.splice(pointer - count_delete - count_insert,
    	                count_delete + count_insert, [DIFF_DELETE, text_delete],
    	                [DIFF_INSERT, text_insert]);
    	          }
    	          pointer = pointer - count_delete - count_insert +
    	                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
    	        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
    	          // Merge this equality with the previous one.
    	          diffs[pointer - 1][1] += diffs[pointer][1];
    	          diffs.splice(pointer, 1);
    	        } else {
    	          pointer++;
    	        }
    	        count_insert = 0;
    	        count_delete = 0;
    	        text_delete = '';
    	        text_insert = '';
    	        break;
    	    }
    	  }
    	  if (diffs[diffs.length - 1][1] === '') {
    	    diffs.pop();  // Remove the dummy entry at the end.
    	  }

    	  // Second pass: look for single edits surrounded on both sides by equalities
    	  // which can be shifted sideways to eliminate an equality.
    	  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    	  var changes = false;
    	  pointer = 1;
    	  // Intentionally ignore the first and last element (don't need checking).
    	  while (pointer < diffs.length - 1) {
    	    if (diffs[pointer - 1][0] == DIFF_EQUAL &&
    	        diffs[pointer + 1][0] == DIFF_EQUAL) {
    	      // This is a single edit surrounded by equalities.
    	      if (diffs[pointer][1].substring(diffs[pointer][1].length -
    	          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
    	        // Shift the edit over the previous equality.
    	        diffs[pointer][1] = diffs[pointer - 1][1] +
    	            diffs[pointer][1].substring(0, diffs[pointer][1].length -
    	                                        diffs[pointer - 1][1].length);
    	        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
    	        diffs.splice(pointer - 1, 1);
    	        changes = true;
    	      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
    	          diffs[pointer + 1][1]) {
    	        // Shift the edit over the next equality.
    	        diffs[pointer - 1][1] += diffs[pointer + 1][1];
    	        diffs[pointer][1] =
    	            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
    	            diffs[pointer + 1][1];
    	        diffs.splice(pointer + 1, 1);
    	        changes = true;
    	      }
    	    }
    	    pointer++;
    	  }
    	  // If shifts were made, the diff needs reordering and another shift sweep.
    	  if (changes) {
    	    diff_cleanupMerge(diffs);
    	  }
    	}

    	var diff = diff_main;
    	diff.INSERT = DIFF_INSERT;
    	diff.DELETE = DIFF_DELETE;
    	diff.EQUAL = DIFF_EQUAL;

    	module.exports = diff;

    	/*
    	 * Modify a diff such that the cursor position points to the start of a change:
    	 * E.g.
    	 *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
    	 *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
    	 *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
    	 *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
    	 * @return {Array} A tuple [cursor location in the modified diff, modified diff]
    	 */
    	function cursor_normalize_diff (diffs, cursor_pos) {
    	  if (cursor_pos === 0) {
    	    return [DIFF_EQUAL, diffs];
    	  }
    	  for (var current_pos = 0, i = 0; i < diffs.length; i++) {
    	    var d = diffs[i];
    	    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
    	      var next_pos = current_pos + d[1].length;
    	      if (cursor_pos === next_pos) {
    	        return [i + 1, diffs];
    	      } else if (cursor_pos < next_pos) {
    	        // copy to prevent side effects
    	        diffs = diffs.slice();
    	        // split d into two diff changes
    	        var split_pos = cursor_pos - current_pos;
    	        var d_left = [d[0], d[1].slice(0, split_pos)];
    	        var d_right = [d[0], d[1].slice(split_pos)];
    	        diffs.splice(i, 1, d_left, d_right);
    	        return [i + 1, diffs];
    	      } else {
    	        current_pos = next_pos;
    	      }
    	    }
    	  }
    	  throw new Error('cursor_pos is out of bounds!')
    	}

    	/*
    	 * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
    	 *
    	 * Case 1)
    	 *   Check if a naive shift is possible:
    	 *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
    	 *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
    	 * Case 2)
    	 *   Check if the following shifts are possible:
    	 *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
    	 *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
    	 *         ^            ^
    	 *         d          d_next
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
    	 * @return {Array} Array of diff tuples
    	 */
    	function fix_cursor (diffs, cursor_pos) {
    	  var norm = cursor_normalize_diff(diffs, cursor_pos);
    	  var ndiffs = norm[1];
    	  var cursor_pointer = norm[0];
    	  var d = ndiffs[cursor_pointer];
    	  var d_next = ndiffs[cursor_pointer + 1];

    	  if (d == null) {
    	    // Text was deleted from end of original string,
    	    // cursor is now out of bounds in new string
    	    return diffs;
    	  } else if (d[0] !== DIFF_EQUAL) {
    	    // A modification happened at the cursor location.
    	    // This is the expected outcome, so we can return the original diff.
    	    return diffs;
    	  } else {
    	    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
    	      // Case 1)
    	      // It is possible to perform a naive shift
    	      ndiffs.splice(cursor_pointer, 2, d_next, d);
    	      return merge_tuples(ndiffs, cursor_pointer, 2)
    	    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
    	      // Case 2)
    	      // d[1] is a prefix of d_next[1]
    	      // We can assume that d_next[0] !== 0, since d[0] === 0
    	      // Shift edit locations..
    	      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
    	      var suffix = d_next[1].slice(d[1].length);
    	      if (suffix.length > 0) {
    	        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
    	      }
    	      return merge_tuples(ndiffs, cursor_pointer, 3)
    	    } else {
    	      // Not possible to perform any modification
    	      return diffs;
    	    }
    	  }
    	}

    	/*
    	 * Check diff did not split surrogate pairs.
    	 * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
    	 *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
    	 *
    	 * @param {Array} diffs Array of diff tuples
    	 * @return {Array} Array of diff tuples
    	 */
    	function fix_emoji (diffs) {
    	  var compact = false;
    	  var starts_with_pair_end = function(str) {
    	    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
    	  };
    	  var ends_with_pair_start = function(str) {
    	    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
    	  };
    	  for (var i = 2; i < diffs.length; i += 1) {
    	    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
    	        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
    	        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
    	      compact = true;

    	      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
    	      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

    	      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
    	    }
    	  }
    	  if (!compact) {
    	    return diffs;
    	  }
    	  var fixed_diffs = [];
    	  for (var i = 0; i < diffs.length; i += 1) {
    	    if (diffs[i][1].length > 0) {
    	      fixed_diffs.push(diffs[i]);
    	    }
    	  }
    	  return fixed_diffs;
    	}

    	/*
    	 * Try to merge tuples with their neigbors in a given range.
    	 * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
    	 *
    	 * @param {Array} diffs Array of diff tuples.
    	 * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
    	 * @param {Int} length Number of consecutive elements to check.
    	 * @return {Array} Array of merged diff tuples.
    	 */
    	function merge_tuples (diffs, start, length) {
    	  // Check from (start-1) to (start+length).
    	  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
    	    if (i + 1 < diffs.length) {
    	      var left_d = diffs[i];
    	      var right_d = diffs[i+1];
    	      if (left_d[0] === right_d[1]) {
    	        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
    	      }
    	    }
    	  }
    	  return diffs;
    	}


    	/***/ }),
    	/* 52 */
    	/***/ (function(module, exports) {

    	exports = module.exports = typeof Object.keys === 'function'
    	  ? Object.keys : shim;

    	exports.shim = shim;
    	function shim (obj) {
    	  var keys = [];
    	  for (var key in obj) keys.push(key);
    	  return keys;
    	}


    	/***/ }),
    	/* 53 */
    	/***/ (function(module, exports) {

    	var supportsArgumentsClass = (function(){
    	  return Object.prototype.toString.call(arguments)
    	})() == '[object Arguments]';

    	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

    	exports.supported = supported;
    	function supported(object) {
    	  return Object.prototype.toString.call(object) == '[object Arguments]';
    	}
    	exports.unsupported = unsupported;
    	function unsupported(object){
    	  return object &&
    	    typeof object == 'object' &&
    	    typeof object.length == 'number' &&
    	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    	    false;
    	}

    	/***/ }),
    	/* 54 */
    	/***/ (function(module, exports) {

    	var has = Object.prototype.hasOwnProperty
    	  , prefix = '~';

    	/**
    	 * Constructor to create a storage for our `EE` objects.
    	 * An `Events` instance is a plain object whose properties are event names.
    	 *
    	 * @constructor
    	 * @api private
    	 */
    	function Events() {}

    	//
    	// We try to not inherit from `Object.prototype`. In some engines creating an
    	// instance in this way is faster than calling `Object.create(null)` directly.
    	// If `Object.create(null)` is not supported we prefix the event names with a
    	// character to make sure that the built-in object properties are not
    	// overridden or used as an attack vector.
    	//
    	if (Object.create) {
    	  Events.prototype = Object.create(null);

    	  //
    	  // This hack is needed because the `__proto__` property is still inherited in
    	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    	  //
    	  if (!new Events().__proto__) prefix = false;
    	}

    	/**
    	 * Representation of a single event listener.
    	 *
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} context The context to invoke the listener with.
    	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
    	 * @constructor
    	 * @api private
    	 */
    	function EE(fn, context, once) {
    	  this.fn = fn;
    	  this.context = context;
    	  this.once = once || false;
    	}

    	/**
    	 * Minimal `EventEmitter` interface that is molded against the Node.js
    	 * `EventEmitter` interface.
    	 *
    	 * @constructor
    	 * @api public
    	 */
    	function EventEmitter() {
    	  this._events = new Events();
    	  this._eventsCount = 0;
    	}

    	/**
    	 * Return an array listing the events for which the emitter has registered
    	 * listeners.
    	 *
    	 * @returns {Array}
    	 * @api public
    	 */
    	EventEmitter.prototype.eventNames = function eventNames() {
    	  var names = []
    	    , events
    	    , name;

    	  if (this._eventsCount === 0) return names;

    	  for (name in (events = this._events)) {
    	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    	  }

    	  if (Object.getOwnPropertySymbols) {
    	    return names.concat(Object.getOwnPropertySymbols(events));
    	  }

    	  return names;
    	};

    	/**
    	 * Return the listeners registered for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Boolean} exists Only check if there are listeners.
    	 * @returns {Array|Boolean}
    	 * @api public
    	 */
    	EventEmitter.prototype.listeners = function listeners(event, exists) {
    	  var evt = prefix ? prefix + event : event
    	    , available = this._events[evt];

    	  if (exists) return !!available;
    	  if (!available) return [];
    	  if (available.fn) return [available.fn];

    	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    	    ee[i] = available[i].fn;
    	  }

    	  return ee;
    	};

    	/**
    	 * Calls each of the listeners registered for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @returns {Boolean} `true` if the event had listeners, else `false`.
    	 * @api public
    	 */
    	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return false;

    	  var listeners = this._events[evt]
    	    , len = arguments.length
    	    , args
    	    , i;

    	  if (listeners.fn) {
    	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    	    switch (len) {
    	      case 1: return listeners.fn.call(listeners.context), true;
    	      case 2: return listeners.fn.call(listeners.context, a1), true;
    	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
    	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
    	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
    	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    	    }

    	    for (i = 1, args = new Array(len -1); i < len; i++) {
    	      args[i - 1] = arguments[i];
    	    }

    	    listeners.fn.apply(listeners.context, args);
    	  } else {
    	    var length = listeners.length
    	      , j;

    	    for (i = 0; i < length; i++) {
    	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

    	      switch (len) {
    	        case 1: listeners[i].fn.call(listeners[i].context); break;
    	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
    	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
    	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
    	        default:
    	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
    	            args[j - 1] = arguments[j];
    	          }

    	          listeners[i].fn.apply(listeners[i].context, args);
    	      }
    	    }
    	  }

    	  return true;
    	};

    	/**
    	 * Add a listener for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.on = function on(event, fn, context) {
    	  var listener = new EE(fn, context || this)
    	    , evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    	  else if (!this._events[evt].fn) this._events[evt].push(listener);
    	  else this._events[evt] = [this._events[evt], listener];

    	  return this;
    	};

    	/**
    	 * Add a one-time listener for a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn The listener function.
    	 * @param {Mixed} [context=this] The context to invoke the listener with.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.once = function once(event, fn, context) {
    	  var listener = new EE(fn, context || this, true)
    	    , evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    	  else if (!this._events[evt].fn) this._events[evt].push(listener);
    	  else this._events[evt] = [this._events[evt], listener];

    	  return this;
    	};

    	/**
    	 * Remove the listeners of a given event.
    	 *
    	 * @param {String|Symbol} event The event name.
    	 * @param {Function} fn Only remove the listeners that match this function.
    	 * @param {Mixed} context Only remove the listeners that have this context.
    	 * @param {Boolean} once Only remove one-time listeners.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    	  var evt = prefix ? prefix + event : event;

    	  if (!this._events[evt]) return this;
    	  if (!fn) {
    	    if (--this._eventsCount === 0) this._events = new Events();
    	    else delete this._events[evt];
    	    return this;
    	  }

    	  var listeners = this._events[evt];

    	  if (listeners.fn) {
    	    if (
    	         listeners.fn === fn
    	      && (!once || listeners.once)
    	      && (!context || listeners.context === context)
    	    ) {
    	      if (--this._eventsCount === 0) this._events = new Events();
    	      else delete this._events[evt];
    	    }
    	  } else {
    	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
    	      if (
    	           listeners[i].fn !== fn
    	        || (once && !listeners[i].once)
    	        || (context && listeners[i].context !== context)
    	      ) {
    	        events.push(listeners[i]);
    	      }
    	    }

    	    //
    	    // Reset the array, or remove it completely if we have no more listeners.
    	    //
    	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    	    else if (--this._eventsCount === 0) this._events = new Events();
    	    else delete this._events[evt];
    	  }

    	  return this;
    	};

    	/**
    	 * Remove all listeners, or those of the specified event.
    	 *
    	 * @param {String|Symbol} [event] The event name.
    	 * @returns {EventEmitter} `this`.
    	 * @api public
    	 */
    	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    	  var evt;

    	  if (event) {
    	    evt = prefix ? prefix + event : event;
    	    if (this._events[evt]) {
    	      if (--this._eventsCount === 0) this._events = new Events();
    	      else delete this._events[evt];
    	    }
    	  } else {
    	    this._events = new Events();
    	    this._eventsCount = 0;
    	  }

    	  return this;
    	};

    	//
    	// Alias methods names because people roll like that.
    	//
    	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    	//
    	// This function doesn't apply anymore.
    	//
    	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    	  return this;
    	};

    	//
    	// Expose the prefix.
    	//
    	EventEmitter.prefixed = prefix;

    	//
    	// Allow `EventEmitter` to be imported as module namespace.
    	//
    	EventEmitter.EventEmitter = EventEmitter;

    	//
    	// Expose the module.
    	//
    	if ('undefined' !== typeof module) {
    	  module.exports = EventEmitter;
    	}


    	/***/ }),
    	/* 55 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

    	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend2 = __webpack_require__(3);

    	var _extend3 = _interopRequireDefault(_extend2);

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _align = __webpack_require__(36);

    	var _background = __webpack_require__(37);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _color = __webpack_require__(26);

    	var _direction = __webpack_require__(38);

    	var _font = __webpack_require__(39);

    	var _size = __webpack_require__(40);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:clipboard');

    	var DOM_KEY = '__ql-matcher';

    	var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

    	var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
    	  memo[attr.keyName] = attr;
    	  return memo;
    	}, {});

    	var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
    	  memo[attr.keyName] = attr;
    	  return memo;
    	}, {});

    	var Clipboard = function (_Module) {
    	  _inherits(Clipboard, _Module);

    	  function Clipboard(quill, options) {
    	    _classCallCheck(this, Clipboard);

    	    var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

    	    _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
    	    _this.container = _this.quill.addContainer('ql-clipboard');
    	    _this.container.setAttribute('contenteditable', true);
    	    _this.container.setAttribute('tabindex', -1);
    	    _this.matchers = [];
    	    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
    	      var _ref2 = _slicedToArray(_ref, 2),
    	          selector = _ref2[0],
    	          matcher = _ref2[1];

    	      if (!options.matchVisual && matcher === matchSpacing) return;
    	      _this.addMatcher(selector, matcher);
    	    });
    	    return _this;
    	  }

    	  _createClass(Clipboard, [{
    	    key: 'addMatcher',
    	    value: function addMatcher(selector, matcher) {
    	      this.matchers.push([selector, matcher]);
    	    }
    	  }, {
    	    key: 'convert',
    	    value: function convert(html) {
    	      if (typeof html === 'string') {
    	        this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
    	        return this.convert();
    	      }
    	      var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
    	      if (formats[_code2.default.blotName]) {
    	        var text = this.container.innerText;
    	        this.container.innerHTML = '';
    	        return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
    	      }

    	      var _prepareMatching = this.prepareMatching(),
    	          _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
    	          elementMatchers = _prepareMatching2[0],
    	          textMatchers = _prepareMatching2[1];

    	      var delta = traverse(this.container, elementMatchers, textMatchers);
    	      // Remove trailing newline
    	      if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
    	        delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
    	      }
    	      debug.log('convert', this.container.innerHTML, delta);
    	      this.container.innerHTML = '';
    	      return delta;
    	    }
    	  }, {
    	    key: 'dangerouslyPasteHTML',
    	    value: function dangerouslyPasteHTML(index, html) {
    	      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

    	      if (typeof index === 'string') {
    	        this.quill.setContents(this.convert(index), html);
    	        this.quill.setSelection(0, _quill2.default.sources.SILENT);
    	      } else {
    	        var paste = this.convert(html);
    	        this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
    	        this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
    	      }
    	    }
    	  }, {
    	    key: 'onPaste',
    	    value: function onPaste(e) {
    	      var _this2 = this;

    	      if (e.defaultPrevented || !this.quill.isEnabled()) return;
    	      var range = this.quill.getSelection();
    	      var delta = new _quillDelta2.default().retain(range.index);
    	      var scrollTop = this.quill.scrollingContainer.scrollTop;
    	      this.container.focus();
    	      this.quill.selection.update(_quill2.default.sources.SILENT);
    	      setTimeout(function () {
    	        delta = delta.concat(_this2.convert()).delete(range.length);
    	        _this2.quill.updateContents(delta, _quill2.default.sources.USER);
    	        // range.length contributes to delta.length()
    	        _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
    	        _this2.quill.scrollingContainer.scrollTop = scrollTop;
    	        _this2.quill.focus();
    	      }, 1);
    	    }
    	  }, {
    	    key: 'prepareMatching',
    	    value: function prepareMatching() {
    	      var _this3 = this;

    	      var elementMatchers = [],
    	          textMatchers = [];
    	      this.matchers.forEach(function (pair) {
    	        var _pair = _slicedToArray(pair, 2),
    	            selector = _pair[0],
    	            matcher = _pair[1];

    	        switch (selector) {
    	          case Node.TEXT_NODE:
    	            textMatchers.push(matcher);
    	            break;
    	          case Node.ELEMENT_NODE:
    	            elementMatchers.push(matcher);
    	            break;
    	          default:
    	            [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
    	              // TODO use weakmap
    	              node[DOM_KEY] = node[DOM_KEY] || [];
    	              node[DOM_KEY].push(matcher);
    	            });
    	            break;
    	        }
    	      });
    	      return [elementMatchers, textMatchers];
    	    }
    	  }]);

    	  return Clipboard;
    	}(_module2.default);

    	Clipboard.DEFAULTS = {
    	  matchers: [],
    	  matchVisual: true
    	};

    	function applyFormat(delta, format, value) {
    	  if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
    	    return Object.keys(format).reduce(function (delta, key) {
    	      return applyFormat(delta, key, format[key]);
    	    }, delta);
    	  } else {
    	    return delta.reduce(function (delta, op) {
    	      if (op.attributes && op.attributes[format]) {
    	        return delta.push(op);
    	      } else {
    	        return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
    	      }
    	    }, new _quillDelta2.default());
    	  }
    	}

    	function computeStyle(node) {
    	  if (node.nodeType !== Node.ELEMENT_NODE) return {};
    	  var DOM_KEY = '__ql-computed-style';
    	  return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
    	}

    	function deltaEndsWith(delta, text) {
    	  var endText = "";
    	  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
    	    var op = delta.ops[i];
    	    if (typeof op.insert !== 'string') break;
    	    endText = op.insert + endText;
    	  }
    	  return endText.slice(-1 * text.length) === text;
    	}

    	function isLine(node) {
    	  if (node.childNodes.length === 0) return false; // Exclude embed blocks
    	  var style = computeStyle(node);
    	  return ['block', 'list-item'].indexOf(style.display) > -1;
    	}

    	function traverse(node, elementMatchers, textMatchers) {
    	  // Post-order
    	  if (node.nodeType === node.TEXT_NODE) {
    	    return textMatchers.reduce(function (delta, matcher) {
    	      return matcher(node, delta);
    	    }, new _quillDelta2.default());
    	  } else if (node.nodeType === node.ELEMENT_NODE) {
    	    return [].reduce.call(node.childNodes || [], function (delta, childNode) {
    	      var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
    	      if (childNode.nodeType === node.ELEMENT_NODE) {
    	        childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
    	          return matcher(childNode, childrenDelta);
    	        }, childrenDelta);
    	        childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
    	          return matcher(childNode, childrenDelta);
    	        }, childrenDelta);
    	      }
    	      return delta.concat(childrenDelta);
    	    }, new _quillDelta2.default());
    	  } else {
    	    return new _quillDelta2.default();
    	  }
    	}

    	function matchAlias(format, node, delta) {
    	  return applyFormat(delta, format, true);
    	}

    	function matchAttributor(node, delta) {
    	  var attributes = _parchment2.default.Attributor.Attribute.keys(node);
    	  var classes = _parchment2.default.Attributor.Class.keys(node);
    	  var styles = _parchment2.default.Attributor.Style.keys(node);
    	  var formats = {};
    	  attributes.concat(classes).concat(styles).forEach(function (name) {
    	    var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
    	    if (attr != null) {
    	      formats[attr.attrName] = attr.value(node);
    	      if (formats[attr.attrName]) return;
    	    }
    	    attr = ATTRIBUTE_ATTRIBUTORS[name];
    	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
    	      formats[attr.attrName] = attr.value(node) || undefined;
    	    }
    	    attr = STYLE_ATTRIBUTORS[name];
    	    if (attr != null && (attr.attrName === name || attr.keyName === name)) {
    	      attr = STYLE_ATTRIBUTORS[name];
    	      formats[attr.attrName] = attr.value(node) || undefined;
    	    }
    	  });
    	  if (Object.keys(formats).length > 0) {
    	    delta = applyFormat(delta, formats);
    	  }
    	  return delta;
    	}

    	function matchBlot(node, delta) {
    	  var match = _parchment2.default.query(node);
    	  if (match == null) return delta;
    	  if (match.prototype instanceof _parchment2.default.Embed) {
    	    var embed = {};
    	    var value = match.value(node);
    	    if (value != null) {
    	      embed[match.blotName] = value;
    	      delta = new _quillDelta2.default().insert(embed, match.formats(node));
    	    }
    	  } else if (typeof match.formats === 'function') {
    	    delta = applyFormat(delta, match.blotName, match.formats(node));
    	  }
    	  return delta;
    	}

    	function matchBreak(node, delta) {
    	  if (!deltaEndsWith(delta, '\n')) {
    	    delta.insert('\n');
    	  }
    	  return delta;
    	}

    	function matchIgnore() {
    	  return new _quillDelta2.default();
    	}

    	function matchIndent(node, delta) {
    	  var match = _parchment2.default.query(node);
    	  if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
    	    return delta;
    	  }
    	  var indent = -1,
    	      parent = node.parentNode;
    	  while (!parent.classList.contains('ql-clipboard')) {
    	    if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
    	      indent += 1;
    	    }
    	    parent = parent.parentNode;
    	  }
    	  if (indent <= 0) return delta;
    	  return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
    	}

    	function matchNewline(node, delta) {
    	  if (!deltaEndsWith(delta, '\n')) {
    	    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
    	      delta.insert('\n');
    	    }
    	  }
    	  return delta;
    	}

    	function matchSpacing(node, delta) {
    	  if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
    	    var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
    	    if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
    	      delta.insert('\n');
    	    }
    	  }
    	  return delta;
    	}

    	function matchStyles(node, delta) {
    	  var formats = {};
    	  var style = node.style || {};
    	  if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
    	    formats.italic = true;
    	  }
    	  if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
    	    formats.bold = true;
    	  }
    	  if (Object.keys(formats).length > 0) {
    	    delta = applyFormat(delta, formats);
    	  }
    	  if (parseFloat(style.textIndent || 0) > 0) {
    	    // Could be 0.5in
    	    delta = new _quillDelta2.default().insert('\t').concat(delta);
    	  }
    	  return delta;
    	}

    	function matchText(node, delta) {
    	  var text = node.data;
    	  // Word represents empty line with <o:p>&nbsp;</o:p>
    	  if (node.parentNode.tagName === 'O:P') {
    	    return delta.insert(text.trim());
    	  }
    	  if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
    	    return delta;
    	  }
    	  if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
    	    // eslint-disable-next-line func-style
    	    var replacer = function replacer(collapse, match) {
    	      match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
    	      return match.length < 1 && collapse ? ' ' : match;
    	    };
    	    text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
    	    text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
    	    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
    	      text = text.replace(/^\s+/, replacer.bind(replacer, false));
    	    }
    	    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
    	      text = text.replace(/\s+$/, replacer.bind(replacer, false));
    	    }
    	  }
    	  return delta.insert(text);
    	}

    	exports.default = Clipboard;
    	exports.matchAttributor = matchAttributor;
    	exports.matchBlot = matchBlot;
    	exports.matchNewline = matchNewline;
    	exports.matchSpacing = matchSpacing;
    	exports.matchText = matchText;

    	/***/ }),
    	/* 56 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Bold = function (_Inline) {
    	  _inherits(Bold, _Inline);

    	  function Bold() {
    	    _classCallCheck(this, Bold);

    	    return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
    	  }

    	  _createClass(Bold, [{
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
    	      if (this.domNode.tagName !== this.statics.tagName[0]) {
    	        this.replaceWith(this.statics.blotName);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create() {
    	      return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      return true;
    	    }
    	  }]);

    	  return Bold;
    	}(_inline2.default);

    	Bold.blotName = 'bold';
    	Bold.tagName = ['STRONG', 'B'];

    	exports.default = Bold;

    	/***/ }),
    	/* 57 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.addControls = exports.default = undefined;

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _quillDelta = __webpack_require__(2);

    	var _quillDelta2 = _interopRequireDefault(_quillDelta);

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _logger = __webpack_require__(10);

    	var _logger2 = _interopRequireDefault(_logger);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var debug = (0, _logger2.default)('quill:toolbar');

    	var Toolbar = function (_Module) {
    	  _inherits(Toolbar, _Module);

    	  function Toolbar(quill, options) {
    	    _classCallCheck(this, Toolbar);

    	    var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

    	    if (Array.isArray(_this.options.container)) {
    	      var container = document.createElement('div');
    	      addControls(container, _this.options.container);
    	      quill.container.parentNode.insertBefore(container, quill.container);
    	      _this.container = container;
    	    } else if (typeof _this.options.container === 'string') {
    	      _this.container = document.querySelector(_this.options.container);
    	    } else {
    	      _this.container = _this.options.container;
    	    }
    	    if (!(_this.container instanceof HTMLElement)) {
    	      var _ret;

    	      return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
    	    }
    	    _this.container.classList.add('ql-toolbar');
    	    _this.controls = [];
    	    _this.handlers = {};
    	    Object.keys(_this.options.handlers).forEach(function (format) {
    	      _this.addHandler(format, _this.options.handlers[format]);
    	    });
    	    [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
    	      _this.attach(input);
    	    });
    	    _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
    	      if (type === _quill2.default.events.SELECTION_CHANGE) {
    	        _this.update(range);
    	      }
    	    });
    	    _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
    	      var _this$quill$selection = _this.quill.selection.getRange(),
    	          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
    	          range = _this$quill$selection2[0]; // quill.getSelection triggers update


    	      _this.update(range);
    	    });
    	    return _this;
    	  }

    	  _createClass(Toolbar, [{
    	    key: 'addHandler',
    	    value: function addHandler(format, handler) {
    	      this.handlers[format] = handler;
    	    }
    	  }, {
    	    key: 'attach',
    	    value: function attach(input) {
    	      var _this2 = this;

    	      var format = [].find.call(input.classList, function (className) {
    	        return className.indexOf('ql-') === 0;
    	      });
    	      if (!format) return;
    	      format = format.slice('ql-'.length);
    	      if (input.tagName === 'BUTTON') {
    	        input.setAttribute('type', 'button');
    	      }
    	      if (this.handlers[format] == null) {
    	        if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
    	          debug.warn('ignoring attaching to disabled format', format, input);
    	          return;
    	        }
    	        if (_parchment2.default.query(format) == null) {
    	          debug.warn('ignoring attaching to nonexistent format', format, input);
    	          return;
    	        }
    	      }
    	      var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
    	      input.addEventListener(eventName, function (e) {
    	        var value = void 0;
    	        if (input.tagName === 'SELECT') {
    	          if (input.selectedIndex < 0) return;
    	          var selected = input.options[input.selectedIndex];
    	          if (selected.hasAttribute('selected')) {
    	            value = false;
    	          } else {
    	            value = selected.value || false;
    	          }
    	        } else {
    	          if (input.classList.contains('ql-active')) {
    	            value = false;
    	          } else {
    	            value = input.value || !input.hasAttribute('value');
    	          }
    	          e.preventDefault();
    	        }
    	        _this2.quill.focus();

    	        var _quill$selection$getR = _this2.quill.selection.getRange(),
    	            _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
    	            range = _quill$selection$getR2[0];

    	        if (_this2.handlers[format] != null) {
    	          _this2.handlers[format].call(_this2, value);
    	        } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
    	          value = prompt('Enter ' + format);
    	          if (!value) return;
    	          _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
    	        } else {
    	          _this2.quill.format(format, value, _quill2.default.sources.USER);
    	        }
    	        _this2.update(range);
    	      });
    	      // TODO use weakmap
    	      this.controls.push([format, input]);
    	    }
    	  }, {
    	    key: 'update',
    	    value: function update(range) {
    	      var formats = range == null ? {} : this.quill.getFormat(range);
    	      this.controls.forEach(function (pair) {
    	        var _pair = _slicedToArray(pair, 2),
    	            format = _pair[0],
    	            input = _pair[1];

    	        if (input.tagName === 'SELECT') {
    	          var option = void 0;
    	          if (range == null) {
    	            option = null;
    	          } else if (formats[format] == null) {
    	            option = input.querySelector('option[selected]');
    	          } else if (!Array.isArray(formats[format])) {
    	            var value = formats[format];
    	            if (typeof value === 'string') {
    	              value = value.replace(/\"/g, '\\"');
    	            }
    	            option = input.querySelector('option[value="' + value + '"]');
    	          }
    	          if (option == null) {
    	            input.value = ''; // TODO make configurable?
    	            input.selectedIndex = -1;
    	          } else {
    	            option.selected = true;
    	          }
    	        } else {
    	          if (range == null) {
    	            input.classList.remove('ql-active');
    	          } else if (input.hasAttribute('value')) {
    	            // both being null should match (default values)
    	            // '1' should match with 1 (headers)
    	            var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
    	            input.classList.toggle('ql-active', isActive);
    	          } else {
    	            input.classList.toggle('ql-active', formats[format] != null);
    	          }
    	        }
    	      });
    	    }
    	  }]);

    	  return Toolbar;
    	}(_module2.default);

    	Toolbar.DEFAULTS = {};

    	function addButton(container, format, value) {
    	  var input = document.createElement('button');
    	  input.setAttribute('type', 'button');
    	  input.classList.add('ql-' + format);
    	  if (value != null) {
    	    input.value = value;
    	  }
    	  container.appendChild(input);
    	}

    	function addControls(container, groups) {
    	  if (!Array.isArray(groups[0])) {
    	    groups = [groups];
    	  }
    	  groups.forEach(function (controls) {
    	    var group = document.createElement('span');
    	    group.classList.add('ql-formats');
    	    controls.forEach(function (control) {
    	      if (typeof control === 'string') {
    	        addButton(group, control);
    	      } else {
    	        var format = Object.keys(control)[0];
    	        var value = control[format];
    	        if (Array.isArray(value)) {
    	          addSelect(group, format, value);
    	        } else {
    	          addButton(group, format, value);
    	        }
    	      }
    	    });
    	    container.appendChild(group);
    	  });
    	}

    	function addSelect(container, format, values) {
    	  var input = document.createElement('select');
    	  input.classList.add('ql-' + format);
    	  values.forEach(function (value) {
    	    var option = document.createElement('option');
    	    if (value !== false) {
    	      option.setAttribute('value', value);
    	    } else {
    	      option.setAttribute('selected', 'selected');
    	    }
    	    input.appendChild(option);
    	  });
    	  container.appendChild(input);
    	}

    	Toolbar.DEFAULTS = {
    	  container: null,
    	  handlers: {
    	    clean: function clean() {
    	      var _this3 = this;

    	      var range = this.quill.getSelection();
    	      if (range == null) return;
    	      if (range.length == 0) {
    	        var formats = this.quill.getFormat();
    	        Object.keys(formats).forEach(function (name) {
    	          // Clean functionality in existing apps only clean inline formats
    	          if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
    	            _this3.quill.format(name, false);
    	          }
    	        });
    	      } else {
    	        this.quill.removeFormat(range, _quill2.default.sources.USER);
    	      }
    	    },
    	    direction: function direction(value) {
    	      var align = this.quill.getFormat()['align'];
    	      if (value === 'rtl' && align == null) {
    	        this.quill.format('align', 'right', _quill2.default.sources.USER);
    	      } else if (!value && align === 'right') {
    	        this.quill.format('align', false, _quill2.default.sources.USER);
    	      }
    	      this.quill.format('direction', value, _quill2.default.sources.USER);
    	    },
    	    indent: function indent(value) {
    	      var range = this.quill.getSelection();
    	      var formats = this.quill.getFormat(range);
    	      var indent = parseInt(formats.indent || 0);
    	      if (value === '+1' || value === '-1') {
    	        var modifier = value === '+1' ? 1 : -1;
    	        if (formats.direction === 'rtl') modifier *= -1;
    	        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
    	      }
    	    },
    	    link: function link(value) {
    	      if (value === true) {
    	        value = prompt('Enter link URL:');
    	      }
    	      this.quill.format('link', value, _quill2.default.sources.USER);
    	    },
    	    list: function list(value) {
    	      var range = this.quill.getSelection();
    	      var formats = this.quill.getFormat(range);
    	      if (value === 'check') {
    	        if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
    	          this.quill.format('list', false, _quill2.default.sources.USER);
    	        } else {
    	          this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
    	        }
    	      } else {
    	        this.quill.format('list', value, _quill2.default.sources.USER);
    	      }
    	    }
    	  }
    	};

    	exports.default = Toolbar;
    	exports.addControls = addControls;

    	/***/ }),
    	/* 58 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

    	/***/ }),
    	/* 59 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ColorPicker = function (_Picker) {
    	  _inherits(ColorPicker, _Picker);

    	  function ColorPicker(select, label) {
    	    _classCallCheck(this, ColorPicker);

    	    var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

    	    _this.label.innerHTML = label;
    	    _this.container.classList.add('ql-color-picker');
    	    [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
    	      item.classList.add('ql-primary');
    	    });
    	    return _this;
    	  }

    	  _createClass(ColorPicker, [{
    	    key: 'buildItem',
    	    value: function buildItem(option) {
    	      var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
    	      item.style.backgroundColor = option.getAttribute('value') || '';
    	      return item;
    	    }
    	  }, {
    	    key: 'selectItem',
    	    value: function selectItem(item, trigger) {
    	      _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
    	      var colorLabel = this.label.querySelector('.ql-color-label');
    	      var value = item ? item.getAttribute('data-value') || '' : '';
    	      if (colorLabel) {
    	        if (colorLabel.tagName === 'line') {
    	          colorLabel.style.stroke = value;
    	        } else {
    	          colorLabel.style.fill = value;
    	        }
    	      }
    	    }
    	  }]);

    	  return ColorPicker;
    	}(_picker2.default);

    	exports.default = ColorPicker;

    	/***/ }),
    	/* 60 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var IconPicker = function (_Picker) {
    	  _inherits(IconPicker, _Picker);

    	  function IconPicker(select, icons) {
    	    _classCallCheck(this, IconPicker);

    	    var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

    	    _this.container.classList.add('ql-icon-picker');
    	    [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
    	      item.innerHTML = icons[item.getAttribute('data-value') || ''];
    	    });
    	    _this.defaultItem = _this.container.querySelector('.ql-selected');
    	    _this.selectItem(_this.defaultItem);
    	    return _this;
    	  }

    	  _createClass(IconPicker, [{
    	    key: 'selectItem',
    	    value: function selectItem(item, trigger) {
    	      _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
    	      item = item || this.defaultItem;
    	      this.label.innerHTML = item.innerHTML;
    	    }
    	  }]);

    	  return IconPicker;
    	}(_picker2.default);

    	exports.default = IconPicker;

    	/***/ }),
    	/* 61 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	var Tooltip = function () {
    	  function Tooltip(quill, boundsContainer) {
    	    var _this = this;

    	    _classCallCheck(this, Tooltip);

    	    this.quill = quill;
    	    this.boundsContainer = boundsContainer || document.body;
    	    this.root = quill.addContainer('ql-tooltip');
    	    this.root.innerHTML = this.constructor.TEMPLATE;
    	    if (this.quill.root === this.quill.scrollingContainer) {
    	      this.quill.root.addEventListener('scroll', function () {
    	        _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
    	      });
    	    }
    	    this.hide();
    	  }

    	  _createClass(Tooltip, [{
    	    key: 'hide',
    	    value: function hide() {
    	      this.root.classList.add('ql-hidden');
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position(reference) {
    	      var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
    	      // root.scrollTop should be 0 if scrollContainer !== root
    	      var top = reference.bottom + this.quill.root.scrollTop;
    	      this.root.style.left = left + 'px';
    	      this.root.style.top = top + 'px';
    	      this.root.classList.remove('ql-flip');
    	      var containerBounds = this.boundsContainer.getBoundingClientRect();
    	      var rootBounds = this.root.getBoundingClientRect();
    	      var shift = 0;
    	      if (rootBounds.right > containerBounds.right) {
    	        shift = containerBounds.right - rootBounds.right;
    	        this.root.style.left = left + shift + 'px';
    	      }
    	      if (rootBounds.left < containerBounds.left) {
    	        shift = containerBounds.left - rootBounds.left;
    	        this.root.style.left = left + shift + 'px';
    	      }
    	      if (rootBounds.bottom > containerBounds.bottom) {
    	        var height = rootBounds.bottom - rootBounds.top;
    	        var verticalShift = reference.bottom - reference.top + height;
    	        this.root.style.top = top - verticalShift + 'px';
    	        this.root.classList.add('ql-flip');
    	      }
    	      return shift;
    	    }
    	  }, {
    	    key: 'show',
    	    value: function show() {
    	      this.root.classList.remove('ql-editing');
    	      this.root.classList.remove('ql-hidden');
    	    }
    	  }]);

    	  return Tooltip;
    	}();

    	exports.default = Tooltip;

    	/***/ }),
    	/* 62 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _base = __webpack_require__(43);

    	var _base2 = _interopRequireDefault(_base);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	var _selection = __webpack_require__(15);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

    	var SnowTheme = function (_BaseTheme) {
    	  _inherits(SnowTheme, _BaseTheme);

    	  function SnowTheme(quill, options) {
    	    _classCallCheck(this, SnowTheme);

    	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
    	      options.modules.toolbar.container = TOOLBAR_CONFIG;
    	    }

    	    var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

    	    _this.quill.container.classList.add('ql-snow');
    	    return _this;
    	  }

    	  _createClass(SnowTheme, [{
    	    key: 'extendToolbar',
    	    value: function extendToolbar(toolbar) {
    	      toolbar.container.classList.add('ql-snow');
    	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
    	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
    	      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
    	      if (toolbar.container.querySelector('.ql-link')) {
    	        this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
    	          toolbar.handlers['link'].call(toolbar, !context.format.link);
    	        });
    	      }
    	    }
    	  }]);

    	  return SnowTheme;
    	}(_base2.default);

    	SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        link: function link(value) {
    	          if (value) {
    	            var range = this.quill.getSelection();
    	            if (range == null || range.length == 0) return;
    	            var preview = this.quill.getText(range);
    	            if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
    	              preview = 'mailto:' + preview;
    	            }
    	            var tooltip = this.quill.theme.tooltip;
    	            tooltip.edit('link', preview);
    	          } else {
    	            this.quill.format('link', false);
    	          }
    	        }
    	      }
    	    }
    	  }
    	});

    	var SnowTooltip = function (_BaseTooltip) {
    	  _inherits(SnowTooltip, _BaseTooltip);

    	  function SnowTooltip(quill, bounds) {
    	    _classCallCheck(this, SnowTooltip);

    	    var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

    	    _this2.preview = _this2.root.querySelector('a.ql-preview');
    	    return _this2;
    	  }

    	  _createClass(SnowTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this3 = this;

    	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
    	      this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
    	        if (_this3.root.classList.contains('ql-editing')) {
    	          _this3.save();
    	        } else {
    	          _this3.edit('link', _this3.preview.textContent);
    	        }
    	        event.preventDefault();
    	      });
    	      this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
    	        if (_this3.linkRange != null) {
    	          var range = _this3.linkRange;
    	          _this3.restoreFocus();
    	          _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
    	          delete _this3.linkRange;
    	        }
    	        event.preventDefault();
    	        _this3.hide();
    	      });
    	      this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
    	        if (range == null) return;
    	        if (range.length === 0 && source === _emitter2.default.sources.USER) {
    	          var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
    	              _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
    	              link = _quill$scroll$descend2[0],
    	              offset = _quill$scroll$descend2[1];

    	          if (link != null) {
    	            _this3.linkRange = new _selection.Range(range.index - offset, link.length());
    	            var preview = _link2.default.formats(link.domNode);
    	            _this3.preview.textContent = preview;
    	            _this3.preview.setAttribute('href', preview);
    	            _this3.show();
    	            _this3.position(_this3.quill.getBounds(_this3.linkRange));
    	            return;
    	          }
    	        } else {
    	          delete _this3.linkRange;
    	        }
    	        _this3.hide();
    	      });
    	    }
    	  }, {
    	    key: 'show',
    	    value: function show() {
    	      _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
    	      this.root.removeAttribute('data-mode');
    	    }
    	  }]);

    	  return SnowTooltip;
    	}(_base.BaseTooltip);

    	SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

    	exports.default = SnowTheme;

    	/***/ }),
    	/* 63 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _core = __webpack_require__(29);

    	var _core2 = _interopRequireDefault(_core);

    	var _align = __webpack_require__(36);

    	var _direction = __webpack_require__(38);

    	var _indent = __webpack_require__(64);

    	var _blockquote = __webpack_require__(65);

    	var _blockquote2 = _interopRequireDefault(_blockquote);

    	var _header = __webpack_require__(66);

    	var _header2 = _interopRequireDefault(_header);

    	var _list = __webpack_require__(67);

    	var _list2 = _interopRequireDefault(_list);

    	var _background = __webpack_require__(37);

    	var _color = __webpack_require__(26);

    	var _font = __webpack_require__(39);

    	var _size = __webpack_require__(40);

    	var _bold = __webpack_require__(56);

    	var _bold2 = _interopRequireDefault(_bold);

    	var _italic = __webpack_require__(68);

    	var _italic2 = _interopRequireDefault(_italic);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	var _script = __webpack_require__(69);

    	var _script2 = _interopRequireDefault(_script);

    	var _strike = __webpack_require__(70);

    	var _strike2 = _interopRequireDefault(_strike);

    	var _underline = __webpack_require__(71);

    	var _underline2 = _interopRequireDefault(_underline);

    	var _image = __webpack_require__(72);

    	var _image2 = _interopRequireDefault(_image);

    	var _video = __webpack_require__(73);

    	var _video2 = _interopRequireDefault(_video);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	var _formula = __webpack_require__(74);

    	var _formula2 = _interopRequireDefault(_formula);

    	var _syntax = __webpack_require__(75);

    	var _syntax2 = _interopRequireDefault(_syntax);

    	var _toolbar = __webpack_require__(57);

    	var _toolbar2 = _interopRequireDefault(_toolbar);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	var _picker = __webpack_require__(28);

    	var _picker2 = _interopRequireDefault(_picker);

    	var _colorPicker = __webpack_require__(59);

    	var _colorPicker2 = _interopRequireDefault(_colorPicker);

    	var _iconPicker = __webpack_require__(60);

    	var _iconPicker2 = _interopRequireDefault(_iconPicker);

    	var _tooltip = __webpack_require__(61);

    	var _tooltip2 = _interopRequireDefault(_tooltip);

    	var _bubble = __webpack_require__(108);

    	var _bubble2 = _interopRequireDefault(_bubble);

    	var _snow = __webpack_require__(62);

    	var _snow2 = _interopRequireDefault(_snow);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	_core2.default.register({
    	  'attributors/attribute/direction': _direction.DirectionAttribute,

    	  'attributors/class/align': _align.AlignClass,
    	  'attributors/class/background': _background.BackgroundClass,
    	  'attributors/class/color': _color.ColorClass,
    	  'attributors/class/direction': _direction.DirectionClass,
    	  'attributors/class/font': _font.FontClass,
    	  'attributors/class/size': _size.SizeClass,

    	  'attributors/style/align': _align.AlignStyle,
    	  'attributors/style/background': _background.BackgroundStyle,
    	  'attributors/style/color': _color.ColorStyle,
    	  'attributors/style/direction': _direction.DirectionStyle,
    	  'attributors/style/font': _font.FontStyle,
    	  'attributors/style/size': _size.SizeStyle
    	}, true);

    	_core2.default.register({
    	  'formats/align': _align.AlignClass,
    	  'formats/direction': _direction.DirectionClass,
    	  'formats/indent': _indent.IndentClass,

    	  'formats/background': _background.BackgroundStyle,
    	  'formats/color': _color.ColorStyle,
    	  'formats/font': _font.FontClass,
    	  'formats/size': _size.SizeClass,

    	  'formats/blockquote': _blockquote2.default,
    	  'formats/code-block': _code2.default,
    	  'formats/header': _header2.default,
    	  'formats/list': _list2.default,

    	  'formats/bold': _bold2.default,
    	  'formats/code': _code.Code,
    	  'formats/italic': _italic2.default,
    	  'formats/link': _link2.default,
    	  'formats/script': _script2.default,
    	  'formats/strike': _strike2.default,
    	  'formats/underline': _underline2.default,

    	  'formats/image': _image2.default,
    	  'formats/video': _video2.default,

    	  'formats/list/item': _list.ListItem,

    	  'modules/formula': _formula2.default,
    	  'modules/syntax': _syntax2.default,
    	  'modules/toolbar': _toolbar2.default,

    	  'themes/bubble': _bubble2.default,
    	  'themes/snow': _snow2.default,

    	  'ui/icons': _icons2.default,
    	  'ui/picker': _picker2.default,
    	  'ui/icon-picker': _iconPicker2.default,
    	  'ui/color-picker': _colorPicker2.default,
    	  'ui/tooltip': _tooltip2.default
    	}, true);

    	exports.default = _core2.default;

    	/***/ }),
    	/* 64 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.IndentClass = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var IdentAttributor = function (_Parchment$Attributor) {
    	  _inherits(IdentAttributor, _Parchment$Attributor);

    	  function IdentAttributor() {
    	    _classCallCheck(this, IdentAttributor);

    	    return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
    	  }

    	  _createClass(IdentAttributor, [{
    	    key: 'add',
    	    value: function add(node, value) {
    	      if (value === '+1' || value === '-1') {
    	        var indent = this.value(node) || 0;
    	        value = value === '+1' ? indent + 1 : indent - 1;
    	      }
    	      if (value === 0) {
    	        this.remove(node);
    	        return true;
    	      } else {
    	        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
    	      }
    	    }
    	  }, {
    	    key: 'canAdd',
    	    value: function canAdd(node, value) {
    	      return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(node) {
    	      return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
    	    }
    	  }]);

    	  return IdentAttributor;
    	}(_parchment2.default.Attributor.Class);

    	var IndentClass = new IdentAttributor('indent', 'ql-indent', {
    	  scope: _parchment2.default.Scope.BLOCK,
    	  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
    	});

    	exports.IndentClass = IndentClass;

    	/***/ }),
    	/* 65 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Blockquote = function (_Block) {
    	  _inherits(Blockquote, _Block);

    	  function Blockquote() {
    	    _classCallCheck(this, Blockquote);

    	    return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
    	  }

    	  return Blockquote;
    	}(_block2.default);

    	Blockquote.blotName = 'blockquote';
    	Blockquote.tagName = 'blockquote';

    	exports.default = Blockquote;

    	/***/ }),
    	/* 66 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Header = function (_Block) {
    	  _inherits(Header, _Block);

    	  function Header() {
    	    _classCallCheck(this, Header);

    	    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    	  }

    	  _createClass(Header, null, [{
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return this.tagName.indexOf(domNode.tagName) + 1;
    	    }
    	  }]);

    	  return Header;
    	}(_block2.default);

    	Header.blotName = 'header';
    	Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

    	exports.default = Header;

    	/***/ }),
    	/* 67 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.ListItem = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _block = __webpack_require__(4);

    	var _block2 = _interopRequireDefault(_block);

    	var _container = __webpack_require__(25);

    	var _container2 = _interopRequireDefault(_container);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ListItem = function (_Block) {
    	  _inherits(ListItem, _Block);

    	  function ListItem() {
    	    _classCallCheck(this, ListItem);

    	    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
    	  }

    	  _createClass(ListItem, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (name === List.blotName && !value) {
    	        this.replaceWith(_parchment2.default.create(this.statics.scope));
    	      } else {
    	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }, {
    	    key: 'remove',
    	    value: function remove() {
    	      if (this.prev == null && this.next == null) {
    	        this.parent.remove();
    	      } else {
    	        _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
    	      }
    	    }
    	  }, {
    	    key: 'replaceWith',
    	    value: function replaceWith(name, value) {
    	      this.parent.isolate(this.offset(this.parent), this.length());
    	      if (name === this.parent.statics.blotName) {
    	        this.parent.replaceWith(name, value);
    	        return this;
    	      } else {
    	        this.parent.unwrap();
    	        return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
    	    }
    	  }]);

    	  return ListItem;
    	}(_block2.default);

    	ListItem.blotName = 'list-item';
    	ListItem.tagName = 'LI';

    	var List = function (_Container) {
    	  _inherits(List, _Container);

    	  _createClass(List, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      var tagName = value === 'ordered' ? 'OL' : 'UL';
    	      var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
    	      if (value === 'checked' || value === 'unchecked') {
    	        node.setAttribute('data-checked', value === 'checked');
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      if (domNode.tagName === 'OL') return 'ordered';
    	      if (domNode.tagName === 'UL') {
    	        if (domNode.hasAttribute('data-checked')) {
    	          return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
    	        } else {
    	          return 'bullet';
    	        }
    	      }
    	      return undefined;
    	    }
    	  }]);

    	  function List(domNode) {
    	    _classCallCheck(this, List);

    	    var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

    	    var listEventHandler = function listEventHandler(e) {
    	      if (e.target.parentNode !== domNode) return;
    	      var format = _this2.statics.formats(domNode);
    	      var blot = _parchment2.default.find(e.target);
    	      if (format === 'checked') {
    	        blot.format('list', 'unchecked');
    	      } else if (format === 'unchecked') {
    	        blot.format('list', 'checked');
    	      }
    	    };

    	    domNode.addEventListener('touchstart', listEventHandler);
    	    domNode.addEventListener('mousedown', listEventHandler);
    	    return _this2;
    	  }

    	  _createClass(List, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (this.children.length > 0) {
    	        this.children.tail.format(name, value);
    	      }
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats() {
    	      // We don't inherit from FormatBlot
    	      return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
    	    }
    	  }, {
    	    key: 'insertBefore',
    	    value: function insertBefore(blot, ref) {
    	      if (blot instanceof ListItem) {
    	        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
    	      } else {
    	        var index = ref == null ? this.length() : ref.offset(this);
    	        var after = this.split(index);
    	        after.parent.insertBefore(blot, after);
    	      }
    	    }
    	  }, {
    	    key: 'optimize',
    	    value: function optimize(context) {
    	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
    	      var next = this.next;
    	      if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
    	        next.moveChildren(this);
    	        next.remove();
    	      }
    	    }
    	  }, {
    	    key: 'replace',
    	    value: function replace(target) {
    	      if (target.statics.blotName !== this.statics.blotName) {
    	        var item = _parchment2.default.create(this.statics.defaultChild);
    	        target.moveChildren(item);
    	        this.appendChild(item);
    	      }
    	      _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
    	    }
    	  }]);

    	  return List;
    	}(_container2.default);

    	List.blotName = 'list';
    	List.scope = _parchment2.default.Scope.BLOCK_BLOT;
    	List.tagName = ['OL', 'UL'];
    	List.defaultChild = 'list-item';
    	List.allowedChildren = [ListItem];

    	exports.ListItem = ListItem;
    	exports.default = List;

    	/***/ }),
    	/* 68 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _bold = __webpack_require__(56);

    	var _bold2 = _interopRequireDefault(_bold);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Italic = function (_Bold) {
    	  _inherits(Italic, _Bold);

    	  function Italic() {
    	    _classCallCheck(this, Italic);

    	    return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
    	  }

    	  return Italic;
    	}(_bold2.default);

    	Italic.blotName = 'italic';
    	Italic.tagName = ['EM', 'I'];

    	exports.default = Italic;

    	/***/ }),
    	/* 69 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Script = function (_Inline) {
    	  _inherits(Script, _Inline);

    	  function Script() {
    	    _classCallCheck(this, Script);

    	    return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
    	  }

    	  _createClass(Script, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      if (value === 'super') {
    	        return document.createElement('sup');
    	      } else if (value === 'sub') {
    	        return document.createElement('sub');
    	      } else {
    	        return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
    	      }
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      if (domNode.tagName === 'SUB') return 'sub';
    	      if (domNode.tagName === 'SUP') return 'super';
    	      return undefined;
    	    }
    	  }]);

    	  return Script;
    	}(_inline2.default);

    	Script.blotName = 'script';
    	Script.tagName = ['SUB', 'SUP'];

    	exports.default = Script;

    	/***/ }),
    	/* 70 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Strike = function (_Inline) {
    	  _inherits(Strike, _Inline);

    	  function Strike() {
    	    _classCallCheck(this, Strike);

    	    return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
    	  }

    	  return Strike;
    	}(_inline2.default);

    	Strike.blotName = 'strike';
    	Strike.tagName = 'S';

    	exports.default = Strike;

    	/***/ }),
    	/* 71 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _inline = __webpack_require__(6);

    	var _inline2 = _interopRequireDefault(_inline);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var Underline = function (_Inline) {
    	  _inherits(Underline, _Inline);

    	  function Underline() {
    	    _classCallCheck(this, Underline);

    	    return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
    	  }

    	  return Underline;
    	}(_inline2.default);

    	Underline.blotName = 'underline';
    	Underline.tagName = 'U';

    	exports.default = Underline;

    	/***/ }),
    	/* 72 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _link = __webpack_require__(27);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ATTRIBUTES = ['alt', 'height', 'width'];

    	var Image = function (_Parchment$Embed) {
    	  _inherits(Image, _Parchment$Embed);

    	  function Image() {
    	    _classCallCheck(this, Image);

    	    return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
    	  }

    	  _createClass(Image, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (ATTRIBUTES.indexOf(name) > -1) {
    	        if (value) {
    	          this.domNode.setAttribute(name, value);
    	        } else {
    	          this.domNode.removeAttribute(name);
    	        }
    	      } else {
    	        _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
    	      if (typeof value === 'string') {
    	        node.setAttribute('src', this.sanitize(value));
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return ATTRIBUTES.reduce(function (formats, attribute) {
    	        if (domNode.hasAttribute(attribute)) {
    	          formats[attribute] = domNode.getAttribute(attribute);
    	        }
    	        return formats;
    	      }, {});
    	    }
    	  }, {
    	    key: 'match',
    	    value: function match(url) {
    	      return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
    	      );
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('src');
    	    }
    	  }]);

    	  return Image;
    	}(_parchment2.default.Embed);

    	Image.blotName = 'image';
    	Image.tagName = 'IMG';

    	exports.default = Image;

    	/***/ }),
    	/* 73 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _block = __webpack_require__(4);

    	var _link = __webpack_require__(27);

    	var _link2 = _interopRequireDefault(_link);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var ATTRIBUTES = ['height', 'width'];

    	var Video = function (_BlockEmbed) {
    	  _inherits(Video, _BlockEmbed);

    	  function Video() {
    	    _classCallCheck(this, Video);

    	    return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
    	  }

    	  _createClass(Video, [{
    	    key: 'format',
    	    value: function format(name, value) {
    	      if (ATTRIBUTES.indexOf(name) > -1) {
    	        if (value) {
    	          this.domNode.setAttribute(name, value);
    	        } else {
    	          this.domNode.removeAttribute(name);
    	        }
    	      } else {
    	        _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
    	      }
    	    }
    	  }], [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
    	      node.setAttribute('frameborder', '0');
    	      node.setAttribute('allowfullscreen', true);
    	      node.setAttribute('src', this.sanitize(value));
    	      return node;
    	    }
    	  }, {
    	    key: 'formats',
    	    value: function formats(domNode) {
    	      return ATTRIBUTES.reduce(function (formats, attribute) {
    	        if (domNode.hasAttribute(attribute)) {
    	          formats[attribute] = domNode.getAttribute(attribute);
    	        }
    	        return formats;
    	      }, {});
    	    }
    	  }, {
    	    key: 'sanitize',
    	    value: function sanitize(url) {
    	      return _link2.default.sanitize(url);
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('src');
    	    }
    	  }]);

    	  return Video;
    	}(_block.BlockEmbed);

    	Video.blotName = 'video';
    	Video.className = 'ql-video';
    	Video.tagName = 'IFRAME';

    	exports.default = Video;

    	/***/ }),
    	/* 74 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.FormulaBlot = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _embed = __webpack_require__(35);

    	var _embed2 = _interopRequireDefault(_embed);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var FormulaBlot = function (_Embed) {
    	  _inherits(FormulaBlot, _Embed);

    	  function FormulaBlot() {
    	    _classCallCheck(this, FormulaBlot);

    	    return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
    	  }

    	  _createClass(FormulaBlot, null, [{
    	    key: 'create',
    	    value: function create(value) {
    	      var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
    	      if (typeof value === 'string') {
    	        window.katex.render(value, node, {
    	          throwOnError: false,
    	          errorColor: '#f00'
    	        });
    	        node.setAttribute('data-value', value);
    	      }
    	      return node;
    	    }
    	  }, {
    	    key: 'value',
    	    value: function value(domNode) {
    	      return domNode.getAttribute('data-value');
    	    }
    	  }]);

    	  return FormulaBlot;
    	}(_embed2.default);

    	FormulaBlot.blotName = 'formula';
    	FormulaBlot.className = 'ql-formula';
    	FormulaBlot.tagName = 'SPAN';

    	var Formula = function (_Module) {
    	  _inherits(Formula, _Module);

    	  _createClass(Formula, null, [{
    	    key: 'register',
    	    value: function register() {
    	      _quill2.default.register(FormulaBlot, true);
    	    }
    	  }]);

    	  function Formula() {
    	    _classCallCheck(this, Formula);

    	    var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

    	    if (window.katex == null) {
    	      throw new Error('Formula module requires KaTeX.');
    	    }
    	    return _this2;
    	  }

    	  return Formula;
    	}(_module2.default);

    	exports.FormulaBlot = FormulaBlot;
    	exports.default = Formula;

    	/***/ }),
    	/* 75 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.CodeToken = exports.CodeBlock = undefined;

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _parchment = __webpack_require__(0);

    	var _parchment2 = _interopRequireDefault(_parchment);

    	var _quill = __webpack_require__(5);

    	var _quill2 = _interopRequireDefault(_quill);

    	var _module = __webpack_require__(9);

    	var _module2 = _interopRequireDefault(_module);

    	var _code = __webpack_require__(13);

    	var _code2 = _interopRequireDefault(_code);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var SyntaxCodeBlock = function (_CodeBlock) {
    	  _inherits(SyntaxCodeBlock, _CodeBlock);

    	  function SyntaxCodeBlock() {
    	    _classCallCheck(this, SyntaxCodeBlock);

    	    return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
    	  }

    	  _createClass(SyntaxCodeBlock, [{
    	    key: 'replaceWith',
    	    value: function replaceWith(block) {
    	      this.domNode.textContent = this.domNode.textContent;
    	      this.attach();
    	      _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
    	    }
    	  }, {
    	    key: 'highlight',
    	    value: function highlight(_highlight) {
    	      var text = this.domNode.textContent;
    	      if (this.cachedText !== text) {
    	        if (text.trim().length > 0 || this.cachedText == null) {
    	          this.domNode.innerHTML = _highlight(text);
    	          this.domNode.normalize();
    	          this.attach();
    	        }
    	        this.cachedText = text;
    	      }
    	    }
    	  }]);

    	  return SyntaxCodeBlock;
    	}(_code2.default);

    	SyntaxCodeBlock.className = 'ql-syntax';

    	var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
    	  scope: _parchment2.default.Scope.INLINE
    	});

    	var Syntax = function (_Module) {
    	  _inherits(Syntax, _Module);

    	  _createClass(Syntax, null, [{
    	    key: 'register',
    	    value: function register() {
    	      _quill2.default.register(CodeToken, true);
    	      _quill2.default.register(SyntaxCodeBlock, true);
    	    }
    	  }]);

    	  function Syntax(quill, options) {
    	    _classCallCheck(this, Syntax);

    	    var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

    	    if (typeof _this2.options.highlight !== 'function') {
    	      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
    	    }
    	    var timer = null;
    	    _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
    	      clearTimeout(timer);
    	      timer = setTimeout(function () {
    	        _this2.highlight();
    	        timer = null;
    	      }, _this2.options.interval);
    	    });
    	    _this2.highlight();
    	    return _this2;
    	  }

    	  _createClass(Syntax, [{
    	    key: 'highlight',
    	    value: function highlight() {
    	      var _this3 = this;

    	      if (this.quill.selection.composing) return;
    	      this.quill.update(_quill2.default.sources.USER);
    	      var range = this.quill.getSelection();
    	      this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
    	        code.highlight(_this3.options.highlight);
    	      });
    	      this.quill.update(_quill2.default.sources.SILENT);
    	      if (range != null) {
    	        this.quill.setSelection(range, _quill2.default.sources.SILENT);
    	      }
    	    }
    	  }]);

    	  return Syntax;
    	}(_module2.default);

    	Syntax.DEFAULTS = {
    	  highlight: function () {
    	    if (window.hljs == null) return null;
    	    return function (text) {
    	      var result = window.hljs.highlightAuto(text);
    	      return result.value;
    	    };
    	  }(),
    	  interval: 1000
    	};

    	exports.CodeBlock = SyntaxCodeBlock;
    	exports.CodeToken = CodeToken;
    	exports.default = Syntax;

    	/***/ }),
    	/* 76 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 77 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 78 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 79 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

    	/***/ }),
    	/* 80 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

    	/***/ }),
    	/* 81 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

    	/***/ }),
    	/* 82 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

    	/***/ }),
    	/* 83 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

    	/***/ }),
    	/* 84 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

    	/***/ }),
    	/* 85 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

    	/***/ }),
    	/* 86 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

    	/***/ }),
    	/* 87 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 88 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 89 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

    	/***/ }),
    	/* 90 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

    	/***/ }),
    	/* 91 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

    	/***/ }),
    	/* 92 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

    	/***/ }),
    	/* 93 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

    	/***/ }),
    	/* 94 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

    	/***/ }),
    	/* 95 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

    	/***/ }),
    	/* 96 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

    	/***/ }),
    	/* 97 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

    	/***/ }),
    	/* 98 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

    	/***/ }),
    	/* 99 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

    	/***/ }),
    	/* 100 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

    	/***/ }),
    	/* 101 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

    	/***/ }),
    	/* 102 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

    	/***/ }),
    	/* 103 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

    	/***/ }),
    	/* 104 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

    	/***/ }),
    	/* 105 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

    	/***/ }),
    	/* 106 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

    	/***/ }),
    	/* 107 */
    	/***/ (function(module, exports) {

    	module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

    	/***/ }),
    	/* 108 */
    	/***/ (function(module, exports, __webpack_require__) {


    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports.default = exports.BubbleTooltip = undefined;

    	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

    	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    	var _extend = __webpack_require__(3);

    	var _extend2 = _interopRequireDefault(_extend);

    	var _emitter = __webpack_require__(8);

    	var _emitter2 = _interopRequireDefault(_emitter);

    	var _base = __webpack_require__(43);

    	var _base2 = _interopRequireDefault(_base);

    	var _selection = __webpack_require__(15);

    	var _icons = __webpack_require__(41);

    	var _icons2 = _interopRequireDefault(_icons);

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    	var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

    	var BubbleTheme = function (_BaseTheme) {
    	  _inherits(BubbleTheme, _BaseTheme);

    	  function BubbleTheme(quill, options) {
    	    _classCallCheck(this, BubbleTheme);

    	    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
    	      options.modules.toolbar.container = TOOLBAR_CONFIG;
    	    }

    	    var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

    	    _this.quill.container.classList.add('ql-bubble');
    	    return _this;
    	  }

    	  _createClass(BubbleTheme, [{
    	    key: 'extendToolbar',
    	    value: function extendToolbar(toolbar) {
    	      this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
    	      this.tooltip.root.appendChild(toolbar.container);
    	      this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
    	      this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
    	    }
    	  }]);

    	  return BubbleTheme;
    	}(_base2.default);

    	BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    	  modules: {
    	    toolbar: {
    	      handlers: {
    	        link: function link(value) {
    	          if (!value) {
    	            this.quill.format('link', false);
    	          } else {
    	            this.quill.theme.tooltip.edit();
    	          }
    	        }
    	      }
    	    }
    	  }
    	});

    	var BubbleTooltip = function (_BaseTooltip) {
    	  _inherits(BubbleTooltip, _BaseTooltip);

    	  function BubbleTooltip(quill, bounds) {
    	    _classCallCheck(this, BubbleTooltip);

    	    var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

    	    _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
    	      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
    	      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
    	        _this2.show();
    	        // Lock our width so we will expand beyond our offsetParent boundaries
    	        _this2.root.style.left = '0px';
    	        _this2.root.style.width = '';
    	        _this2.root.style.width = _this2.root.offsetWidth + 'px';
    	        var lines = _this2.quill.getLines(range.index, range.length);
    	        if (lines.length === 1) {
    	          _this2.position(_this2.quill.getBounds(range));
    	        } else {
    	          var lastLine = lines[lines.length - 1];
    	          var index = _this2.quill.getIndex(lastLine);
    	          var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
    	          var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
    	          _this2.position(_bounds);
    	        }
    	      } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
    	        _this2.hide();
    	      }
    	    });
    	    return _this2;
    	  }

    	  _createClass(BubbleTooltip, [{
    	    key: 'listen',
    	    value: function listen() {
    	      var _this3 = this;

    	      _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
    	      this.root.querySelector('.ql-close').addEventListener('click', function () {
    	        _this3.root.classList.remove('ql-editing');
    	      });
    	      this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
    	        // Let selection be restored by toolbar handlers before repositioning
    	        setTimeout(function () {
    	          if (_this3.root.classList.contains('ql-hidden')) return;
    	          var range = _this3.quill.getSelection();
    	          if (range != null) {
    	            _this3.position(_this3.quill.getBounds(range));
    	          }
    	        }, 1);
    	      });
    	    }
    	  }, {
    	    key: 'cancel',
    	    value: function cancel() {
    	      this.show();
    	    }
    	  }, {
    	    key: 'position',
    	    value: function position(reference) {
    	      var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
    	      var arrow = this.root.querySelector('.ql-tooltip-arrow');
    	      arrow.style.marginLeft = '';
    	      if (shift === 0) return shift;
    	      arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
    	    }
    	  }]);

    	  return BubbleTooltip;
    	}(_base.BaseTooltip);

    	BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

    	exports.BubbleTooltip = BubbleTooltip;
    	exports.default = BubbleTheme;

    	/***/ }),
    	/* 109 */
    	/***/ (function(module, exports, __webpack_require__) {

    	module.exports = __webpack_require__(63);


    	/***/ })
    	/******/ ])["default"];
    	});
    	});

    	var Quill = unwrapExports(quill);

    	function quill$1(node, options) {
    	  const quill = new Quill(node, {
    	    modules: {
    	      toolbar: [
    	        [{ header: [1, 2, 3, false] }],
    	        ["bold", "italic", "underline", "strike"],
    	        ["link", "code-block"]
    	      ]
    	    },
    	    placeholder: "Type something...",
    	    theme: "snow", // or 'bubble'
    	    ...options
    	  });
    	  const container = node.getElementsByClassName("ql-editor")[0];

    	  quill.on("text-change", function(delta, oldDelta, source) {
    	    node.dispatchEvent(
    	      new CustomEvent("text-change", {
    	        detail: {
    	          html: container.innerHTML,
    	          text: quill.getText()
    	        }
    	      })
    	    );
    	  });
    	}

    	exports.quill = quill$1;

    	Object.defineProperty(exports, '__esModule', { value: true });

    })));
    });

    var index_umd$1 = unwrapExports(index_umd);

    /* src/Editor.svelte generated by Svelte v3.24.1 */

    const { document: document_1 } = globals;
    const file$5 = "src/Editor.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[48] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[51] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[54] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[57] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[60] = list[i];
    	return child_ctx;
    }

    function get_each_context_5$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[63] = list[i];
    	return child_ctx;
    }

    // (201:16) {#each editMentors as editMentor}
    function create_each_block_5$1(ctx) {
    	let option;
    	let t_value = /*editMentor*/ ctx[63].text + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*editMentor*/ ctx[63];
    			option.value = option.__value;
    			add_location(option, file$5, 201, 18, 5885);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$1.name,
    		type: "each",
    		source: "(201:16) {#each editMentors as editMentor}",
    		ctx
    	});

    	return block;
    }

    // (207:10) {#if mentorAvailable === 'Available'}
    function create_if_block_1$4(ctx) {
    	let label;
    	let span;
    	let t1;
    	let div;
    	let select;
    	let mounted;
    	let dispose;
    	let each_value_4 = editPrices;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			span = element("span");
    			span.textContent = "Price in AR tokens per 30 mins";
    			t1 = space();
    			div = element("div");
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(span, "class", "text-gray-900");
    			add_location(span, file$5, 208, 14, 6140);
    			attr_dev(select, "class", "mt-1 form-select block w-full text-gray-900 shadow\n                    bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                    border-none");
    			attr_dev(select, "name", "pricing");
    			if (/*priceEdited*/ ctx[7] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[25].call(select));
    			add_location(select, file$5, 210, 16, 6275);
    			attr_dev(div, "class", "sm:flex lg:block lg:mx-0");
    			add_location(div, file$5, 209, 14, 6220);
    			attr_dev(label, "class", "block mt-4");
    			attr_dev(label, "for", "pricing");
    			add_location(label, file$5, 207, 12, 6085);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, span);
    			append_dev(label, t1);
    			append_dev(label, div);
    			append_dev(div, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*priceEdited*/ ctx[7]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[25]),
    					listen_dev(select, "blur", /*handleEditedPrice*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*editPrices*/ 0) {
    				each_value_4 = editPrices;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}

    			if (dirty[0] & /*priceEdited*/ 128) {
    				select_option(select, /*priceEdited*/ ctx[7]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(207:10) {#if mentorAvailable === 'Available'}",
    		ctx
    	});

    	return block;
    }

    // (218:18) {#each editPrices as editPrice}
    function create_each_block_4$1(ctx) {
    	let option;
    	let t_value = /*editPrice*/ ctx[60].text + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*editPrice*/ ctx[60];
    			option.value = option.__value;
    			add_location(option, file$5, 218, 20, 6657);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(218:18) {#each editPrices as editPrice}",
    		ctx
    	});

    	return block;
    }

    // (237:16) {#each editSubjects as editSubject}
    function create_each_block_3$1(ctx) {
    	let option;
    	let t_value = /*editSubject*/ ctx[57].text + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*editSubject*/ ctx[57];
    			option.value = option.__value;
    			add_location(option, file$5, 237, 18, 7421);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(237:16) {#each editSubjects as editSubject}",
    		ctx
    	});

    	return block;
    }

    // (253:16) {#each editLanguages as editLanguage}
    function create_each_block_2$1(ctx) {
    	let option;
    	let t_value = /*editLanguage*/ ctx[54].text + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*editLanguage*/ ctx[54];
    			option.value = option.__value;
    			add_location(option, file$5, 253, 18, 8129);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(253:16) {#each editLanguages as editLanguage}",
    		ctx
    	});

    	return block;
    }

    // (269:16) {#each editBadges as editBadge}
    function create_each_block_1$2(ctx) {
    	let option;
    	let t_value = /*editBadge*/ ctx[51].text + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*editBadge*/ ctx[51];
    			option.value = option.__value;
    			add_location(option, file$5, 269, 18, 8818);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(269:16) {#each editBadges as editBadge}",
    		ctx
    	});

    	return block;
    }

    // (285:16) {#each editDurations as editDuration}
    function create_each_block$2(ctx) {
    	let option;
    	let t_value = /*editDuration*/ ctx[48].text + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*editDuration*/ ctx[48];
    			option.value = option.__value;
    			add_location(option, file$5, 285, 18, 9522);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(285:16) {#each editDurations as editDuration}",
    		ctx
    	});

    	return block;
    }

    // (335:8) {#if enablePreview}
    function create_if_block$4(ctx) {
    	let div;
    	let raw_value = /*syllabusContent*/ ctx[1].html + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "prose");
    			add_location(div, file$5, 335, 10, 11155);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*syllabusContent*/ 2 && raw_value !== (raw_value = /*syllabusContent*/ ctx[1].html + "")) div.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(335:8) {#if enablePreview}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let link;
    	let t0;
    	let div17;
    	let form;
    	let div16;
    	let h1;
    	let t2;
    	let div7;
    	let div1;
    	let label0;
    	let span0;
    	let t4;
    	let input0;
    	let t5;
    	let label1;
    	let span1;
    	let t7;
    	let input1;
    	let t8;
    	let label2;
    	let span2;
    	let t10;
    	let div0;
    	let select0;
    	let t11;
    	let t12;
    	let div6;
    	let label3;
    	let span3;
    	let t14;
    	let div2;
    	let select1;
    	let t15;
    	let label4;
    	let span4;
    	let t17;
    	let div3;
    	let select2;
    	let t18;
    	let label5;
    	let span5;
    	let t20;
    	let div4;
    	let select3;
    	let t21;
    	let label6;
    	let span6;
    	let t23;
    	let div5;
    	let select4;
    	let t24;
    	let div9;
    	let label7;
    	let div8;
    	let t26;
    	let input2;
    	let t27;
    	let img;
    	let img_src_value;
    	let t28;
    	let div10;
    	let span7;
    	let t30;
    	let div12;
    	let div11;
    	let quill_action;
    	let t31;
    	let br;
    	let t32;
    	let div13;
    	let label8;
    	let input3;
    	let t33;
    	let span8;
    	let t35;
    	let t36;
    	let div15;
    	let button;
    	let t38;
    	let div14;
    	let mounted;
    	let dispose;
    	let each_value_5 = editMentors;
    	validate_each_argument(each_value_5);
    	let each_blocks_4 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_4[i] = create_each_block_5$1(get_each_context_5$1(ctx, each_value_5, i));
    	}

    	let if_block0 = /*mentorAvailable*/ ctx[10] === "Available" && create_if_block_1$4(ctx);
    	let each_value_3 = editSubjects;
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	let each_value_2 = editLanguages;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	let each_value_1 = editBadges;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = editDurations;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	let if_block1 = /*enablePreview*/ ctx[0] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div17 = element("div");
    			form = element("form");
    			div16 = element("div");
    			h1 = element("h1");
    			h1.textContent = "List Your Syllabus";
    			t2 = space();
    			div7 = element("div");
    			div1 = element("div");
    			label0 = element("label");
    			span0 = element("span");
    			span0.textContent = "Title";
    			t4 = space();
    			input0 = element("input");
    			t5 = space();
    			label1 = element("label");
    			span1 = element("span");
    			span1.textContent = "Subtitle";
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			label2 = element("label");
    			span2 = element("span");
    			span2.textContent = "Mentorship";
    			t10 = space();
    			div0 = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			t11 = space();
    			if (if_block0) if_block0.c();
    			t12 = space();
    			div6 = element("div");
    			label3 = element("label");
    			span3 = element("span");
    			span3.textContent = "Subject";
    			t14 = space();
    			div2 = element("div");
    			select1 = element("select");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t15 = space();
    			label4 = element("label");
    			span4 = element("span");
    			span4.textContent = "Language";
    			t17 = space();
    			div3 = element("div");
    			select2 = element("select");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t18 = space();
    			label5 = element("label");
    			span5 = element("span");
    			span5.textContent = "Badge";
    			t20 = space();
    			div4 = element("div");
    			select3 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t21 = space();
    			label6 = element("label");
    			span6 = element("span");
    			span6.textContent = "Duration";
    			t23 = space();
    			div5 = element("div");
    			select4 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t24 = space();
    			div9 = element("div");
    			label7 = element("label");
    			div8 = element("div");
    			div8.textContent = "Upload Cover Image";
    			t26 = space();
    			input2 = element("input");
    			t27 = space();
    			img = element("img");
    			t28 = space();
    			div10 = element("div");
    			span7 = element("span");
    			span7.textContent = "Rich Text Editor";
    			t30 = space();
    			div12 = element("div");
    			div11 = element("div");
    			t31 = space();
    			br = element("br");
    			t32 = space();
    			div13 = element("div");
    			label8 = element("label");
    			input3 = element("input");
    			t33 = space();
    			span8 = element("span");
    			span8.textContent = "Enable Preview HTML";
    			t35 = space();
    			if (if_block1) if_block1.c();
    			t36 = space();
    			div15 = element("div");
    			button = element("button");
    			button.textContent = "Publish";
    			t38 = space();
    			div14 = element("div");
    			div14.textContent = "PST Holders fee included";
    			attr_dev(link, "href", "//cdn.quilljs.com/1.3.6/quill.snow.css");
    			attr_dev(link, "rel", "stylesheet");
    			add_location(link, file$5, 160, 2, 4081);
    			attr_dev(h1, "class", "content-center text-bold text-2xl w-full");
    			add_location(h1, file$5, 165, 6, 4311);
    			attr_dev(span0, "class", "text-gray-900");
    			add_location(span0, file$5, 171, 12, 4527);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "name", "title");
    			attr_dev(input0, "class", "form-input mt-1 block w-full text-gray-900 shadow\n                bg-gray-400 hover:border-gray-200 focus:bg-gray-300 border-none");
    			input0.required = true;
    			add_location(input0, file$5, 172, 12, 4580);
    			attr_dev(label0, "class", "block");
    			add_location(label0, file$5, 170, 10, 4493);
    			attr_dev(span1, "class", "text-gray-900");
    			add_location(span1, file$5, 181, 12, 4951);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "name", "subtitle");
    			attr_dev(input1, "class", "form-input mt-1 block w-full text-gray-900 shadow\n                bg-gray-400 hover:border-gray-200 focus:bg-gray-300 border-none");
    			input1.required = true;
    			add_location(input1, file$5, 182, 12, 5007);
    			attr_dev(label1, "class", "block mt-4");
    			add_location(label1, file$5, 180, 10, 4912);
    			attr_dev(span2, "class", "text-gray-900");
    			add_location(span2, file$5, 191, 12, 5401);
    			attr_dev(select0, "class", "mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none");
    			attr_dev(select0, "name", "mentorship");
    			if (/*mentorEdited*/ ctx[6] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[24].call(select0));
    			add_location(select0, file$5, 193, 14, 5512);
    			attr_dev(div0, "class", "sm:flex lg:block lg:mx-0");
    			add_location(div0, file$5, 192, 12, 5459);
    			attr_dev(label2, "class", "block mt-4");
    			attr_dev(label2, "for", "mentorship");
    			add_location(label2, file$5, 190, 10, 5345);
    			attr_dev(div1, "class", "w-1/2 px-6");
    			add_location(div1, file$5, 169, 8, 4458);
    			attr_dev(span3, "class", "text-gray-900");
    			add_location(span3, file$5, 227, 12, 6925);
    			attr_dev(select1, "class", "mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none mr-2");
    			attr_dev(select1, "name", "subject");
    			if (/*subjectEdited*/ ctx[2] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[26].call(select1));
    			add_location(select1, file$5, 229, 14, 7042);
    			attr_dev(div2, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div2, file$5, 228, 12, 6980);
    			attr_dev(label3, "class", "block");
    			attr_dev(label3, "for", "subject");
    			add_location(label3, file$5, 226, 10, 6877);
    			attr_dev(span4, "class", "text-gray-900");
    			add_location(span4, file$5, 243, 12, 7627);
    			attr_dev(select2, "class", "mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none mr-2");
    			attr_dev(select2, "name", "language");
    			if (/*languageEdited*/ ctx[3] === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[27].call(select2));
    			add_location(select2, file$5, 245, 14, 7745);
    			attr_dev(div3, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div3, file$5, 244, 12, 7683);
    			attr_dev(label4, "class", "block mt-4");
    			attr_dev(label4, "for", "language");
    			add_location(label4, file$5, 242, 10, 7573);
    			attr_dev(span5, "class", "text-gray-900");
    			add_location(span5, file$5, 259, 12, 8334);
    			attr_dev(select3, "class", "mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none mr-2");
    			attr_dev(select3, "name", "badge");
    			if (/*badgeEdited*/ ctx[4] === void 0) add_render_callback(() => /*select3_change_handler*/ ctx[28].call(select3));
    			add_location(select3, file$5, 261, 14, 8449);
    			attr_dev(div4, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div4, file$5, 260, 12, 8387);
    			attr_dev(label5, "class", "block mt-4");
    			attr_dev(label5, "for", "badge");
    			add_location(label5, file$5, 258, 10, 8283);
    			attr_dev(span6, "class", "text-gray-900");
    			add_location(span6, file$5, 275, 12, 9020);
    			attr_dev(select4, "class", "mt-1 form-select block w-full text-gray-900 shadow\n                  bg-gray-400 hover:border-gray-200 focus:bg-gray-300\n                  border-none mr-2");
    			attr_dev(select4, "name", "duration");
    			if (/*durationEdited*/ ctx[5] === void 0) add_render_callback(() => /*select4_change_handler*/ ctx[29].call(select4));
    			add_location(select4, file$5, 277, 14, 9138);
    			attr_dev(div5, "class", "sm:flex sm:-mx-2 lg:block lg:mx-0");
    			add_location(div5, file$5, 276, 12, 9076);
    			attr_dev(label6, "class", "block mt-4");
    			attr_dev(label6, "for", "duration");
    			add_location(label6, file$5, 274, 10, 8966);
    			attr_dev(div6, "class", "w-1/2 px-6");
    			add_location(div6, file$5, 225, 8, 6842);
    			attr_dev(div7, "class", "mt-4 flex flex-wrap -mx-6");
    			add_location(div7, file$5, 168, 6, 4410);
    			attr_dev(div8, "class", "ml-3 text-base");
    			add_location(div8, file$5, 296, 10, 9882);
    			attr_dev(input2, "type", "file");
    			attr_dev(input2, "accept", "image/*");
    			attr_dev(input2, "name", "imageUrl");
    			attr_dev(input2, "class", "hidden");
    			input2.required = true;
    			add_location(input2, file$5, 297, 10, 9945);
    			attr_dev(img, "class", "ml-3 text-base");
    			if (img.src !== (img_src_value = "")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "aria-label", "Image preview");
    			attr_dev(img, "height", "200");
    			attr_dev(img, "alt", "Image preview...");
    			add_location(img, file$5, 304, 10, 10130);
    			attr_dev(label7, "class", "block w-full mt-4 py-1 rounded shadow bg-gray-400 text-gray-900\n            hover:bg-gray-500 sm:mt-0 sm:text-sm");
    			add_location(label7, file$5, 293, 8, 9733);
    			attr_dev(div9, "class", "block mt-6");
    			add_location(div9, file$5, 292, 6, 9700);
    			attr_dev(span7, "class", "text-gray-900");
    			add_location(span7, file$5, 313, 8, 10360);
    			attr_dev(div10, "class", "block mt-4");
    			add_location(div10, file$5, 312, 6, 10327);
    			attr_dev(div11, "class", "editor svelte-1l56j6j");
    			add_location(div11, file$5, 318, 8, 10583);
    			add_location(br, file$5, 322, 8, 10717);
    			attr_dev(div12, "class", "mt-2 block w-full text-2xl text-gray-900 shadow bg-gray-400\n          hover:border-gray-200 focus:bg-gray-300 border-none");
    			add_location(div12, file$5, 315, 6, 10431);
    			attr_dev(input3, "class", "mt-3 form-checkbox h-5 w-5 block text-gray-900 bg-gray-400\n              hover:border-gray-200 focus:bg-gray-300 border-none");
    			attr_dev(input3, "type", "checkbox");
    			attr_dev(input3, "name", "preview");
    			add_location(input3, file$5, 326, 10, 10788);
    			attr_dev(span8, "class", "ml-2 mt-3");
    			add_location(span8, file$5, 332, 10, 11049);
    			attr_dev(label8, "class", "flex");
    			add_location(label8, file$5, 325, 8, 10757);
    			add_location(div13, file$5, 324, 6, 10743);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "aria-label", "Publish");
    			attr_dev(button, "class", "block w-full sm:w-auto sm:inline-block bg-blue-700\n            hover:bg-blue-600 font-semibold text-white px-6 py-2 rounded-lg");
    			add_location(button, file$5, 341, 8, 11312);
    			add_location(div14, file$5, 348, 8, 11565);
    			attr_dev(div15, "class", "mt-4 py-4 sm:text-right");
    			add_location(div15, file$5, 340, 6, 11266);
    			attr_dev(div16, "class", "max-w-2xl mx-auto");
    			add_location(div16, file$5, 164, 4, 4273);
    			add_location(form, file$5, 163, 2, 4220);
    			attr_dev(div17, "class", "py-6 antialiased text-gray-900 px-6");
    			add_location(div17, file$5, 162, 0, 4168);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document_1.head, link);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div17, anchor);
    			append_dev(div17, form);
    			append_dev(form, div16);
    			append_dev(div16, h1);
    			append_dev(div16, t2);
    			append_dev(div16, div7);
    			append_dev(div7, div1);
    			append_dev(div1, label0);
    			append_dev(label0, span0);
    			append_dev(label0, t4);
    			append_dev(label0, input0);
    			append_dev(div1, t5);
    			append_dev(div1, label1);
    			append_dev(label1, span1);
    			append_dev(label1, t7);
    			append_dev(label1, input1);
    			append_dev(div1, t8);
    			append_dev(div1, label2);
    			append_dev(label2, span2);
    			append_dev(label2, t10);
    			append_dev(label2, div0);
    			append_dev(div0, select0);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].m(select0, null);
    			}

    			select_option(select0, /*mentorEdited*/ ctx[6]);
    			append_dev(div1, t11);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div7, t12);
    			append_dev(div7, div6);
    			append_dev(div6, label3);
    			append_dev(label3, span3);
    			append_dev(label3, t14);
    			append_dev(label3, div2);
    			append_dev(div2, select1);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(select1, null);
    			}

    			select_option(select1, /*subjectEdited*/ ctx[2]);
    			append_dev(div6, t15);
    			append_dev(div6, label4);
    			append_dev(label4, span4);
    			append_dev(label4, t17);
    			append_dev(label4, div3);
    			append_dev(div3, select2);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select2, null);
    			}

    			select_option(select2, /*languageEdited*/ ctx[3]);
    			append_dev(div6, t18);
    			append_dev(div6, label5);
    			append_dev(label5, span5);
    			append_dev(label5, t20);
    			append_dev(label5, div4);
    			append_dev(div4, select3);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select3, null);
    			}

    			select_option(select3, /*badgeEdited*/ ctx[4]);
    			append_dev(div6, t21);
    			append_dev(div6, label6);
    			append_dev(label6, span6);
    			append_dev(label6, t23);
    			append_dev(label6, div5);
    			append_dev(div5, select4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select4, null);
    			}

    			select_option(select4, /*durationEdited*/ ctx[5]);
    			append_dev(div16, t24);
    			append_dev(div16, div9);
    			append_dev(div9, label7);
    			append_dev(label7, div8);
    			append_dev(label7, t26);
    			append_dev(label7, input2);
    			append_dev(label7, t27);
    			append_dev(label7, img);
    			append_dev(div16, t28);
    			append_dev(div16, div10);
    			append_dev(div10, span7);
    			append_dev(div16, t30);
    			append_dev(div16, div12);
    			append_dev(div12, div11);
    			append_dev(div12, t31);
    			append_dev(div12, br);
    			append_dev(div16, t32);
    			append_dev(div16, div13);
    			append_dev(div13, label8);
    			append_dev(label8, input3);
    			input3.checked = /*enablePreview*/ ctx[0];
    			append_dev(label8, t33);
    			append_dev(label8, span8);
    			append_dev(div13, t35);
    			if (if_block1) if_block1.m(div13, null);
    			append_dev(div16, t36);
    			append_dev(div16, div15);
    			append_dev(div15, button);
    			append_dev(div15, t38);
    			append_dev(div15, div14);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input_handler*/ ctx[22], false, false, false),
    					listen_dev(input1, "input", /*input_handler_1*/ ctx[23], false, false, false),
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[24]),
    					listen_dev(select0, "blur", /*handleEditedMentor*/ ctx[16], false, false, false),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[26]),
    					listen_dev(select1, "blur", /*handleEditedSubject*/ ctx[12], false, false, false),
    					listen_dev(select2, "change", /*select2_change_handler*/ ctx[27]),
    					listen_dev(select2, "blur", /*handleEditedLanguage*/ ctx[13], false, false, false),
    					listen_dev(select3, "change", /*select3_change_handler*/ ctx[28]),
    					listen_dev(select3, "blur", /*handleEditedBadge*/ ctx[14], false, false, false),
    					listen_dev(select4, "change", /*select4_change_handler*/ ctx[29]),
    					listen_dev(select4, "blur", /*handleEditedDuration*/ ctx[15], false, false, false),
    					listen_dev(input2, "change", /*previewFile*/ ctx[18], false, false, false),
    					action_destroyer(quill_action = index_umd$1.quill.call(null, div11, /*options*/ ctx[11])),
    					listen_dev(div11, "text-change", /*text_change_handler*/ ctx[30], false, false, false),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[31]),
    					listen_dev(form, "submit", prevent_default(/*submitSyllabus*/ ctx[19]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*editMentors*/ 0) {
    				each_value_5 = editMentors;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$1(ctx, each_value_5, i);

    					if (each_blocks_4[i]) {
    						each_blocks_4[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_4[i] = create_each_block_5$1(child_ctx);
    						each_blocks_4[i].c();
    						each_blocks_4[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_4.length; i += 1) {
    					each_blocks_4[i].d(1);
    				}

    				each_blocks_4.length = each_value_5.length;
    			}

    			if (dirty[0] & /*mentorEdited*/ 64) {
    				select_option(select0, /*mentorEdited*/ ctx[6]);
    			}

    			if (/*mentorAvailable*/ ctx[10] === "Available") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$4(ctx);
    					if_block0.c();
    					if_block0.m(div1, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*editSubjects*/ 0) {
    				each_value_3 = editSubjects;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3$1(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty[0] & /*subjectEdited*/ 4) {
    				select_option(select1, /*subjectEdited*/ ctx[2]);
    			}

    			if (dirty & /*editLanguages*/ 0) {
    				each_value_2 = editLanguages;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$1(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty[0] & /*languageEdited*/ 8) {
    				select_option(select2, /*languageEdited*/ ctx[3]);
    			}

    			if (dirty & /*editBadges*/ 0) {
    				each_value_1 = editBadges;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select3, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*badgeEdited*/ 16) {
    				select_option(select3, /*badgeEdited*/ ctx[4]);
    			}

    			if (dirty & /*editDurations*/ 0) {
    				each_value = editDurations;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*durationEdited*/ 32) {
    				select_option(select4, /*durationEdited*/ ctx[5]);
    			}

    			if (dirty[0] & /*enablePreview*/ 1) {
    				input3.checked = /*enablePreview*/ ctx[0];
    			}

    			if (/*enablePreview*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$4(ctx);
    					if_block1.c();
    					if_block1.m(div13, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div17);
    			destroy_each(each_blocks_4, detaching);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { wallet } = $$props;
    	let { address } = $$props;
    	let lengthToAdd = 0;
    	let enablePreview = false;

    	let options = {
    		modules: {
    			toolbar: [
    				[{ header: [1, 2, 3, 4, 5, 6] }],
    				["bold", "italic", "underline", "strike"],
    				["blockquote", "code-block", "link", "image", "video"],
    				[{ list: "ordered" }, { list: "bullet" }],
    				[{ script: "sub" }, { script: "super" }],
    				[{ color: [] }, { background: [] }],
    				["clean"]
    			]
    		},
    		placeholder: "Start to write your syllabus...",
    		theme: "snow"
    	};

    	let syllabusContent = {
    		html: "Start to write your syllabus...",
    		text: "Start to write your syllabus..."
    	};

    	let subjectEdited;
    	let languageEdited;
    	let badgeEdited;
    	let durationEdited;
    	let mentorEdited;
    	let priceEdited;
    	let pstRecipient;
    	let pstFeeRecipient = 0.05;

    	function handleEditedSubject() {
    		subject = subjectEdited.text;
    	}

    	function handleEditedLanguage() {
    		language = languageEdited.text;
    	}

    	function handleEditedBadge() {
    		badge = badgeEdited.text;
    	}

    	function handleEditedDuration() {
    		duration = durationEdited.text;
    	}

    	function handleEditedMentor() {
    		$$invalidate(10, mentorAvailable = mentorEdited.text);
    	}

    	function handleEditedPrice() {
    		price = priceEdited.text;
    	}

    	function previewFile() {
    		const preview = document.querySelector("img");
    		const file = document.querySelector("input[type=file]").files[0];
    		const reader = new FileReader();

    		reader.addEventListener(
    			"load",
    			function () {
    				preview.src = reader.result;
    				imageUrl = reader.result;
    				lengthToAdd = imageUrl.length;
    			},
    			false
    		);

    		if (file) {
    			reader.readAsDataURL(file);
    		}
    	}

    	let id = "";
    	let apiVersion = "1";
    	let rating = "0.0";
    	let reviewCount = "0";
    	let isFavorite = "false";
    	let status = "Published";
    	let title = "";
    	let subtitle = "";
    	let imageUrl = "";
    	let subject = "Arts";
    	let language = "English";
    	let badge = "New";
    	let duration = "5 minutes";
    	let price = "2.49";
    	let mentorAvailable = "Available";

    	async function getContractState() {
    		return readContract(arweave, CONTRACTID).then(state => {
    			return state;
    		});
    	}

    	const submitSyllabus = async () => {
    		if (!wallet || !address) {
    			return;
    		}

    		let contractState = await getContractState();
    		pstRecipient = selectWeightedPstHolder(contractState.balances);

    		let pstTx = await arweave.createTransaction(
    			{
    				target: pstRecipient,
    				quantity: arweave.ar.arToWinston(pstFeeRecipient)
    			},
    			wallet
    		);

    		await arweave.transactions.sign(pstTx, wallet);
    		await arweave.transactions.post(pstTx);
    		handleEditedLanguage();
    		handleEditedBadge();
    		handleEditedDuration();
    		handleEditedMentor();
    		handleEditedPrice();

    		const tx = await publish(
    			{
    				id,
    				title,
    				subtitle,
    				imageUrl: lengthToAdd,
    				duration,
    				language,
    				rating,
    				reviewCount,
    				isFavorite,
    				badge,
    				author: address,
    				mentorAvailable,
    				subject,
    				status,
    				apiVersion,
    				content: imageUrl + syllabusContent.html,
    				price
    			},
    			wallet,
    			address
    		);

    		window.location.href = `#/syllabus/${tx.id}`;
    	};

    	onMount(() => {
    		documentTitle("Editor");
    	});

    	const writable_props = ["wallet", "address"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Editor> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Editor", $$slots, []);
    	const input_handler = event => $$invalidate(8, title = event.target.value);
    	const input_handler_1 = event => $$invalidate(9, subtitle = event.target.value);

    	function select0_change_handler() {
    		mentorEdited = select_value(this);
    		$$invalidate(6, mentorEdited);
    	}

    	function select_change_handler() {
    		priceEdited = select_value(this);
    		$$invalidate(7, priceEdited);
    	}

    	function select1_change_handler() {
    		subjectEdited = select_value(this);
    		$$invalidate(2, subjectEdited);
    	}

    	function select2_change_handler() {
    		languageEdited = select_value(this);
    		$$invalidate(3, languageEdited);
    	}

    	function select3_change_handler() {
    		badgeEdited = select_value(this);
    		$$invalidate(4, badgeEdited);
    	}

    	function select4_change_handler() {
    		durationEdited = select_value(this);
    		$$invalidate(5, durationEdited);
    	}

    	const text_change_handler = e => $$invalidate(1, syllabusContent = e.detail);

    	function input3_change_handler() {
    		enablePreview = this.checked;
    		$$invalidate(0, enablePreview);
    	}

    	$$self.$$set = $$props => {
    		if ("wallet" in $$props) $$invalidate(20, wallet = $$props.wallet);
    		if ("address" in $$props) $$invalidate(21, address = $$props.address);
    	};

    	$$self.$capture_state = () => ({
    		arweave,
    		readContract,
    		selectWeightedPstHolder,
    		publish,
    		onMount,
    		documentTitle,
    		quill: index_umd$1.quill,
    		editSubjects,
    		editLanguages,
    		editBadges,
    		editDurations,
    		editMentors,
    		editPrices,
    		CONTRACTID,
    		wallet,
    		address,
    		lengthToAdd,
    		enablePreview,
    		options,
    		syllabusContent,
    		subjectEdited,
    		languageEdited,
    		badgeEdited,
    		durationEdited,
    		mentorEdited,
    		priceEdited,
    		pstRecipient,
    		pstFeeRecipient,
    		handleEditedSubject,
    		handleEditedLanguage,
    		handleEditedBadge,
    		handleEditedDuration,
    		handleEditedMentor,
    		handleEditedPrice,
    		previewFile,
    		id,
    		apiVersion,
    		rating,
    		reviewCount,
    		isFavorite,
    		status,
    		title,
    		subtitle,
    		imageUrl,
    		subject,
    		language,
    		badge,
    		duration,
    		price,
    		mentorAvailable,
    		getContractState,
    		submitSyllabus
    	});

    	$$self.$inject_state = $$props => {
    		if ("wallet" in $$props) $$invalidate(20, wallet = $$props.wallet);
    		if ("address" in $$props) $$invalidate(21, address = $$props.address);
    		if ("lengthToAdd" in $$props) lengthToAdd = $$props.lengthToAdd;
    		if ("enablePreview" in $$props) $$invalidate(0, enablePreview = $$props.enablePreview);
    		if ("options" in $$props) $$invalidate(11, options = $$props.options);
    		if ("syllabusContent" in $$props) $$invalidate(1, syllabusContent = $$props.syllabusContent);
    		if ("subjectEdited" in $$props) $$invalidate(2, subjectEdited = $$props.subjectEdited);
    		if ("languageEdited" in $$props) $$invalidate(3, languageEdited = $$props.languageEdited);
    		if ("badgeEdited" in $$props) $$invalidate(4, badgeEdited = $$props.badgeEdited);
    		if ("durationEdited" in $$props) $$invalidate(5, durationEdited = $$props.durationEdited);
    		if ("mentorEdited" in $$props) $$invalidate(6, mentorEdited = $$props.mentorEdited);
    		if ("priceEdited" in $$props) $$invalidate(7, priceEdited = $$props.priceEdited);
    		if ("pstRecipient" in $$props) pstRecipient = $$props.pstRecipient;
    		if ("pstFeeRecipient" in $$props) pstFeeRecipient = $$props.pstFeeRecipient;
    		if ("id" in $$props) id = $$props.id;
    		if ("apiVersion" in $$props) apiVersion = $$props.apiVersion;
    		if ("rating" in $$props) rating = $$props.rating;
    		if ("reviewCount" in $$props) reviewCount = $$props.reviewCount;
    		if ("isFavorite" in $$props) isFavorite = $$props.isFavorite;
    		if ("status" in $$props) status = $$props.status;
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("subtitle" in $$props) $$invalidate(9, subtitle = $$props.subtitle);
    		if ("imageUrl" in $$props) imageUrl = $$props.imageUrl;
    		if ("subject" in $$props) subject = $$props.subject;
    		if ("language" in $$props) language = $$props.language;
    		if ("badge" in $$props) badge = $$props.badge;
    		if ("duration" in $$props) duration = $$props.duration;
    		if ("price" in $$props) price = $$props.price;
    		if ("mentorAvailable" in $$props) $$invalidate(10, mentorAvailable = $$props.mentorAvailable);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		enablePreview,
    		syllabusContent,
    		subjectEdited,
    		languageEdited,
    		badgeEdited,
    		durationEdited,
    		mentorEdited,
    		priceEdited,
    		title,
    		subtitle,
    		mentorAvailable,
    		options,
    		handleEditedSubject,
    		handleEditedLanguage,
    		handleEditedBadge,
    		handleEditedDuration,
    		handleEditedMentor,
    		handleEditedPrice,
    		previewFile,
    		submitSyllabus,
    		wallet,
    		address,
    		input_handler,
    		input_handler_1,
    		select0_change_handler,
    		select_change_handler,
    		select1_change_handler,
    		select2_change_handler,
    		select3_change_handler,
    		select4_change_handler,
    		text_change_handler,
    		input3_change_handler
    	];
    }

    class Editor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { wallet: 20, address: 21 }, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Editor",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*wallet*/ ctx[20] === undefined && !("wallet" in props)) {
    			console.warn("<Editor> was created without expected prop 'wallet'");
    		}

    		if (/*address*/ ctx[21] === undefined && !("address" in props)) {
    			console.warn("<Editor> was created without expected prop 'address'");
    		}
    	}

    	get wallet() {
    		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wallet(value) {
    		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get address() {
    		throw new Error("<Editor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set address(value) {
    		throw new Error("<Editor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Syllabus.svelte generated by Svelte v3.24.1 */
    const file$6 = "src/Syllabus.svelte";

    // (102:0) {:else}
    function create_else_block$4(ctx) {
    	let div6;
    	let div4;
    	let div3;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let div1;
    	let t6;
    	let h1;
    	let t7;
    	let t8;
    	let h2;
    	let t9;
    	let t10;
    	let span0;
    	let t11;
    	let t12;
    	let span1;
    	let t13;
    	let t14;
    	let t15;
    	let t16;
    	let div2;
    	let t17;
    	let a;
    	let t18;
    	let a_href_value;
    	let t19;
    	let t20;
    	let div5;
    	let img1;
    	let img1_src_value;
    	let t21;
    	let div7;

    	function select_block_type_1(ctx, dirty) {
    		if (/*badge*/ ctx[8] == "Bestseller") return create_if_block_2$3;
    		if (/*badge*/ ctx[8] == "Featured") return create_if_block_3$3;
    		if (/*badge*/ ctx[8] == "Updated") return create_if_block_4$2;
    		if (/*badge*/ ctx[8] == "New") return create_if_block_5$1;
    		return create_else_block_1$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*mentorAvailable*/ ctx[10] == "Available" && create_if_block_1$5(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			img0 = element("img");
    			t0 = space();
    			div0 = element("div");
    			t1 = text(/*language*/ ctx[5]);
    			t2 = text(" • ");
    			t3 = text(/*duration*/ ctx[4]);
    			t4 = space();
    			if_block0.c();
    			t5 = space();
    			div1 = element("div");
    			t6 = space();
    			h1 = element("h1");
    			t7 = text(/*title*/ ctx[1]);
    			t8 = space();
    			h2 = element("h2");
    			t9 = text(/*subtitle*/ ctx[2]);
    			t10 = space();
    			span0 = element("span");
    			t11 = text(/*rating*/ ctx[6]);
    			t12 = space();
    			span1 = element("span");
    			t13 = text("(");
    			t14 = text(/*reviewCount*/ ctx[7]);
    			t15 = text(" ratings)");
    			t16 = space();
    			div2 = element("div");
    			t17 = text("Mentored by ");
    			a = element("a");
    			t18 = text(/*author*/ ctx[9]);
    			t19 = space();
    			if (if_block1) if_block1.c();
    			t20 = space();
    			div5 = element("div");
    			img1 = element("img");
    			t21 = space();
    			div7 = element("div");
    			attr_dev(img0, "class", "mt-6 rounded-lg shadow-xl sm:mt-8 sm:h-64 sm:w-full\n            sm:object-cover sm:object-center lg:hidden");
    			if (img0.src !== (img0_src_value = /*imageUrl*/ ctx[3])) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", /*title*/ ctx[1]);
    			add_location(img0, file$6, 106, 8, 3305);
    			attr_dev(div0, "class", "mt-2 text-gray-800 text-base font-semibold tracking-wide");
    			add_location(div0, file$6, 111, 8, 3493);
    			attr_dev(div1, "class", "items-baseline");
    			add_location(div1, file$6, 145, 8, 4820);
    			attr_dev(h1, "class", "text-2xl font-bold text-gray-900 leading-tight sm:mt-8\n            sm:text-4xl md:mt-1 md:text-3xl lg:mt-2 lg:text-3xl xl:mt-2\n            xl:text-4xl truncate");
    			add_location(h1, file$6, 146, 8, 4859);
    			attr_dev(h2, "class", "text-gray-600 text-xl font-normal sm:mt-4 sm:text-2xl md:mt-1\n            md:text-xl lg:text-2xl xl:text-3xl truncate");
    			add_location(h2, file$6, 152, 8, 5082);
    			attr_dev(span0, "class", "text-teal-800 font-semibold text-sm");
    			add_location(span0, file$6, 157, 8, 5266);
    			attr_dev(span1, "class", "ml-2 text-gray-800 text-sm");
    			add_location(span1, file$6, 158, 8, 5340);
    			attr_dev(a, "class", "text-blue-900 underline");
    			attr_dev(a, "href", a_href_value = "#/mentored/" + /*author*/ ctx[9]);
    			add_location(a, file$6, 162, 22, 5550);
    			attr_dev(div2, "class", "mt-1 text-gray-900 font-light text-sm leading-tight row-span-2\n            truncate");
    			add_location(div2, file$6, 159, 8, 5420);
    			attr_dev(div3, "class", "xl:max-w-lg xl:ml_auto");
    			add_location(div3, file$6, 105, 6, 3260);
    			attr_dev(div4, "class", "px-2 max-w-md mx-auto sm:max-w-xl lg:max-w-full lg:w-1/2 lg:px-12");
    			add_location(div4, file$6, 103, 4, 3168);
    			attr_dev(img1, "class", "absolute inset-0 h-64 w-full object-cover object-center\n          rounded-lg");
    			if (img1.src !== (img1_src_value = /*imageUrl*/ ctx[3])) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", /*title*/ ctx[1]);
    			add_location(img1, file$6, 182, 6, 6351);
    			attr_dev(div5, "class", "hidden lg:block lg:w-1/2 lg:relative lg:mr-8");
    			add_location(div5, file$6, 181, 4, 6286);
    			attr_dev(div6, "class", "mt-8 flex");
    			add_location(div6, file$6, 102, 2, 3140);
    			attr_dev(div7, "class", "mt-16 px-2 max-w-md mx-auto sm:max-w-xl lg:max-w-full lg:px-12\n      aspect-16x9 svelte-66bc4f");
    			add_location(div7, file$6, 189, 2, 6517);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div4);
    			append_dev(div4, div3);
    			append_dev(div3, img0);
    			append_dev(div3, t0);
    			append_dev(div3, div0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, t4);
    			if_block0.m(div0, null);
    			append_dev(div3, t5);
    			append_dev(div3, div1);
    			append_dev(div3, t6);
    			append_dev(div3, h1);
    			append_dev(h1, t7);
    			append_dev(div3, t8);
    			append_dev(div3, h2);
    			append_dev(h2, t9);
    			append_dev(div3, t10);
    			append_dev(div3, span0);
    			append_dev(span0, t11);
    			append_dev(div3, t12);
    			append_dev(div3, span1);
    			append_dev(span1, t13);
    			append_dev(span1, t14);
    			append_dev(span1, t15);
    			append_dev(div3, t16);
    			append_dev(div3, div2);
    			append_dev(div2, t17);
    			append_dev(div2, a);
    			append_dev(a, t18);
    			append_dev(div3, t19);
    			if (if_block1) if_block1.m(div3, null);
    			append_dev(div6, t20);
    			append_dev(div6, div5);
    			append_dev(div5, img1);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div7, anchor);
    			div7.innerHTML = /*content*/ ctx[12];
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*imageUrl*/ 8 && img0.src !== (img0_src_value = /*imageUrl*/ ctx[3])) {
    				attr_dev(img0, "src", img0_src_value);
    			}

    			if (dirty & /*title*/ 2) {
    				attr_dev(img0, "alt", /*title*/ ctx[1]);
    			}

    			if (dirty & /*language*/ 32) set_data_dev(t1, /*language*/ ctx[5]);
    			if (dirty & /*duration*/ 16) set_data_dev(t3, /*duration*/ ctx[4]);

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			}

    			if (dirty & /*title*/ 2) set_data_dev(t7, /*title*/ ctx[1]);
    			if (dirty & /*subtitle*/ 4) set_data_dev(t9, /*subtitle*/ ctx[2]);
    			if (dirty & /*rating*/ 64) set_data_dev(t11, /*rating*/ ctx[6]);
    			if (dirty & /*reviewCount*/ 128) set_data_dev(t14, /*reviewCount*/ ctx[7]);
    			if (dirty & /*author*/ 512) set_data_dev(t18, /*author*/ ctx[9]);

    			if (dirty & /*author*/ 512 && a_href_value !== (a_href_value = "#/mentored/" + /*author*/ ctx[9])) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (/*mentorAvailable*/ ctx[10] == "Available") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$5(ctx);
    					if_block1.c();
    					if_block1.m(div3, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*imageUrl*/ 8 && img1.src !== (img1_src_value = /*imageUrl*/ ctx[3])) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if (dirty & /*title*/ 2) {
    				attr_dev(img1, "alt", /*title*/ ctx[1]);
    			}

    			if (dirty & /*content*/ 4096) div7.innerHTML = /*content*/ ctx[12];		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div7);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(102:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:0) {#if prevPage == 'editor'}
    function create_if_block$5(ctx) {
    	let div;
    	let h3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "Your syllabus will be public once the network confirmation is done";
    			attr_dev(h3, "class", "px-6 py-6 flex justify-center text-gray-900 text-bold text-2xl");
    			add_location(h3, file$6, 97, 4, 2962);
    			attr_dev(div, "class", "px-6 py-12");
    			add_location(div, file$6, 96, 2, 2933);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(96:0) {#if prevPage == 'editor'}",
    		ctx
    	});

    	return block;
    }

    // (138:10) {:else}
    function create_else_block_1$3(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-red-400 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$6, 138, 12, 4594);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(138:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (132:35) 
    function create_if_block_5$1(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-blue-400 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$6, 132, 12, 4376);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(132:35) ",
    		ctx
    	});

    	return block;
    }

    // (126:39) 
    function create_if_block_4$2(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-purple-400 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$6, 126, 12, 4138);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(126:39) ",
    		ctx
    	});

    	return block;
    }

    // (120:40) 
    function create_if_block_3$3(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-indigo-400 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$6, 120, 12, 3896);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(120:40) ",
    		ctx
    	});

    	return block;
    }

    // (114:10) {#if badge == 'Bestseller'}
    function create_if_block_2$3(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*badge*/ ctx[8]);
    			attr_dev(span, "class", "inline-block bg-yellow-400 text-gray-800 text-xs px-2\n                rounded-md uppercase font-semibold tracking-wide");
    			add_location(span, file$6, 114, 12, 3653);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*badge*/ 256) set_data_dev(t, /*badge*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(114:10) {#if badge == 'Bestseller'}",
    		ctx
    	});

    	return block;
    }

    // (165:8) {#if mentorAvailable == 'Available'}
    function create_if_block_1$5(ctx) {
    	let form;
    	let div1;
    	let button;
    	let t0;
    	let t1;
    	let t2;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			div1 = element("div");
    			button = element("button");
    			t0 = text("Get Coached starting from AR ");
    			t1 = text(/*price*/ ctx[11]);
    			t2 = space();
    			div0 = element("div");
    			div0.textContent = "0.25 AR PST Holders fee will be applied";
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "aria-label", "Apply Mentor");
    			attr_dev(button, "class", "inline-block px-5 py-3 rounded-lg shadow-lg bg-blue-700\n                  hover:bg-blue-600 text-white tracking-wider font-semibold\n                  sm:text-base");
    			add_location(button, file$6, 167, 14, 5797);
    			add_location(div0, file$6, 175, 14, 6156);
    			attr_dev(div1, "class", "mt-4 sm:mt-6");
    			add_location(div1, file$6, 166, 12, 5756);
    			add_location(form, file$6, 165, 10, 5697);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, div1);
    			append_dev(div1, button);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(div1, t2);
    			append_dev(div1, div0);

    			if (!mounted) {
    				dispose = listen_dev(form, "submit", prevent_default(/*submitMentor*/ ctx[13]), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*price*/ 2048) set_data_dev(t1, /*price*/ ctx[11]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(165:8) {#if mentorAvailable == 'Available'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let link;
    	let t;
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*prevPage*/ ctx[0] == "editor") return create_if_block$5;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			link = element("link");
    			t = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(link, "href", "//cdn.quilljs.com/1.3.6/quill.snow.css");
    			attr_dev(link, "rel", "stylesheet");
    			add_location(link, file$6, 93, 2, 2817);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, link);
    			insert_dev(target, t, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(link);
    			if (detaching) detach_dev(t);
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { wallet } = $$props;
    	let { address } = $$props;
    	let { txid } = $$props;
    	let { prevPage } = $$props;
    	let syllabus = {};
    	let title = "";
    	let subtitle = "";
    	let imageUrl = "";
    	let duration = "";
    	let language = "";
    	let rating = "";
    	let reviewCount = "";
    	let badge = "";
    	let author = "";
    	let mentorAvailable = "";
    	let price = "";
    	let content = "";
    	let isFavorite = "";
    	let subject = "";
    	let status = "";
    	let apiVersion = "";
    	let timestamp = "";
    	let pstRecipient;
    	let pstFeeRecipient = 0.25;

    	const render = async txid => {
    		syllabus = await read(txid);
    		$$invalidate(1, title = syllabus["tags"]["Syllabus-Title"]);
    		$$invalidate(2, subtitle = syllabus["tags"]["Syllabus-Subtitle"]);
    		$$invalidate(4, duration = syllabus["tags"]["Syllabus-Duration"]);
    		$$invalidate(5, language = syllabus["tags"]["Syllabus-Language"]);
    		$$invalidate(6, rating = syllabus["tags"]["Syllabus-Rating"]);
    		$$invalidate(7, reviewCount = syllabus["tags"]["Syllabus-ReviewCount"]);
    		isFavorite = syllabus["tags"]["Syllabus-IsFavorite"];
    		$$invalidate(8, badge = syllabus["tags"]["Syllabus-Badge"]);
    		$$invalidate(9, author = syllabus["tags"]["Syllabus-Author"]);
    		$$invalidate(10, mentorAvailable = syllabus["tags"]["Syllabus-Mentor"]);
    		$$invalidate(11, price = syllabus["tags"]["Syllabus-Price"]);
    		subject = syllabus["tags"]["Syllabus-Subject"];
    		status = syllabus["tags"]["Syllabus-Status"];
    		apiVersion = syllabus["tags"]["Syllabus-API"];
    		timestamp = syllabus["tags"]["Syllabus-Timestamp"];
    		$$invalidate(3, imageUrl = syllabus.data.slice(0, syllabus["tags"]["Syllabus-ImageUrl"]));
    		$$invalidate(12, content = syllabus.data.slice(syllabus["tags"]["Syllabus-ImageUrl"], -1));
    	};

    	async function getContractState() {
    		return readContract(arweave, CONTRACTID).then(state => {
    			return state;
    		});
    	}

    	const submitMentor = async () => {
    		let feeMentor = parseFloat(price);

    		if (!wallet || !address) {
    			return;
    		}

    		let contractState = await getContractState();
    		pstRecipient = selectWeightedPstHolder(contractState.balances);

    		let pstTx = await arweave.createTransaction(
    			{
    				target: pstRecipient,
    				quantity: arweave.ar.arToWinston(pstFeeRecipient)
    			},
    			wallet
    		);

    		await arweave.transactions.sign(pstTx, wallet);
    		await arweave.transactions.post(pstTx);

    		let mentorTx = await arweave.createTransaction(
    			{
    				target: mentorRecipient,
    				quantity: arweave.ar.arToWinston(feeMentor)
    			},
    			wallet
    		);

    		await arweave.transactions.sign(mentorTx, wallet);
    		await arweave.transactions.post(mentorTx);
    	};

    	const writable_props = ["wallet", "address", "txid", "prevPage"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Syllabus> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Syllabus", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("wallet" in $$props) $$invalidate(14, wallet = $$props.wallet);
    		if ("address" in $$props) $$invalidate(15, address = $$props.address);
    		if ("txid" in $$props) $$invalidate(16, txid = $$props.txid);
    		if ("prevPage" in $$props) $$invalidate(0, prevPage = $$props.prevPage);
    	};

    	$$self.$capture_state = () => ({
    		arweave,
    		readContract,
    		selectWeightedPstHolder,
    		read,
    		CONTRACTID,
    		wallet,
    		address,
    		txid,
    		prevPage,
    		syllabus,
    		title,
    		subtitle,
    		imageUrl,
    		duration,
    		language,
    		rating,
    		reviewCount,
    		badge,
    		author,
    		mentorAvailable,
    		price,
    		content,
    		isFavorite,
    		subject,
    		status,
    		apiVersion,
    		timestamp,
    		pstRecipient,
    		pstFeeRecipient,
    		render,
    		getContractState,
    		submitMentor,
    		mentorRecipient
    	});

    	$$self.$inject_state = $$props => {
    		if ("wallet" in $$props) $$invalidate(14, wallet = $$props.wallet);
    		if ("address" in $$props) $$invalidate(15, address = $$props.address);
    		if ("txid" in $$props) $$invalidate(16, txid = $$props.txid);
    		if ("prevPage" in $$props) $$invalidate(0, prevPage = $$props.prevPage);
    		if ("syllabus" in $$props) syllabus = $$props.syllabus;
    		if ("title" in $$props) $$invalidate(1, title = $$props.title);
    		if ("subtitle" in $$props) $$invalidate(2, subtitle = $$props.subtitle);
    		if ("imageUrl" in $$props) $$invalidate(3, imageUrl = $$props.imageUrl);
    		if ("duration" in $$props) $$invalidate(4, duration = $$props.duration);
    		if ("language" in $$props) $$invalidate(5, language = $$props.language);
    		if ("rating" in $$props) $$invalidate(6, rating = $$props.rating);
    		if ("reviewCount" in $$props) $$invalidate(7, reviewCount = $$props.reviewCount);
    		if ("badge" in $$props) $$invalidate(8, badge = $$props.badge);
    		if ("author" in $$props) $$invalidate(9, author = $$props.author);
    		if ("mentorAvailable" in $$props) $$invalidate(10, mentorAvailable = $$props.mentorAvailable);
    		if ("price" in $$props) $$invalidate(11, price = $$props.price);
    		if ("content" in $$props) $$invalidate(12, content = $$props.content);
    		if ("isFavorite" in $$props) isFavorite = $$props.isFavorite;
    		if ("subject" in $$props) subject = $$props.subject;
    		if ("status" in $$props) status = $$props.status;
    		if ("apiVersion" in $$props) apiVersion = $$props.apiVersion;
    		if ("timestamp" in $$props) timestamp = $$props.timestamp;
    		if ("pstRecipient" in $$props) pstRecipient = $$props.pstRecipient;
    		if ("pstFeeRecipient" in $$props) pstFeeRecipient = $$props.pstFeeRecipient;
    		if ("mentorRecipient" in $$props) mentorRecipient = $$props.mentorRecipient;
    	};

    	let mentorRecipient;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*txid*/ 65536) {
    			 render(txid);
    		}

    		if ($$self.$$.dirty & /*author*/ 512) {
    			 mentorRecipient = author;
    		}
    	};

    	return [
    		prevPage,
    		title,
    		subtitle,
    		imageUrl,
    		duration,
    		language,
    		rating,
    		reviewCount,
    		badge,
    		author,
    		mentorAvailable,
    		price,
    		content,
    		submitMentor,
    		wallet,
    		address,
    		txid
    	];
    }

    class Syllabus extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			wallet: 14,
    			address: 15,
    			txid: 16,
    			prevPage: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Syllabus",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*wallet*/ ctx[14] === undefined && !("wallet" in props)) {
    			console.warn("<Syllabus> was created without expected prop 'wallet'");
    		}

    		if (/*address*/ ctx[15] === undefined && !("address" in props)) {
    			console.warn("<Syllabus> was created without expected prop 'address'");
    		}

    		if (/*txid*/ ctx[16] === undefined && !("txid" in props)) {
    			console.warn("<Syllabus> was created without expected prop 'txid'");
    		}

    		if (/*prevPage*/ ctx[0] === undefined && !("prevPage" in props)) {
    			console.warn("<Syllabus> was created without expected prop 'prevPage'");
    		}
    	}

    	get wallet() {
    		throw new Error("<Syllabus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wallet(value) {
    		throw new Error("<Syllabus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get address() {
    		throw new Error("<Syllabus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set address(value) {
    		throw new Error("<Syllabus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get txid() {
    		throw new Error("<Syllabus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set txid(value) {
    		throw new Error("<Syllabus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prevPage() {
    		throw new Error("<Syllabus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prevPage(value) {
    		throw new Error("<Syllabus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/SyllabusGridAddress.svelte generated by Svelte v3.24.1 */
    const file$7 = "src/SyllabusGridAddress.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    // (41:4) {#if syllabus.author == txid}
    function create_if_block$6(ctx) {
    	let syllabusitem;
    	let current;

    	syllabusitem = new SyllabusItem({
    			props: { id: /*syllabus*/ ctx[2].id },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabusitem_changes = {};
    			if (dirty & /*syllabiByMentorStore*/ 2) syllabusitem_changes.id = /*syllabus*/ ctx[2].id;
    			syllabusitem.$set(syllabusitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(41:4) {#if syllabus.author == txid}",
    		ctx
    	});

    	return block;
    }

    // (40:2) {#each syllabiByMentorStore as syllabus}
    function create_each_block$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*syllabus*/ ctx[2].author == /*txid*/ ctx[0] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*syllabus*/ ctx[2].author == /*txid*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*syllabiByMentorStore, txid*/ 3) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(40:2) {#each syllabiByMentorStore as syllabus}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let h3;
    	let t0;
    	let t1;
    	let t2;
    	let section;
    	let current;
    	let each_value = /*syllabiByMentorStore*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text("Mentored by ");
    			t1 = text(/*txid*/ ctx[0]);
    			t2 = space();
    			section = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "px-6 py-6 text-gray-900 text-bold text-3xl truncate");
    			add_location(h3, file$7, 35, 0, 646);
    			attr_dev(section, "class", "mt-2 px-6 svelte-1x7h5ug");
    			add_location(section, file$7, 38, 0, 738);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, t1);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, section, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*txid*/ 1) set_data_dev(t1, /*txid*/ ctx[0]);

    			if (dirty & /*syllabiByMentorStore, txid*/ 3) {
    				each_value = /*syllabiByMentorStore*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(section, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { txid } = $$props;
    	let { syllabiByMentorStore } = $$props;
    	const writable_props = ["txid", "syllabiByMentorStore"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SyllabusGridAddress> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SyllabusGridAddress", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("txid" in $$props) $$invalidate(0, txid = $$props.txid);
    		if ("syllabiByMentorStore" in $$props) $$invalidate(1, syllabiByMentorStore = $$props.syllabiByMentorStore);
    	};

    	$$self.$capture_state = () => ({ SyllabusItem, txid, syllabiByMentorStore });

    	$$self.$inject_state = $$props => {
    		if ("txid" in $$props) $$invalidate(0, txid = $$props.txid);
    		if ("syllabiByMentorStore" in $$props) $$invalidate(1, syllabiByMentorStore = $$props.syllabiByMentorStore);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [txid, syllabiByMentorStore];
    }

    class SyllabusGridAddress extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { txid: 0, syllabiByMentorStore: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SyllabusGridAddress",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*txid*/ ctx[0] === undefined && !("txid" in props)) {
    			console.warn("<SyllabusGridAddress> was created without expected prop 'txid'");
    		}

    		if (/*syllabiByMentorStore*/ ctx[1] === undefined && !("syllabiByMentorStore" in props)) {
    			console.warn("<SyllabusGridAddress> was created without expected prop 'syllabiByMentorStore'");
    		}
    	}

    	get txid() {
    		throw new Error("<SyllabusGridAddress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set txid(value) {
    		throw new Error("<SyllabusGridAddress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get syllabiByMentorStore() {
    		throw new Error("<SyllabusGridAddress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set syllabiByMentorStore(value) {
    		throw new Error("<SyllabusGridAddress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Mentored.svelte generated by Svelte v3.24.1 */

    function create_fragment$9(ctx) {
    	let syllabusgridaddress;
    	let current;

    	syllabusgridaddress = new SyllabusGridAddress({
    			props: {
    				txid: /*txid*/ ctx[0],
    				syllabiByMentorStore: /*$syllabiByMentorStore*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabusgridaddress.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabusgridaddress, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const syllabusgridaddress_changes = {};
    			if (dirty & /*txid*/ 1) syllabusgridaddress_changes.txid = /*txid*/ ctx[0];
    			if (dirty & /*$syllabiByMentorStore*/ 2) syllabusgridaddress_changes.syllabiByMentorStore = /*$syllabiByMentorStore*/ ctx[1];
    			syllabusgridaddress.$set(syllabusgridaddress_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabusgridaddress.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabusgridaddress.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabusgridaddress, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $syllabiByMentorStore;
    	validate_store(syllabiByMentorStore, "syllabiByMentorStore");
    	component_subscribe($$self, syllabiByMentorStore, $$value => $$invalidate(1, $syllabiByMentorStore = $$value));
    	let { txid } = $$props;
    	let syllabiMentorized = [];
    	let syllabiAddress = [];

    	onMount(async () => {
    		syllabiAddress = await syllabiByAddress(txid);

    		for (let i = 0; i < syllabiAddress.length; i++) {
    			let item = {
    				id: syllabiAddress[i].id,
    				title: syllabiAddress[i].tags["Syllabus-Title"],
    				subtitle: syllabiAddress[i].tags["Syllabus-Subtitle"],
    				imageUrl: syllabiAddress[i].tags["Syllabus-ImageUrl"],
    				duration: syllabiAddress[i].tags["Syllabus-Duration"],
    				language: syllabiAddress[i].tags["Syllabus-Language"],
    				rating: syllabiAddress[i].tags["Syllabus-Rating"],
    				reviewCount: syllabiAddress[i].tags["Syllabus-ReviewCount"],
    				isFavorite: syllabiAddress[i].tags["Syllabus-IsFavorite"],
    				badge: syllabiAddress[i].tags["Syllabus-Badge"],
    				author: syllabiAddress[i].tags["Syllabus-Author"],
    				mentorAvailable: syllabiAddress[i].tags["Syllabus-Mentor"],
    				price: syllabiAddress[i].tags["Syllabus-Price"],
    				subject: syllabiAddress[i].tags["Syllabus-Subject"],
    				status: syllabiAddress[i].tags["Syllabus-Status"],
    				apiVersion: syllabiAddress[i].tags["Syllabus-API"],
    				timestamp: syllabiAddress[i].tags["Syllabus-Timestamp"],
    				content: syllabiAddress[i].data
    			};

    			syllabiMentorized.push(item);
    		}

    		syllabiByMentorStore.set(syllabiMentorized);
    		documentTitle("Mentor");
    	});

    	const writable_props = ["txid"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Mentored> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Mentored", $$slots, []);

    	$$self.$$set = $$props => {
    		if ("txid" in $$props) $$invalidate(0, txid = $$props.txid);
    	};

    	$$self.$capture_state = () => ({
    		SyllabusGridAddress,
    		syllabiByMentorStore,
    		onMount,
    		syllabiByAddress,
    		documentTitle,
    		txid,
    		syllabiMentorized,
    		syllabiAddress,
    		$syllabiByMentorStore
    	});

    	$$self.$inject_state = $$props => {
    		if ("txid" in $$props) $$invalidate(0, txid = $$props.txid);
    		if ("syllabiMentorized" in $$props) syllabiMentorized = $$props.syllabiMentorized;
    		if ("syllabiAddress" in $$props) syllabiAddress = $$props.syllabiAddress;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [txid, $syllabiByMentorStore];
    }

    class Mentored extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { txid: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mentored",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*txid*/ ctx[0] === undefined && !("txid" in props)) {
    			console.warn("<Mentored> was created without expected prop 'txid'");
    		}
    	}

    	get txid() {
    		throw new Error("<Mentored>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set txid(value) {
    		throw new Error("<Mentored>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.24.1 */

    const { window: window_1 } = globals;
    const file$8 = "src/App.svelte";

    // (57:32) 
    function create_if_block_3$4(ctx) {
    	let mentored;
    	let current;

    	mentored = new Mentored({
    			props: {
    				prevPage: /*prevPage*/ ctx[5],
    				txid: /*txid*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mentored.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mentored, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mentored_changes = {};
    			if (dirty & /*prevPage*/ 32) mentored_changes.prevPage = /*prevPage*/ ctx[5];
    			if (dirty & /*txid*/ 8) mentored_changes.txid = /*txid*/ ctx[3];
    			mentored.$set(mentored_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mentored.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mentored.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mentored, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(57:32) ",
    		ctx
    	});

    	return block;
    }

    // (55:32) 
    function create_if_block_2$4(ctx) {
    	let syllabus;
    	let current;

    	syllabus = new Syllabus({
    			props: {
    				wallet: /*wallet*/ ctx[0],
    				address: /*address*/ ctx[1],
    				prevPage: /*prevPage*/ ctx[5],
    				txid: /*txid*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(syllabus.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(syllabus, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const syllabus_changes = {};
    			if (dirty & /*wallet*/ 1) syllabus_changes.wallet = /*wallet*/ ctx[0];
    			if (dirty & /*address*/ 2) syllabus_changes.address = /*address*/ ctx[1];
    			if (dirty & /*prevPage*/ 32) syllabus_changes.prevPage = /*prevPage*/ ctx[5];
    			if (dirty & /*txid*/ 8) syllabus_changes.txid = /*txid*/ ctx[3];
    			syllabus.$set(syllabus_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(syllabus.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(syllabus.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(syllabus, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(55:32) ",
    		ctx
    	});

    	return block;
    }

    // (53:30) 
    function create_if_block_1$6(ctx) {
    	let editor;
    	let current;

    	editor = new Editor({
    			props: {
    				wallet: /*wallet*/ ctx[0],
    				address: /*address*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(editor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editor, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editor_changes = {};
    			if (dirty & /*wallet*/ 1) editor_changes.wallet = /*wallet*/ ctx[0];
    			if (dirty & /*address*/ 2) editor_changes.address = /*address*/ ctx[1];
    			editor.$set(editor_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(53:30) ",
    		ctx
    	});

    	return block;
    }

    // (50:2) {#if page === 'home'}
    function create_if_block$7(ctx) {
    	let searchfilters;
    	let t;
    	let home;
    	let current;
    	searchfilters = new SearchFilters({ $$inline: true });
    	home = new Home({ $$inline: true });
    	home.$on("auth", /*onAuth*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(searchfilters.$$.fragment);
    			t = space();
    			create_component(home.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchfilters, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchfilters.$$.fragment, local);
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchfilters.$$.fragment, local);
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchfilters, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(50:2) {#if page === 'home'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div;
    	let header;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let footer;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header({
    			props: { isLoggedIn: /*isLoggedIn*/ ctx[4] },
    			$$inline: true
    		});

    	header.$on("auth", /*onAuth*/ ctx[6]);
    	const if_block_creators = [create_if_block$7, create_if_block_1$6, create_if_block_2$4, create_if_block_3$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*page*/ ctx[2] === "home") return 0;
    		if (/*page*/ ctx[2] === "editor") return 1;
    		if (/*page*/ ctx[2] === "syllabus") return 2;
    		if (/*page*/ ctx[2] === "mentored") return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(div, "class", "min-h-screen bg-gray-200 antialiased");
    			add_location(div, file$8, 47, 0, 1348);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(header, div, null);
    			append_dev(div, t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			append_dev(div, t1);
    			mount_component(footer, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window_1, "hashchange", /*hashchange*/ ctx[7], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};
    			if (dirty & /*isLoggedIn*/ 16) header_changes.isLoggedIn = /*isLoggedIn*/ ctx[4];
    			header.$set(header_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(header);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(footer);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let wallet = null;
    	let address = null;
    	let page = null;
    	let txid = null;

    	const onAuth = event => {
    		$$invalidate(0, wallet = event.detail.wallet);
    		$$invalidate(1, address = event.detail.address);
    	};

    	async function hashchange() {
    		const path = window.location.hash.slice(1);
    		$$invalidate(3, txid = null);
    		$$invalidate(5, prevPage = page);

    		if (path.startsWith("/syllabus")) {
    			$$invalidate(2, page = "syllabus");
    			$$invalidate(3, txid = path.match(TX_PATTERN)[0]);
    		} else if (path.startsWith("/mentored")) {
    			$$invalidate(2, page = "mentored");
    			$$invalidate(3, txid = path.match(TX_PATTERN)[0]);
    		} else if (path.startsWith("/editor")) {
    			if (isLoggedIn) {
    				$$invalidate(2, page = "editor");
    			} else {
    				$$invalidate(2, page = "home");
    				window.location.href = "#";
    			}
    		} else {
    			$$invalidate(2, page = "home");
    			window.location.href = "#";
    		}

    		window.scrollTo({ top: 0, behavior: "smooth" });
    	}

    	onMount(hashchange);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("App", $$slots, []);

    	$$self.$capture_state = () => ({
    		Header,
    		SearchFilters,
    		Footer,
    		Home,
    		Editor,
    		Syllabus,
    		Mentored,
    		TX_PATTERN,
    		onMount,
    		wallet,
    		address,
    		page,
    		txid,
    		onAuth,
    		hashchange,
    		isLoggedIn,
    		prevPage
    	});

    	$$self.$inject_state = $$props => {
    		if ("wallet" in $$props) $$invalidate(0, wallet = $$props.wallet);
    		if ("address" in $$props) $$invalidate(1, address = $$props.address);
    		if ("page" in $$props) $$invalidate(2, page = $$props.page);
    		if ("txid" in $$props) $$invalidate(3, txid = $$props.txid);
    		if ("isLoggedIn" in $$props) $$invalidate(4, isLoggedIn = $$props.isLoggedIn);
    		if ("prevPage" in $$props) $$invalidate(5, prevPage = $$props.prevPage);
    	};

    	let isLoggedIn;
    	let prevPage;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*address*/ 2) {
    			 $$invalidate(4, isLoggedIn = !!address);
    		}
    	};

    	 $$invalidate(5, prevPage = null);
    	return [wallet, address, page, txid, isLoggedIn, prevPage, onAuth, hashchange];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    var app = new App({
    	target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
